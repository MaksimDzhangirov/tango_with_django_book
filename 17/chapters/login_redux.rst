.. _login-redux-label:

Аутентификация пользователя с помощью Django-Registration-Redux
===============================================================
Существует множество разработанных дополнительных приложений, которые обеспечивают механизмы входа в систему, регистрации и аутентификации. Поскольку большинство приложений предоставляют такие возможности, нет смысла заново писать/заново придумывать URL, представления и шаблоны. В этой главе мы будем использовать пакет ``django-registration-redux`` для реализаци этих возможностей. Это означает, что мы должны реорганизовать код - но в то же время мы приобретем опыт использования внешних приложений, как они могут быть подключены к Вашему Django проекту на примере приложения для входа в систему со всеми дополнительными возможностями. Это также сделает наше приложение намного чище.



.. note:: Эта глава не обязательная. Вы можете пропустить её, но мы будем считать, что Вы обновили механизмы аутентификации в последующих главах.


Настрока Django Registration Redux
----------------------------------

Для начала необходимо установить пакет ``django-registration-redux``:

..


    $ pip install django-registration-redux


Теперь, когда он установлен, необходимо указать Django, что мы будем использовать это приложение. Откройте файл ``settings.py`` и обновите кортеж ``INSTALLED_APPS``:

.. code-block:: python
    
    
    INSTALLED_APPS = (
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'rango',
        'registration', # добавляем пакет для регистрации пользователей
    )

Находясь в файле ``settings.py``, также можете добавить:

.. code-block:: python
    

    REGISTRATION_OPEN = True        # Если равно True, то пользователи могут регистрироваться
    ACCOUNT_ACTIVATION_DAYS = 7     # время в течении которого можно активировать аккаунт;
                                    # в качестве примера выбрано 7 дней или одна неделя, но Вы можете указать другое значение.
    REGISTRATION_AUTO_LOGIN = True  # Если равно  True, то пользователь будет автоматически входить в систему.
    LOGIN_REDIRECT_URL = '/rango/'  # Страница, на которую будут попадать пользователи, после успешного входа в систему.
    LOGIN_URL = '/accounts/login/'  # Страница, на которую перенаправляются пользователи, если они не вошли в систему и
                                    # пытаются получить доступ к страницам, которые требуют аутентификации
    

Что делают эти настройки, должно быть понятно из комментариев. Теперь в ``tango_with_django_project/urls.py`` можно обновить ``urlpatterns`` так, чтобы в них была ссылка на пакет registration.

.. code-block:: python

    urlpatterns = patterns('',
            
        url(r'^admin/', include(admin.site.urls)),
        url(r'^rango/', include('rango.urls')),
        url(r'^accounts/', include('registration.backends.simple.urls')),
    )

Пакет ``django-registration-redux`` предоставляет ряд различных бекендов для регистрации в зависимости от Ваших потребностей. Например, Вам может потребоваться процесс регистрации, состоящий из двух этапов, когда пользователю посылается письмо с ссылкой для подтверждения регистрации. Здесь мы будем использовать простой одноэтапный процесс, когда пользователь создает свою учетную запись, вводя имя пользователя, адрес электронной почты и пароль, после чего автоматически входит в систему.

Функциональные возможности и сопоставление URL
------------------------------

Пакет Django Registration Redux автоматизирует множество функций. В ``registration.backend.simple.urls`` реализуется:

* регистрация -> ``/accounts/register/``
* завершение регистрации -> ``/accounts/register/complete``
* вход в систему  -> ``/accounts/login/``
* выход из системы  -> ``/accounts/logout/``
* изменение пароля -> ``/password/change/``
* сброс пароля -> ``/password/reset/``

В то же время ``registration.backends.default.urls`` кроме этого предоставляет функции для активации учетной записи в два этапа:

* активация завершена (используется при регистрации в два этапа) -> ``activate/complete/``
* активировать (используется при неудачной активации) -> ``activate/<ключ_активации>/``
* письмо с активационным ключом (сообщает пользователю, что было послано письмо с активационным ключом)

    * содержимое письма с активационным ключом (текстовый файл, содержащий текст письма)
    * тема письма с активационным ключом (текстовый файл, содержащий строку с темой письма)


А теперь самое интересное. Хотя Django Registration Redux предоставляет все эти функции, в нём не реализован ни один шаблон. Поэтому нам нужно создать шаблоны для каждого представления.


Настройка шаблонов
------------------

В руководстве по быстрому старту, смотри https://django-registration-redux.readthedocs.org/en/latest/quickstart.html, кратко описывается какие шаблоны нужны, но не сразу понятно, что должен содержать каждый шаблон.

Тем не менее, можно скачать набор шаблонов с аккаунта GitHub Anders Hofstee по ссылке https://github.com/macdhuibh/django-registration-templates и узнать, что входит в шаблоны. Мы будем использовать эти шаблоны как образец.

Сначала создайте новый каталог в каталоге ``templates`` под названием ``registration``. Здесь будут храниться все страницы, связанные с приложением Django Registration Redux и оно будет просматривать содержимое этого каталога при поиске требуемых ему шаблонов.

Шаблон для входа в систему
...............

В каталоге ``templates/registration`` создайте файл ``login.html`` со следующим кодом:

.. code-block:: html


    {% extends "rango/base.html" %}
    
    {% block body_block %}
    <h1>Login</h1>
        <form method="post" action=".">
            {% csrf_token %} 
            {{ form.as_p }}

            <input type="submit" value="Log in" />
            <input type="hidden" name="next" value="{{ next }}" />
            </form>

        <p>Not  a member? <a href="{% url 'registration_register' %}">Register</a>!</p>
    {% endblock %}


Обратите внимание, что каждый раз при создании ссылки на URL, используется тег шаблона ``url``. Если посетить страницу http://127.0.0.1:8000/accounts/, то Вы увидите список URL сопоставлений и названия, связанные с каждым URL.


Шаблон для регистрации
......................

В ``templates/registration`` создайте файл ``registration_form.html`` со следующим содержимым:

.. code-block:: html

    {% extends "rango/base.html" %}


    {% block body_block %}
    <h1>Register Here</h1>
        <form method="post" action=".">
            {% csrf_token %}
            {{ form.as_p }}

            <input type="submit" value="Submit" />
        </form>
    {% endblock %}



Шаблон для страницы "Регистрация завершена"
...........................................

В ``templates/registration`` создайте файл ``registration_complete.html`` со следующим кодом:

.. code-block:: html

    {% extends "rango/base.html" %}


    {% block body_block %}
    <h1>Registration Complete</h1>
        <p>You are now registered</p>
    {% endblock %}


Шаблон для выхода из системы
............................

В ``templates/registration`` создайте файл ``logout.html`` со следующим содержимым:

.. code-block:: html

    {% extends "rango/base.html" %}


    {% block body_block %}
    <h1>Logged Out</h1>
        <p>You are now logged out.</p>
    {% endblock %}


Проверка работоспособности процесса регистрации
...............................................
Запустите сервер и посетите страницу: http://127.0.0.1:8000/accounts/register/

Обратите внимание, что форма для регистрации содержит два поля для пароля - так, чтобы его можно было проверить. Попытайтесь зарегистрироваться, но введите разные пароли.

После проверки работоспособности приложения, нам все ещё необходимо избавиться от старого кода.

Реорганизация Вашего проекта
............................
Теперь необходимо обновить ``base.html`` так, чтобы использовались новые URL/представления для регистрации:

* Обновите ссылку register, чтобы она указывала на ``<a href="{% url 'registration_register' %}">``
* Ссылка login должна указывать на ``<a href="{% url 'auth_login' %}">`` и
* Ссылка logout - на ``<a href="{% url 'auth_logout' %}?next=/rango/">``
* В ``settings.py``, измените ``LOGIN_URL`` на ``'/accounts/login/'``.

Обратите внимание, что для ссылки на logout мы добавили ``?next=/rango/``. При этом после выхода из системы пользователь будет перенаправляться на главную страницу Rango. Если убрать эту часть строки, то пользователи будут перенаправляться на страницу входа в систему (что не должно происходить в данном случае).

Затем можно удалить URLы, представления и шаблоны (или закомментировать), связанные с нашей реализацией функций ``регистрации``, ``входа и выхода в/из системы``, для приложения ``rango``.

Изменяем последовательность действий при регистрации
....................................................
В момент, когда пользователи зарегистрировались на сайте, их направляют на страницу, показывающую, что регистрация завершена. Это кажется нам неудобным, поэтому, мы будем направлять их главную страницу. Для этого нужно переопределить ``RegistrationView``, предоставляемый ``registration.backends.simple.views``. В ``tango_with_django_project/urls.py`` импортируйте ``RegistrationView``, добавьте новый класс для регистрации и затем обновите ``urlpatterns`` следующим образом:

.. code-block:: python


    from registration.backends.simple.views import RegistrationView
    
    # Создайте новый класс, который перенаправит пользователя на главную страницу при успешной регистрации
    class MyRegistrationView(RegistrationView):
        def get_success_url(self, request, user):
            return '/rango/'


    urlpatterns = patterns('',
        url(r'^admin/', include(admin.site.urls)),
        url(r'^rango/', include('rango.urls')),
        # Добавляем эту строку в URL шаблоны, чтобы переопределить шаблон, используемый по умолчанию для учетных записей, - r'^accounts/'.
        url(r'^accounts/register/$', MyRegistrationView.as_view(), name='registration_register'),
        url(r'^accounts/', include('registration.backends.simple.urls')),
    )




#TODO(leifos): Add in a customized registration form..



Упражнения
----------
* Реализуйте функциональную возможность, позволяющую пользователям менять пароль


    
    
