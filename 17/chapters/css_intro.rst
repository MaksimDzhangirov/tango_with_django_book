.. _css-course-label:

Ускоренный курс по CSS
======================
При веб разработке мы используем *Каскадные таблицы стилей (CSS)* для описания внешнего вида HTML документа (т. е., того как пользователь видит и воспринимает его).

Каждый элемент внутри HTML документа может быть *стилизован*. CSS для конкретного HTML элемента описывает как он должен быть выведен на экран. Для этого различным *свойствам*, связанным с элементом, присваиваются *значения*. Например, свойству ``font-size`` может быть присвоено значение ``24pt``, чтобы любой текст содержащийся внутри указанного HTML элемента имел размер 24pt. Мы также могли бы присвоить свойству ``text-align`` значение ``right``, чтобы выровнять текст внутри HTML элемента по правой стороне.

.. note:: Существует большое множество различных CSS свойств, которые Вы можете использовать при стилизации. Каждое из них позволяет реализовать отдельную функциональную возможность. Просмотрите `W3C веб сайт <http://www.w3.org/TR/CSS2/propidx.html>`_ и `HTML Dog <http://www.htmldog.com/reference/cssproperties/>`_, чтобы увидеть список доступных свойств. На сайте `pageresource.com <http://www.pageresource.com/dhtml/cssprops.htm>`_ также представлен хороший список свойств с описанием что делает каждое из них. Просмотрите Раздел :ref:`css-course-reading-label`, который содержит более подробный список ссылок.

CSS работает следующим образом: *выбрать и применить шаблон* - для указанного элемента применяется набор стилизирующих свойств. Взгляните на следующий пример на Рисунке :num:`fig-css-render`, на котором показан некий HTML код, содержащий теги ``<h1>``. В примере CSS кода мы стилизуем все ``h1``. Мы вернемся к `селекторам <http://www.w3schools.com/cssref/css_selectors.asp>`_ в разделе :ref:`css-course-basic-selectors-label`. Пока Вы можете считать, что определенный в примере CSS стиль будет применяться к нашим тегам ``<h1>``. Стиль содержит четыре свойства:

- первое свойство (``font-size``) определяет размер шрифта равным 16pt;
- второе свойство (``font-style``) выделяет курсивов содержимое всех тегов ``<h1>`` внутри документа;
- третье свойство (``text-align``) выравнивает по центру текст тегов ``<h1>``; и
- последнее свойство (``color``) определяет красный цвет текста для тегов с помощью `шестнадцатеричного кода <http://html-color-codes.com/>`_ ``#FF0000``.

После применения всех этих свойств, получившаяся страница отобразится в браузере в виде, показанном на рисунке :num:`fig-css-render`.

.. _fig-css-render:

.. figure:: ../images/css-render.png
	:figclass: align-center

	Рисунок, показывающий как будет выглядеть в браузере HTML разметка и CSS стили из примера. Обратите особое внимание на пример CSS кода - в нем используется цветовая схема, чтобы показать синтаксис, применяемый для определения стилей и пар свойство/значение, связанных с ними.


.. note:: Из-за особенностей, характерных веб разработке, *то что Вы видите, не обязательно то, что получите*. Это связано с тем, что разные браузеры по-своему интерпретируют `веб стандарты <http://en.wikipedia.org/wiki/Web_standards>`_ и поэтому страницы могут отображаться по-разному. Это особенность, к сожалению, является довольно раздражающей.

Добавление стилей
-----------------
Добавление стилей на Ваши страницы достаточно простой процесс и включает в себя использование тега ``<link>`` внутри Вашего HTML тега ``<head>``. Просмотрите простейший пример HTML разметки, показанный ниже, где показаны атрибуты, которые должны находиться внутри тега ``<link>``.

.. code-block:: html
	
	<!DOCTYPE html>
	<html>
	    <head>
	        <link rel="stylesheet" type="text/css" href="URL/TO/stylesheet.css" />
	        <title>Sample Title</title>
	    </head>
	    
	    <body>
	        <h1>Hello world!</h1>
	    </body>
	</html>

Как показано выше, существует минимум три атрибута, которые должны быть внутри тега ``<link>``:

- ``rel``, позволяющий Вам указать связь между HTML документ и ресурсом, на который Вы ссылаетесь (т. е., файл стилей - stylesheet).
- ``type``, в котором Вы должны указать `тип MiME <http://en.wikipedia.org/wiki/Internet_media_type>`_ для CSS; и
- ``href``, атрибут, где Вы должны указать URL файла стилей, который хотите добавить.

После добавления этого тега, Ваш файл стилей должен добавиться на Вашу HTML страницу и должны примениться стили находящиеся внутри файла. Следует отметить, что CSS файлы стилей считаются Django статическими медиа файлами - это означает, что Вы должны размещать их внутри каталога ``static`` Вашего проекта.

.. note:: Вы также можете добавлять CSS правила просто *внутри* HTML документа, то есть CSS будет частью Вашей HTML страницы. Однако, в общем случае не рекомендуется так делать, поскольку это сводит на нет хорошее разделение между внешним видом страницы (CSS) и её содержимым (HTML).

.. _css-course-basic-selectors-label:

Основные CSS селекторы
----------------------
CSS селекторы используются для связи определенных стилей с конкретными HTML элементами. По существу CSS селектор - это *шаблон*. Здесь мы рассмотрим три вида CSS селекторов: *селекторы элементов*, *селекторы идентификаторов* и *селекторы классов*. В Разделе :ref:`css-course-links-label` мы также коснемся того, что называется *псевдо-селекторами*.

Селекторы элементов
-------------------
Используя CSS пример из Рисунка :num:`fig-css-render`, мы видим, что селектор ``h1`` соответствует любому тегу ``<h1>``. Любой селектор ссылающийся на такой тег можно назвать *селектором элементов*. Мы можем применить селекторы элементов к любому HTML элементу, такому как ``<body>``, ``<h1>``, ``<h2>``, ``<h3>``, ``<p>`` и ``<div>``. Все они могут быть стилизованы подобным образом. Тем не менее использовать селекторы элементов довольно неудобно - стили применяются ко *всем* экземплярам конкретного тега. Мы обычно хотим выбрать один или небольшое число элементов, которые нужно стилизовать, и для этого используются *селекторы идентификаторов* и *селекторы классов*.

Селекторы идентификаторов
.........................
*Селектор по идентификатору* используется для связи с единственным элементом на Вашей странице. Каждому элементу на Вашей странице может быть присвоен уникальный идентификатор с помощью атрибута ``id`` и именно этот идентификатор используется CSS для присвоения стилей Вашему элементу. Этот тип селекторов начинается с символа решетки (``#``), после которого идет непосредственно идентификатор элемента, которому необходимо присвоить стили. Посмотрите на Рисунок :num:`fig-css-id`, где показан пример.

.. _fig-css-id:

.. figure:: ../images/css-id.png
	:figclass: align-center

	Пример использования *селектора по идентификатору* в CSS. ОБратите внимание, что синий заголовок имеет идентификатор, соответствующий CSS атрибуту ``#blue_header``.

Селекторы классов
.................
Альтернативной возможностью является использование *селекторов классов*. Этот подход аналогичен *селекторам идентификаторов*, но разница заключается в том, что Вы можете присвоить нескольким элементам один и тот же класс. Если существует группа HTML элементов, к которым Вы хотите применить одинаковый стиль, используйте классы. Селектор при использовании этого метода начинается с точки (``.``), за которой следует название Вашего класса перед открытием стиля в фигурных скобках (``{ }``). Посмотрите на Рисунок :num:`fig-css-class`, где показан пример.

.. _fig-css-class:

.. figure:: ../images/css-class.png
	:figclass: align-center

	Пример использования *селектора классов* в CSS. К синим заголовкам применяется CSS стиль ``.blue``, переопределяющий красный текст стиля ``h1``.

.. warning:: Не используйте часто селекторы идентификаторов. `Задайте себе вопрос: <http://net.tutsplus.com/tutorials/html-css-techniques/the-30-css-selectors-you-must-memorize/>`_ *можно ли по-другому выбрать элемент, не присваивая ему идентификатор?* Если стиль нужно применить к нескольким элементам, то ответ на вопрос всегда будет: *да, можно*. В таких случаях, Вы должны использовать селекторы классов или элементов.

Шрифты
------
В связи с огромным количеством доступных, использование шрифтов всегда связано определенными сложностями, когда дело касается веб разработки. Представьте, что веб разработчик установил и использует определенный шрифт на своем веб странице. Шрифт довольно специфичный - поэтому вероятность его наличия на других компьютерах относительно невелика. Пользователь, который посещает веб страницу разработчика следовательно видит страницу неправильно, поскольку этого шрифта нет в его системе. CSS решает эту конкретную проблему с помощью свойства ``font-family``.

Значение, которое Вы определяете для ``font-family`` может быть *списком* возможных шрифтов - первый шрифт из списка, который установлен на Вашем компьютере или другом устройстве будет использоваться при визуализации веб страницы. В последствии к тексту внутри указанного HTML элемента будет применяться выбранный шрифт. Пример CSS кода, показанного ниже, использует шрифт *Arial*, если он существует в системе. Если нет, то производится поиск шрифта *Helvetica*. Если и его не существует, то применяется любой `шрифт без засечек <http://en.wikipedia.org/wiki/Sans-serif>`_.

.. code-block:: css
	
	h1 {
	    font-family: 'Arial', 'Helvetica', sans-serif;
	}

В 1996 году Microsoft начала компанию по созданию `основных шрифтов для Веб <http://en.wikipedia.org/wiki/Core_fonts_for_the_Web>`_, которая гарантировала бы наличие определенного набора шрифтов на всех компьютерах. В настоящее время ВЫ можете использовать практически любой шрифт, который Вам нравится - просмотрите `Google шрифты <http://www.google.com/fonts>`_, в качестве примера наборов шрифтов, которые Вы можете использовать и `эту статью с веб сайта Депо Для Веб Дизайнеров <http://www.webdesignerdepot.com/2013/01/how-to-use-any-font-you-like-with-css3/>`_ о том, как использовать такие шрифты.

Цвета и задние фоны
-------------------
Цвета важны при определении внешнего вида Вашего веб сайта. Вы можете изменить цвет любого элемента на Вашей веб странице, начиная от цвета заднего фона до цвета границ элементов и текста. В этой книге, мы будем использовать слова и *шестнадцатеричные цветовые коды* для выбора цветов, которые мы хотим использовать. Как можно увидеть из списка базовых цветов на Рисунке :num:`fig-css-colours`, Вы можете использовать или *шестнадцатеричное* или *RGB (красное-зеленое-синие)* значение для цвета, который хотите использовать. Вы можете также `указывать слова для описания Ваших цветов <http://www.w3schools.com/cssref/css_colornames.asp>`_, например, ``green``, ``yellow`` or ``blue``.

.. warning:: Вы должны с большой осторожностью выбирать цвета для Ваших веб страниц. Не выбирайте цвета, которые плохо контрастируют друг с другом - люди просто не смогут их прочитать! Существует много веб сайтов, которые помогут Вам выбрать хорошую цветовую схему - попробуйте `colorcombos.com <http://www.colorcombos.com/>`_ для новичков.

Применение цветов к Вашим элементам простой процесс. Используемое свойство зависит от особенностей элемента, который Вы хотите изменить! В следующих подразделах поясняются соответствующие свойства и как их использовать.

.. _fig-css-colours:

.. figure:: ../images/css-colours.svg
	:figclass: align-center
	
	Пример некоторых базовых цветов с соответствующим им шестнадцатеричными и RGB значениями. Изображение взято с сайта `W3Schools <http://www.w3schools.com/cssref/css_colors.asp>`_.

Существует множество различных веб сайтов, которые Вы можете использовать, чтобы выбрать правильные шестнадцатеричные коды для Ваших стилей. Вы не ограничены девятью приведенными выше примерами! Попробуйте воспользоваться `html-color-codes.com <http://html-color-codes.com/>`_, где дается простая сетка цветов и связанный с ними шестнадцатеричных код их шести символов. Вы также можете использовать сайты, такие как `color-hex.com <http://www.color-hex.com/color-wheel/>`_, где Вы можете точнее выбрать цвет с помощью цветового круга.

.. note:: Чтобы узнать больше о том как цвета кодируются с помощью шестнадцатеричного кода, просмотрите `этот подробное руководство <http://www.quackit.com/css/css_color_codes.cfm>`_.

.. warning:: Как Вы возможно заменили, CSS использует американский/международную английский для написания слов. Таким образом, несколько слов пишутся немного по-другому по сравнению с их британскими аналогами, например, ``color`` и ``center``. Если Вы выросли в Великобритании, дважды проверьте правильность написания и будьте готовы писать их *не так как Вы привыкли!* Ха!

.. _css-course-colours-text-label:

Цвета текста
............
Чтобы изменить цвет текста внутри элемента, Вы должны использовать свойство ``color`` для элемента, содержащего текст, цвет которого Вы хотите изменить.
Следующий CSS код например изменяет весь текст внутри элемента, используя класс ``red`` на... красный!

.. code-block:: css
	
	.red {
	    color: #FF0000;
	}

Вы можете изменить внешний вид небольшой части текста внутри страницы, обернув его тегами ``<span>``. Назначьте класс или уникальный идентификатор элементу и затем Вы можете просто обратиться к тегу ``<span>`` из таблицы стилей, применив к нему свойство ``color``.

Цвет границ
...........
Вы также можете изменить цвет *границ* элемента. Мы обсудим границы в Разделе :ref:`css-course-box-model-label` - но сейчас покажем как назначить им цвета, чтобы они выглядели красиво.
Цвета границ могут быть определены с помощью свойства ``border-color``. Вы можете назначить один цвет всем четырем сторонам Вашей границы или определить разные цвета для каждой стороны. Для этого Вам необходимо указать различные цвета через пробел.

.. code-block:: css
	
	.some-element {
	    border-color: #000000 #FF0000 #00FF00
	}

В приведенном выше примере, мы использовали разные цвета для трех сторон. Начиная с верхней, цвета границ задаются по часовой стрелке. Таким образом, порядок цветов для каждой стороны следующий: ``верхняя правая нижняя левая``.

В нашем примере у любого элемента с классом ``some-element`` будет черная верхняя граница, красная правая граница и зеленая нижняя граница. Для левой границы значение не указано, это означает, что левая граница остается прозрачной. Для определения цвета только для одной границы элемента, лучше использовать соответствующие свойства ``border-top-color``, ``border-right-color``, ``border-bottom-color`` и ``border-left-color``.

Цвет задних фонов
..................
Вы можете также изменить цвет заднего фона элемента, используя свойство CSS ``background-color``. Подобно свойству ``color`` описанному Выше, свойство ``background-color`` можно указывать в виде шестнадцатеричного значения. Просмотрите пример, показанный ниже, в котором задается ярко зеленый фон для всей страницы. Какая гадость! Не используйте его.

.. code-block:: css
	
	body {
	    background-color: #00FF00;
	}

Изображения для заднего фона
............................
Конечно, цвет это не единственный способ изменить задний фон. Вы также можете назначить фоновые изображения Вашим элементам. Этого можно добиться, используя свойство ``background-image``.

.. code-block:: css
	
	#some-unique-element {
	    background-image: url('../images/filename.png');
	    background-color: #000000;
	}

В приведенном выше примере используется файл ``filename.png`` в качестве заднего фона для элемента с идентификатором ``some-unique-element``. Путь к Вашему изображению определяется *относительно пути к Вашему СSS файлу стилей*. В нашем примере используются `две точки для определения относительного пути <http://programmers.stackexchange.com/a/186719>`_ к изображению. *Не задавайте в этом поле абсолютный путь; он не будет работать так как Вы ожидаете!*. Мы также используем черный цвет заднего фона, чтобы заполнить промежутки между нашим фоновым изображением - поскольку оно может не полностью заполнить элемент.

.. note:: По умолчанию фоновые изображения расположены в верхнем левом углу соответствующего элемента и повторяются по горизонтали и вертикали. Вы можете настроить это свойство, изменив то `как повторяется изображение <http://www.w3schools.com/cssref/pr_background-repeat.asp>`_ с помощью свойства ``background-image``. Вы можете также указать `где должно располагаться изображение <http://www.w3schools.com/cssref/pr_background-position.asp>`_  по умолчанию с помощью свойства ``background-position``.

.. _css-course-positioning:

Контейнеры, блочные и строчные элементы
---------------------------------------
До этого по ходу ускоренного курса, мы использовали элемент ``<span>``, но ничего не рассказали о нем. Вам станет понятно для чего он нужен, когда мы объясним, что такое *строчные* и *блочные* элементы.

``<span>`` считается так называемым *элементом-контейнером*. Наряду с тегом ``<div>`` эти элементы сами по себе не используются и служат только для логического *размещения* и *разделения* содержимого Вашей страницы. Например, Вы можете использовать тег ``<div>`` поместив в него разметку, связанную с навигационной панелью, другой ``<div>`` может содержать разметку, связанную с футером Вашей страницы. Поскольку сами по себе контейнеры не используются, стили обычно применяются к ним для изменения внешнего вида Вашей страницы.

Контейнеры бывают двух видов: *блочные элементы* и *строчные элементы*. Посмотрите на Рисунок :num:`fig-css-nesting-blocks`, где показано отличие между двумя видами и прочтите краткое описание к каждому.

.. _fig-css-nesting-blocks:

.. figure:: ../images/css-nesting-blocks.svg
	:figclass: align-center
	
	Рисунок, на котором показано как отображаются на экране блочные элементы и строчные элементы, по умолчанию. Обратите внимание на разрыв строки разделяющий каждый блочный элемент, залитый зеленым цветом. Наоборот строчные элементы могут находиться на одной строке рядом друг с другом. Вы можете также вкладывать блочные и строчные элементы друг в друга, но блочные элементы не могут быть вложены внутрь строчного элемента.

	
Блочные элементы
................
Проще говоря, *блочный элемент* по умолчанию имеет прямоугольную форму и занимает всю ширину элемента контейнера. Блочные элементы таким образом по умолчанию располагаются друг под другом. Прямоугольная структура каждого блочного элемента часто называется *блочной моделью*, которую мы рассмотрим в разделе :ref:`css-course-box-model-label`. Часто используемым блочным элементом, который Вы будете применять, является тег ``<div>`` - сокращение от слова *division.* (*деление на части* - прим. переводчика).

Блочные элементы могут быть вложены в другие блочные элементы, создавая иерархию элементов. Вы также можете размещать *строчные элементы* внутри блочных, но не наоборот! Ниже объясняется почему.

Строчные элементы
.................
Предназначение *строчного элемента* понятно из его названия. Эти элементы *встроены* в блочные элементы на Вашей странице и часто в них оборачивается текст. Вы увидите, что для этого часто используется тег ``<span>``.

Использование этих элементов для обертки текста пояснялось в Разделе :ref:`css-course-colours-text-label`, где часть текста была расположена в тегах ``<span>`` для изменения его цвета. Соответствующая HTML разметка будет выглядеть подобно той, которая показана в приведенном ниже примере.

.. code-block:: html
	
	<div>
	    Этот текст заключен внутри блочного элемента. <span class="red">А этот текст находится внутри строчного элемента!</span> А этот нет.
	</div>

Опять взгянуте на Рисунок :num:`fig-css-nesting-blocks`, чтобы вспомнить, какие элементы могут находится внутри строчных, а какие нет, перед тем как продолжить.

Основы позиционирования элементов
---------------------------------
Важным понятием, которое мы до сих пор не рассматривали в этом ускоренном CSS курсе, является позиционирование элементов на Вашей странице. Большую часть времени Вас будет устраивать то, что строчные элементы располагаются рядом друг с другом, а блочные - друг под другом. О таких элементах говорят, что они *позиционируются статически*.

Однако, бывают ситуации, когда Вам нужно изменить порядок расположения элементов. В этом разделе, мы кратко рассмотрим три основных метода позиционирования элементов на Вашей странице: свойство *float*, *относительное позиционирование* и *абсолютное позиционирование*.

Свойство Float
..............
CSS свойство *float* один из самых простых методов позиционирования элементов внутри Вашей страницы. Использование этого свойства позволяет Вам расположить элементы слева или справа относительно определенного контейнера - или страницы.

Давайте изучим его на примере. Рассмотрим следующую HTML разметку и CSS код.

.. code-block:: html
	
	<div class="container">
	    <span class="yellow">Span 1</span>
	    <span class="blue">Span 2</span>
	</div>

.. code-block:: css
	
	.container {
	    border: 1px solid black;
	}
	
	.yellow {
	    background-color: yellow;
	    border: 1px solid black;
	}
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	}

Это приведет к следующему результату на экране.

.. raw:: html
	
	<style type="text/css">
		.css-float-ex1-container {
		    border: 1px solid black;
			padding: 10px;
		}
	
		.css-float-ex1-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}
	
		.css-float-ex1-blue {
		    background-color: blue;
		    border: 1px solid black;
		}
	</style>
	
	<div class="css-float-ex1-container">
	    <span class="css-float-ex1-yellow">Span 1</span>
	    <span class="css-float-ex1-blue">Span 2</span>
	</div>

Мы видим, что каждый элемент располагается естественным образом: элемент контейнер с классом ``container`` занимает всю ширину его родительского контейнера, тогда как каждый из ``<span>`` элементов находятся на одной строке внутри родительского. Теперь предположим, что мы хотим переместить синий элемент с текстом ``Span 2` в правую часть его контейнера. Этого можно достичь, изменив наш CSS класс ``.blue`` так, чтобы он выглядел как показано в следующем примере.

.. code-block:: css
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	    float: right;
	}

Используя пару свойство и значение - ``float: right;``, мы должны увидеть на экране нечто похожее на то, что показано ниже в примере.

.. raw:: html
	
	<style type="text/css">
		.css-float-ex2-container {
		    border: 1px solid black;
			padding: 10px;
		}

		.css-float-ex2-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}

		.css-float-ex2-blue {
		    background-color: blue;
		    border: 1px solid black;
		    float: right;
		}
	</style>

	<div class="css-float-ex2-container">
	    <span class="css-float-ex2-yellow">Span 1</span>
	    <span class="css-float-ex2-blue">Span 2</span>
	</div>

Обратите внимание как теперь элемент с классом ``.blue`` выравнивается по правому краю относительно его родительского контейнера - ``.container``. Мы фактически нарушаем естественное расположение элементов на нашей странице, искусственно перемещая элемент! Подумайте, что произойдет, если мы также применим свойство ``float: left`` к тегу ``<span>`` с классом ``.yellow``?

.. raw:: html
	
	<style type="text/css">
		.css-float-ex3-container {
		    border: 1px solid black;
			padding: 10px;
			margin-bottom: 20px;
		}

		.css-float-ex3-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		    float: left;
		}

		.css-float-ex3-blue {
		    background-color: blue;
		    border: 1px solid black;
		    float: right;
		}
	</style>

	<div class="css-float-ex3-container">
	    <span class="css-float-ex3-yellow">Span 1</span>
	    <span class="css-float-ex3-blue">Span 2</span>
	</div>

Оно выровняет элемент ``.yellow``, удалив его из естественного порядка расположения элементов на странице. Теперь он не располагается в верхней части контейнера ``.container``. Из-за этого родительский контейнер теперь не заполняется элементами ``<span>`` как этого можно было бы ожидать. Вы можете использовать свойство ``overflow: hidden;`` для родительского элемента как показано ниже, чтобы решить эту проблему. Чтобы узнать больше о том как это работает, взгляните на `эту онлайн статью QuirksMode.org <http://www.quirksmode.org/css/clearing.html>`_.

.. code-block:: css
	
	.container {
	    border: 1px solid black;
	    overflow: hidden;
	}

.. raw:: html

	<style type="text/css">
		.css-float-ex4-container {
		    border: 1px solid black;
		    overflow: hidden;
			padding: 10px;
		}

		.css-float-ex4-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		    float: left;
		}

		.css-float-ex4-blue {
		    background-color: blue;
		    border: 1px solid black;
		    float: right;
		}
	</style>

	<div class="css-float-ex4-container">
	    <span class="css-float-ex4-yellow">Span 1</span>
	    <span class="css-float-ex4-blue">Span 2</span>
	</div>

Использование свойства ``overflow: hidden`` гарантирует, что высота нашего ``.container`` изменится на соответствующую величину.

Относительное позиционирование
..............................
*Относительное позиционирование* может использоваться, если Вам необходим ещё больше контролировать порядок расположения элементов на Вашей странице. Как следует из названия, относительное позиционирование позволяет Вам расположить элемент *относительно того места, где бы он располагался в противном случае*. Чтобы использовать относительное позиционирование назначьте пару свойство/значение ``position: relative;`` элементу. Но это ещё не всё.

Давайте покажем, как оно работает на примере. Рассмотрим наш предыдущий пример, где два ``<span>`` элемента расположены внутри своих контейнеров.

.. code-block:: html
	
	<div class="container">
	    <span class="yellow">Span 1</span>
	    <span class="blue">Span 2</span>
	</div>

.. code-block:: css
	
	.container {
	    border: 1px solid black;
	    height: 200px;
	}
	
	.yellow {
	    background-color: yellow;
	    border: 1px solid black;
	}
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	}

Он дает ожидаемый результат. Обратите внимание, что мы искусственным образом увеличили ``height`` (``высоту`` - прим. переводчика) нашего элемента ``контейнера`` до 150 пикселей. Это расширяет наши возможности.

.. raw:: html

	<style type="text/css">
		.css-rel-ex1-container {
		    border: 1px solid black;
			padding: 10px;
			height: 150px;
		}

		.css-rel-ex1-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}

		.css-rel-ex1-blue {
		    background-color: blue;
		    border: 1px solid black;
		}
	</style>

	<div class="css-rel-ex1-container">
	    <span class="css-rel-ex1-yellow">Span 1</span>
	    <span class="css-rel-ex1-blue">Span 2</span>
	</div>

Теперь давайте попытаемся расположить наш элемент ``.blue`` ``<span>`` относительно. Сначала мы назначим пару свойство/значение ``position: relative;`` нашему классу ``.blue`` следующим образом.

.. code-block:: css
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	    position: relative;
	}

Оно никак не влияет на позиционирование нашего элемента ``.blue``. Единственное что оно делает - это изменяет позиционирование элемента с классом ``.blue`` со ``static`` на ``relative``. Это позволяет нам указать где - относительно первоначальной позиции - мы хотим чтобы элемент располагался сейчас.

.. code-block:: css
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	    position: relative;
	    left: 150px;
	    top: 80px;
	}

Используя свойства ``left`` и ``top`` как показано в вышеприведенном примере, мы хотим *сдвинуть* элемент ``.blue`` на 150 пикселей *относительно левого края*. Другими словами, мы перемещаем элемент на 150 пикселей вправо. Всегда помните об этом! Свойство ``top`` означает, что элемент должен быть *сдвинут* на 80 пикселей относительно *верхнего* края элемента. Результат наших действий можно увидеть ниже.

.. raw:: html

	<style type="text/css">
		.css-rel-ex2-container {
		    border: 1px solid black;
			padding: 10px;
			height: 150px;
		}

		.css-rel-ex2-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}

		.css-rel-ex2-blue {
		    background-color: blue;
		    border: 1px solid black;
			position: relative;
		    left: 150px;
		    top: 80px;
		}
	</style>

	<div class="css-rel-ex2-container">
	    <span class="css-rel-ex2-yellow">Span 1</span>
	    <span class="css-rel-ex2-blue">Span 2</span>
	</div>

Таким образом, можно сделать вывод, что свойства ``right`` и ``bottom`` *сдвигают* элементы относительно правого и нижнего края соответственно. Мы можем проверить это, применив свойства к нашему классу ``.yellow``, как показано ниже.

.. code-block:: css
	
	.yellow {
	    background-color: blue;
	    border: 1px solid black;
	    float: right;
	    position: relative;
	    right: 10px;
	    bottom: 10px;
	}

Это приводит к следующему отображению элемента на экране: контейнер ``.yellow`` сдвигается в верхний левый угол нашего контейнера, перемещаясь вверх и влево.

.. raw:: html

	<style type="text/css">
		.css-rel-ex3-container {
		    border: 1px solid black;
			padding: 10px;
			height: 150px;
		}

		.css-rel-ex3-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		    position: relative;
		    right: 10px;
		    bottom: 10px;
		}

		.css-rel-ex3-blue {
		    background-color: blue;
		    border: 1px solid black;
			position: relative;
		    left: 150px;
		    top: 80px;
		}
	</style>

	<div class="css-rel-ex3-container">
	    <span class="css-rel-ex3-yellow">Span 1</span>
	    <span class="css-rel-ex3-blue">Span 2</span>
	</div>

.. note:: Что произойдет, если Вы примените свойства ``top`` и ``bottom`` или ``left`` и ``right`` одновременно? В этом случае применяется *первое* встречаемое свойство для соответствующей оси. Например, если свойство ``bottom`` указано перед ``top``, то используется свойство ``bottom``.

Мы можем даже использовать относительно позиционирование к элементам, которые имеют свойство ``float``. Рассмотрим наш предыдущий пример, где два элемента ``<span>`` были расположены по обе стороны контейнера, задав для класса ``.blue`` свойство ``float`` со значением ``right``

.. raw:: html

	<style type="text/css">
		.css-rel-ex4-container {
		    border: 1px solid black;
			padding: 10px;
		}

		.css-rel-ex4-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}

		.css-rel-ex4-blue {
		    background-color: blue;
		    border: 1px solid black;
			float: right;
		}
	</style>

	<div class="css-rel-ex4-container">
	    <span class="css-rel-ex4-yellow">Span 1</span>
	    <span class="css-rel-ex4-blue">Span 2</span>
	</div>

Затем мы можем изменить класс ``.blue`` следующим образом.

.. code-block:: css
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	    float: right;
	    position: relative;
	    right: 100px;
	}

.. raw:: html

	<style type="text/css">
		.css-rel-ex5-container {
		    border: 1px solid black;
			padding: 10px;
		}

		.css-rel-ex5-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}

		.css-rel-ex5-blue {
		    background-color: blue;
		    border: 1px solid black;
			float: right;
			position: relative;
			right: 150px;
		}
	</style>

	<div class="css-rel-ex5-container">
	    <span class="css-rel-ex5-yellow">Span 1</span>
	    <span class="css-rel-ex5-blue">Span 2</span>
	</div>

Таким образом, это означает, что относительное позиционирование работает относительно положения, в котором элемент находился бы, если бы не использовалось свойство ``position: relative;`` - независимо от любых других свойств изменяющих его положение. Здорово!

Абсолютное позиционирование
...........................
Последний рассматриваемый нами метод - это *абсолютное позиционирование*. Мы опять изменяем параметр ``position`` стиля, но используем значение ``absolute`` вместо ``relative``. В отличие от относительного позиционирования, абсолютное позиционирование размещает элемент *относительно его первого родительского элемента, который имеет значение ``position`` отличающееся от ``static``*. Это может быть сложно понять, поэтому давайте разберем шаг за шагом, что происходит на самом деле.

Сначала мы опять будем использовать наш предыдущий пример с двумя цветными элементами ``<span>`` внутри контейнера ``<div>``. Два элемента ``<span>`` размещаются рядом друг с другом по умолчанию.

.. code-block:: html
	
	<div class="container">
	    <span class="yellow">Span 1</span>
	    <span class="blue">Span 2</span>
	</div>

.. code-block:: css
	
	.container {
	    border: 1px solid black;
	    height: 70px;
	}
	
	.yellow {
	    background-color: yellow;
	    border: 1px solid black;
	}
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	}

Это приведет к отображению на экране показанному ниже. Обратите внимание, что мы опять искусственным образом задали высоту нашего элемента с классом ``.container`` в 70 пикселей, чтобы увеличить размер контейнера.

.. raw:: html
	
	<style type="text/css">
		.css-abs-ex1-hidden-container {
			position: relative;
		}
		
		.css-abs-ex1-container {
		    border: 1px solid black;
			padding: 10px;
			height: 70px;
		}
	
		.css-abs-ex1-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}
	
		.css-abs-ex1-blue {
		    background-color: blue;
		    border: 1px solid black;
		}
	</style>
	
	<div class="css-abs-ex1-hidden-container">
		<div class="css-abs-ex1-container">
		    <span class="css-abs-ex1-yellow">Span 1</span>
		    <span class="css-abs-ex1-blue">Span 2</span>
		</div>
	</div>

Теперь применим абсолютное позиционирование к нашему элементу ``.blue``.

.. code-block:: css
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	    position: absolute;
	}

Как и в случае относительного позиционирования, это никак не влияет на позиционирование нашего синего элемента на странице. Мы должно использовать одно или несколько свойств ``top``, ``bottom``, ``left`` или ``right``, чтобы положение элемента изменилось. В качестве примера, мы можем применить к нашему синему элементу свойства ``top`` и ``left`` как показано ниже в примере.

.. code-block:: css
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	    position: absolute;
	    top: 0;
	    left: 0;
	}


.. raw:: html

	<style type="text/css">
		.css-abs-ex2-hidden-container {
			position: relative;
			padding-top: 30px;
		}

		.css-abs-ex2-container {
		    border: 1px solid black;
			padding: 10px;
			height: 70px;
		}

		.css-abs-ex2-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		}

		.css-abs-ex2-blue {
		    background-color: blue;
		    border: 1px solid black;
		    position: absolute;
		    top: 0;
		    left: 0;
		}
	</style>

	<div class="css-abs-ex2-hidden-container">
		<div class="css-abs-ex2-container">
		    <span class="css-abs-ex2-yellow">Span 1</span>
		    <span class="css-abs-ex2-blue">Span 2</span>
		</div>
	</div>

Ничего себе! Наш синий элемент теперь находится за пределами нашего контейнера! Обратите внимание, что если Вы запустите этот код в окне Вашего браузера, то синий элемент появится в верхнем левом углу окна. Таким образом, это означает, что наши свойства top``, ``bottom``, ``left`` и ``right`` имеют несколько другое значение, когда применяется абсолютное позиционирование.

Поскольку свойство ``position`` нашего элемента контейнера по умолчанию равно ``static``, синий и желтый (после добавления свойств ``bottom`` и ``right`` - прим. переводчика) элементы перемещаются в верхний левый и правый нижний угол нашего экрана соответственно. Давайте теперь изменим наш класс ``.yellow`` и сдвинем желтый ``<span>`` на 5 пикселей от нижнего правого края нашей страницы. Класс ``.yellow`` теперь будет выглядеть как показано ниже в примере.

.. code-block:: css
	
	.yellow {
	    background-color: yellow;
	    border: 1px solid black;
	    position: absolute;
	    bottom: 5px;
	    right: 5px;
	}

Это приводит к следующему результату.

.. raw:: html

	<style type="text/css">
		.css-abs-ex3-hidden-container {
			position: relative;
			padding: 30px 0 35px;
		}

		.css-abs-ex3-container {
		    border: 1px solid black;
			padding: 10px;
			height: 70px;
		}

		.css-abs-ex3-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		    position: absolute;
		    bottom: 5px;
		    right: 5px;
		}

		.css-abs-ex3-blue {
		    background-color: blue;
		    border: 1px solid black;
		    position: absolute;
		    top: 0;
		    left: 0;
		}
	</style>

	<div class="css-abs-ex3-hidden-container">
		<div class="css-abs-ex3-container">
		    <span class="css-abs-ex3-yellow">Span 1</span>
		    <span class="css-abs-ex3-blue">Span 2</span>
		</div>
	</div>

Но что если мы не хотим, чтобы наши элементы абсолютно позиционировались относительно всей страницы? Чаще всего, мы хотим изменить положение наших элементов относительно контейнера. Если мы вспомним наше определение для абсолютного позиционирования, то заметим, что абсолютные местоположения вычисляются *относительно первого родительского элемента, который имеет значение `position` отличающееся от ``static``*. Поскольку наш контейнер является единственным родителем для двух наших элементов ``<span>``, контейнер относительно которого абсолютно позиционируются элементы, таким образом, является ``<body>`` нашей HTML страницы. Мы можем изменить это, добавив ``position: relative;`` к нашему классу ``.container``, как показано в приведенном ниже примере.

.. code-block:: css
	
	.container {
	    border: 1px solid black;
	    height: 70px;
	    position: relative;
	}

Это приводит к следующему результату: ``.container`` становится первым родительским элементом, значение свойство ``position`` которого отличается от ``static``, поэтому позиционирование наших элементов ``<span>`` связано с ним!

.. raw:: html

	<style type="text/css">
		.css-abs-ex4-hidden-container {
			position: relative;
		}

		.css-abs-ex4-container {
		    border: 1px solid black;
			padding: 10px;
			height: 70px;
			position: relative;
		}

		.css-abs-ex4-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		    position: absolute;
		    bottom: 5px;
		    right: 5px;
		}

		.css-abs-ex4-blue {
		    background-color: blue;
		    border: 1px solid black;
		    position: absolute;
		    top: 0;
		    left: 0;
		}
	</style>

	<div class="css-abs-ex4-hidden-container">
		<div class="css-abs-ex4-container">
		    <span class="css-abs-ex4-yellow">Span 1</span>
		    <span class="css-abs-ex4-blue">Span 2</span>
		</div>
	</div>

Наши элементы теперь абсолютно позиционируются относительно ``.container``. Прекрасно! Давайте теперь назначим значения для положений наших двух элементов ``<span>``, чтобы переместить их.

.. code-block:: css
	
	.yellow {
	    background-color: yellow;
	    border: 1px solid black;
	    position: absolute;
	    top: 20px;
	    right: 100px;
	}
	
	.blue {
	    background-color: blue;
	    border: 1px solid black;
	    position: absolute;
	    float: right;
	    bottom: 50px;
	    left: 40px;
	}

.. raw:: html

	<style type="text/css">
		.css-abs-ex5-hidden-container {
			position: relative;
		}

		.css-abs-ex5-container {
		    border: 1px solid black;
			padding: 10px;
			height: 70px;
			position: relative;
		}

		.css-abs-ex5-yellow {
		    background-color: yellow;
		    border: 1px solid black;
		    position: absolute;
		    top: 20px;
		    right: 100px;
		}

		.css-abs-ex5-blue {
		    background-color: blue;
		    border: 1px solid black;
		    position: absolute;
		    float: right;
		    bottom: 50px;
		    left: 40px;
		}
	</style>

	<div class="css-abs-ex5-hidden-container">
		<div class="css-abs-ex5-container">
		    <span class="css-abs-ex5-yellow">Span 1</span>
		    <span class="css-abs-ex5-blue">Span 2</span>
		</div>
	</div>

Заметьте, что мы также применили свойство ``float: right;`` к нашему элементу с классом ``.blue``. Оно используется, чтобы показать, что в отличие от относительного позиционирования, абсолютное позиционирование *игнорирует любые другие свойства изменяющие положение элемента*. Например, пара ``top: 10px`` всегда гарантирует, что элемент опуститься на 10 пикселей вниз относительно его родителя (у которого установлено свойство ``position: relative;``), не зависимо от того имеет он свойство ``float`` или нет.

.. _css-course-box-model-label:

Блочная модель
--------------
При использовании CSS вы всегда будете использовать свойства *padding*, *border* и *margin*. Эти свойства являются одними из основных методов стилизации, которые Вы можете применить к элементам внутри Ваших страниц. Они невероятно важны и все связаны с тем, что мы называем *CSS блочной моделью*.

Каждый элемент, который Вы создаете на странице, можно рассматривать как блок. `CSS блочная модель <http://www.w3.org/TR/CSS2/box.html>`_ определяется `W3C <http://www.w3.org/>`_ как формальный инструмент описания элементов или блоков, которые Вы создаёте, и указывает как они отображаются на Вашей странице. Каждый элемент или блок состоит из *четырех отдельных областей*, каждая из которых показана на Рисунке :num:`fig-css-box-model`. Области - перечисляемые начиная с внутренней, заканчивая наружной - это *область с содержимым*, *область внутреннего отступа*, *область границ* и *область внешнего отступа*.

.. _fig-css-box-model:

.. figure:: ../images/css-box-model.svg
	:figclass: align-center
	
	Пример, показывающий CSS блочную модель, дополненная обозначениями, указывающими на четыре области модели.

Для каждого элемента на странице, Вы можете задать внешний и внутренний отступ или границу с помощью соответствующих свойств ``margin``, ``padding`` и ``border``. Внешние отступы создают прозрачную область вокруг границ Вашего элемента, поэтому они часто используются для создания зазоров между элементами. В отличие от них внутренние отступы создают зазоры между содержимым элемента и его границей. Таким образом, создаётся впечатление, что элемент стал шире. Если Вы указываете цвет фона для элемента, цвет фона распространяется и на внутренние отступы. Наконец, границы, как можно было бы ожидать - создают границу вокруг содержимого Вашего элемента и внутренних отступов.

Чтобы узнать больше о CSS блочной модели, просмотрите `превосходное объяснение модели на сайте addedbytes <http://www.addedbytes.com/articles/for-beginners/the-box-model-for-beginners/>`_. `Почему бы даже не заказать футболку с блочной моделью <http://cssboxmodel.com/>`_?

.. warning:: Как можно понять из Рисунка :num:`fig-css-box-model`, ширина элемента определяется не значением, которое Вы ввели в свойство ``width`` элемента. Также всегда нужно учитывать ширину границы и внутренних отступов с обеих сторон Вашего элемента. Математически её можно представить как:

	``total_width = content_width + left padding + right padding + left border + left margin + right margin``

	Не забывайте об этом. Это позволит Вам избежать множества проблем.

Стилизация списков
------------------
Списки постоянно используются в повседневной жизни. Когда Вы читаете список оценок за курс или расписание времен прибытия/отбытия поездов Вы знаете как выглядит список и оцениваете его за простоту. Если у Вас есть список элементов на странице, почему бы не использовать HTML список? Использование списков на Ваших страницах - ` в соответствии со статьёй на сайте Brainstorm and Raves <http://brainstormsandraves.com/articles/semantics/structure/>`_ - приводит к хорошей структуре HTML документа, что позволяет текстовым браузерам, программам для чтения с экрана или другим браузерам, которые не поддерживают CSS, правильно отображать Вашу страницу.

Тем не менее списки не выглядят привлекательно для конечных пользователей. Рассмотрим следующий HTML список, который мы будем стилизовать, применяя к нему различные свойства.

.. code-block:: html
	
	<ul class="sample-list">
	    <li>Django</li>
	    <li>How to Tango with Django</li>
	    <li>Two Scoops of Django</li>
	</ul>

Без стилизации список выглядит довольно серо.

.. raw:: html
	
	<style type="text/css">
		.css-lists-border {
		    overflow: hidden;
		    border: 1px solid black;
		    padding: 10px 0 10px;
		    margin: 10px 0 10px;
		}
	</style>
	
	<div class="css-lists-border">
		<ul>
		    <li>Django</li>
		    <li>How to Tango with Django</li>
		    <li>Two Scoops of Django</li>
		</ul>
	</div>

Давайте сделаем некоторые изменения. Сначала давайте избавимся от некрасивых маркеров. Учитывая, что наш элемент ``<ul>`` (что удобно) имеет класс ``sample-list``, мы можем создать следующий стиль.

.. code-block:: css
	
	.sample-list {
	    list-style-type: none;
	}

Это приводит к следующему результату. Обратите внимание на отсутствие маркеров!

.. raw:: html
	
	<style type="text/css">
	    .css-lists-ex2 {
	        list-style-type: none;
	    }
	</style>
	
	<div class="css-lists-border">
		<ul class="css-lists-ex2">
		    <li>Django</li>
		    <li>How to Tango with Django</li>
		    <li>Two Scoops of Django</li>
		</ul>
	</div>

Теперь давайте изменим ориентацию нашего списка. Мы можем сделать это, изменив свойство ``display`` каждого элемента нашего списка (``<li>``). Это осуществляет следующий стиль.

.. code-block:: css
	
	.sample-list li {
	    display: inline;
	}

После это применения, элементы нашего списка теперь находятся на одной строке, как показано ниже в примере.

.. raw:: html
	
	<style type="text/css">
	    .css-lists-ex3 {
	        list-style-type: none;
	    }
		
		.css-lists-ex3 li {
		    display: inline;
		}
	</style>
	
	<div style="text-align: center;">
	<div class="css-lists-border">
		<ul class="css-lists-ex3">
		    <li>Django</li>
		    <li>How to Tango with Django</li>
		    <li>Two Scoops of Django</li>
		</ul>
	</div>
	</div>

Хотя мы задали ему правильную ориентацию, теперь наши список выглядит ужасно. Где начинается один элемент, а другой кончается? Полная неразбериха! Давайте изменим стиль элемента нашего списка и добавим цвета и внутренние отступы, чтобы они выглядели красивее.

.. code-block:: css
	
	.example-list li {
	    display: inline;
	    background-color: #333333;
	    color: #FFFFFF;
	    padding: 10px;
	}

После применения стиля, наш список выглядит намного лучше - а также сделанным профессионально!

.. raw:: html

	<style type="text/css">
	    .css-lists-ex4 {
	        list-style-type: none;
	    }

		.css-lists-ex4 li {
		    display: inline;
		    background-color: #333333;
		    color: #FFFFFF;
		    padding: 10px;
		}
	</style>
	
	<div style="text-align: center;">
	<div class="css-lists-border">
		<ul class="css-lists-ex4">
		    <li>Django</li>
		    <li>How to Tango with Django</li>
		    <li>Two Scoops of Django</li>
		</ul>
	</div>
	</div>

Из примера понятно, что списки можно легко стилизировать согласно требованиям для Ваших страниц. Чтобы узнать больше и вдохновиться тем, как можно стилизировать списки, Вы можете просмотреть некоторые из ссылок, приведенных ниже.

* Обратите внимание на это `прекрасное учебное пособие по стилизации списков на сайте A List Apart <http://alistapart.com/article/taminglists/>`_.
* Обратите внимание на `эту статью на сайте about.com, в которой показано как можно применить свои собственные маркеры для списка <http://webdesign.about.com/od/css/a/aa012907.htm>`_!
* Просмотрите `это продвинутое учебное пособие на сайте Web Designer Wall <http://webdesignerwall.com/tutorials/advanced-css-menu>`_, в котором используется графика, чтобы создать превосходно выглядящие списки. В этом пособии автор использует Photoshop - но Вы можете попытаться использовать более простой графический пакет, если плохо знаете Photoshop.
* `Эта прекрасная подборка сайтов от devsnippets.com <http://devsnippets.com/article/styling-your-lists.html>`_ вдохновит Вас и даст советы как Вы можете стилизовать списки.

Возможности стилизации списков бесконечны! Они представляют собой бесконечный список...

.. _css-course-links-label:

Стилизация ссылок
-----------------
CSS предоставляет Вам возможность легко стилизировать гиперссылки по Вашему желанию. Вы можете изменить их цвет, шрифт или любой другое свойство, которое захотите - Вы можете даже изменить их вид при наведении на них!

Гиперссылки представляются внутри HTML страницы с помощью тега ``<a>``, который является сокращением от *anchor*. Мы можем применить стилизацию ко всем гиперссылкам на Вашей странице, как показано в следующем примере.

.. code-block:: css
	
	a {
	    color: red;
	    text-decoration: none;
	}

Цвет текста каждой гиперссылки изменится на красный, а стандартное подчеркивание текста при наведении исчезнет. Если мы хотим изменить свойства ``color`` и ``text-decoration`` опять при наведении пользователем на ссылку, мы можем создать другой стиль, используя так называемый `псевдо-селектор <http://css-tricks.com/pseudo-class-selectors/>`_ ``:hover``. Наши два стиля теперь будут выглядеть, как показано ниже в примере.

.. code-block:: css
	
	a {
	    color: red;
	    text-decoration: none;
	}
	
	a:hover {
	    color: blue;
	    text-decoration: underline;
	}

Это приведет к ссылкам показанным ниже. Наведите указатель мыши на них, чтобы увидеть, как они изменятся!

.. raw:: html

	<style type="text/css">
	    .css-links-example {
		    padding: 10px 0 10px;
		    text-align: center;
		}
		.css-links-example a {
		    color: red;
		    text-decoration: none;
		}
		
		.css-links-example a:hover {
		    color: blue;
		    text-decoration: underline;
		}
	</style>
	
	<div class="css-links-example">
		<a href="http://www.django.com/">Django</a>&nbsp;&nbsp;
		<a href="http://www.tangowithdjango.com/">How to Tango with Django</a>&nbsp;&nbsp;
		<a href="http://2scoops.org/">Two Scoops of Django</a>
	</div>

Тем не менее, Вы можете не захотеть использовать один и тот же стиль ссылок для всей страницы. Например, Ваша навигационная панель может иметь темный фон, а остальная страница - светлый. Это потребует различных стилей ссылок для двух областей на Вашей странице. Пример, показанный ниже, демонстрирует как Вы можете назначить разные стили для ссылок, используя немного более сложный селектор для CSS стилей.

.. code-block:: css
	
	#dark {
	    background-color: black;
	}
	
	#dark a {
	    color: white;
	    text-decoration: underline;
	}
	
	#dark a:hover {
	    color: aqua;
	}
	
	.light {
	    background-color: white;
	}
	
	.light a {
	    color: black;
	    text-decoration: none;
	}
	
	.light a:hover {
	    color: olive;
	    text-decoration: underline;
	}

Затем мы создаем простую разметку, чтобы показать, как выглядят эти классы.

.. code-block:: html
	
	<div id="dark">
	    <a href="http://www.google.co.uk/">Google Search</a>
	</div>
	
	<div class="light">
	    <a href="http://www.bing.co.uk/">Bing Search</a>
	</div>

Полученный результат будет поход на пример, показанный ниже. Опять наведите курсор мыши на ссылки, чтобы увидеть, как они изменятся!

.. raw:: html

	<style type="text/css">
		#css-links-multiple-dark {
		    background-color: black;
			margin-bottom: 10px;
			padding: 5px;
			margin-top: 10px;
			width: 90%;
			margin-left: auto;
			margin-right: auto;
			border: 1px solid #000000;
		}
	
		#css-links-multiple-dark a {
		    color: white;
		    text-decoration: underline;
		}
	
		#css-links-multiple-dark a:hover {
		    color: aqua;
		}
	
		.css-links-multiple-light {
		    background-color: white;
			padding: 5px;
			margin-bottom: 10px;
			width: 90%;
			margin-left: auto;
			margin-right: auto;
			border: 1px solid #000000;
		}
	
		.css-links-multiple-light a {
		    color: black;
		    text-decoration: none;
		}
	
		.css-links-multiple-light a:hover {
		    color: olive;
		    text-decoration: underline;
		}
	</style>
	
	<div style="text-align: center;">
		<div id="css-links-multiple-dark">
		    <a href="http://www.google.co.uk/">Google Search</a>
		</div>
	
		<div class="css-links-multiple-light">
		    <a href="http://www.bing.co.uk/">Bing Search</a>
		</div>
	</div>

Используя небольшой фрагмент CSS кода, Вы можете сильно изменить внешний вид Вашей страницы и то как она будет отображаться конечным пользователям.

Каскадность
-----------
Стоит отметить, какую роль играет слово *Каскадные* в словосочетании *Каскадные таблицы стилей*. Вы должно быть заметили что в примере, снимок экрана которого показан на рисунке :num:`fig-css-render`, красный текст является **полужирным**, хотя такое свойство не определено в нашем стиле ``h1``. Это прекрасный пример того, что имеется ввиду под *каскадными стилями*. Большинство HTML элементов имеют связанный с ними *стиль по умолчанию*, который используются веб-браузеры. Для элементов ``<h1>`` `применяется стандартный стиль, который предоставляет веб-сайт W3C <http://www.w3.org/TR/html-markup/h1.html#h1-display>`_. Если Вы просмотрите стандартный стиль, то заметите, что они содержит пару свойство/значение ``font-weight: bold;``, поясняющее откуда взялся **полужирный** текст. После того как мы определили дополнительные стиль для элементов ``<h1>``, стандартные пары свойство/значение *каскадно* подставляются в наш стиль. Если мы определили новое значение для существующей пары (например, как мы сделали для ``font-size``), то мы *перезаписываем* существующее значение. Этот процесс может быть повторен многократно - все пары свойство/значение в конце процесса применяются к соответствующему элементу. На Рисунке :num:`fig-css-cascading` показано графическое представление процесса каскадирования.

.. _fig-css-cascading:

.. figure:: ../images/css-cascading.png
	:figclass: align-center

	Пример *каскадности* в *Каскадных таблицах стилей*. Примите к сведению, что свойство ``font-size`` в нашем стиле ``h1`` - перезаписывает значение по умолчанию. Каскадные стили приводят к окончательному стилю, который показан в правой части рисунка.

.. _css-course-reading-label:

Дополнительная литература
-------------------------
То, что мы рассмотрели в этом разделе нельзя считать полным руководством по CSS. Существуют 300 страничные книги <http://www.amazon.co.uk/Professional-CSS-Cascading-Sheets-Design/dp/047017708X>`_ посвященные только CSS! Здесь представлено только очень краткое введение, показывающее базовые основы CSS и как их можно использовать.

При разработке веб-приложений, Вы несомненно столкнетесь с проблемами, связанными со стилизацией веб-содержимого. Материал представленный здесь является частью процесса обучения и Вам всё ещё есть чему учиться. Мы настоятельно рекомендуем Вам потратить некоторое время на изучение нескольких онлайн пособий по CSS - на самом деле не обязательно покупать книгу (если только Вы сами этого не хотите).

На сайте *W3C* `находится хорошее пособие по CSS <http://www.w3.org/Style/Examples/011/firstcss.en.html>`_, в котором пошагово объясняются различные необходимые части CSS. В нём также вводятся несколько новых для Вас HTML элементов и показывается как Вы можете стилизовать их.

На сайте `W3Schools также существует несколько интересных CSS пособий <http://www.w3schools.com/css/css_examples.asp>`_. Вместо того, чтобы направлять Вас в процессе создания веб-страницы с CSS, на сайте *W3Schools* находятся ряд мини-уроков и примеров кода, которые покажут Вам как добиться желаемого результата, например, настроить фоновое изображение. Мы настоятельно рекомендуем Вам просмотреть их.

На сайте `html.net существует серия уроков по CSS <http://html.net/tutorials/css/>`_, которые Вы можете пройти. Как и на сайте W3Schools уроки на *html.net* разбиты на части, что позволяет Вам перейти к определенной части, которая Вам интересна.

Также стоит просмотреть коллекцию учебных пособий на сайте `CSSeasy.com <http://csseasy.com/>`, в которых даются основы по разработке различных макетов страниц.

Это далеко не весь список и воспользовавшись поиском в Интернете Вы найдете намного больше информации о CSS. Просто запомните: некоторые особенности CSS достаточно трудны для понимания и будут возникать моменты, когда Вам захочется выкинуть Ваш компьютер в окно. Это вполне нормально - просто отдохните прежде чем продолжать. Мы рассмотрим некоторые более сложные особенности CSS в этом учебном пособии в следующих нескольких разделах.

.. note:: С увеличением числа устройств, оснащенных всё более и более мощными процессорами, мы можем всё больше манипулировать веб-содержимым страницы. Чтобы не отставать от прогресса, `CSS постоянно эволюционирует <http://www.w3schools.com/css3/css3_intro.asp>`_, предоставляя всё новые и интуитивно понятные способы описания внешнего вида нашей SGML разметки. Из-за этого `поддержка относительно новых CSS свойств <http://www.quackit.com/css/css3/properties/>`_ может осуществляться не всеми браузерами, что конечно разочаровывает. Единственный способ гарантировать, что Ваш веб-сайт будет работать на различных браузерах и платформах - это проводить `тесты, тесты и ещё раз тесты! <http://browsershots.org/>`_.

