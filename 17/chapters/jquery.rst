.. _jquery:

JQuery и Django
===============
Использовать JQuery круто! JQuery - это библиотека, написанная на Javascript, которая значительно увеличивает возможности и практичность использования Javascript. Несколько строк JQuery часто содержат сотни строк на Javascript. JQuery предоставляет набор функциональных возможностей, большинство из которых сосредоточены на манипуляции с HTML элементами. В этой главе мы опишем:

* как добавить JQuery в Ваше приложение Django;
* объясним как анализировать код JQuery;
* и приведем несколько небольших примеров.


Добавление JQuery в Ваш проект/приложение Django
------------------------------------------------

В Ваш *базовый* шаблон добавьте ссылку на:

.. code-block:: html

	{% load staticfiles %}
	
	<script src="{% static "js/jquery-1.11.1.js" %}"></script>
	<script src="{% static "js/rango-jquery.js" %}"></script>

Здесь мы предполагаем, что Вы уже скачали подходящую версию библиотеки JQuery, но Вы можете также напрямую сослаться на неё:

.. code-block:: html

	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
	
Убедитесь, что правильно настроены пути к Вашим статическим файлам (смотри Главу :ref:`setup-label`)

В каталоге для статических файлов создайте каталог *js* и переместите в неё javascript файл с JQuery (``jquery.js``), а также файл - ``rango-jquery.js``, в котором будет находиться наш javascript код. В ``rango-jquery.js`` добавьте следующий код:

.. code-block:: javascript

	$(document).ready(function() {
	
		// JQuery код будет добавляться сюда.
	
	});

Этот фрагмент JQuery сначала выбирает объект документ (с помощью ``$(document)``), а затем вызывает метод ``ready()``. Как только документ готов, т. е., страница полностью загружена, то будет выполнена анонимная функция, обозначенная в коде как ``function(){ }``. Эта довольно часто используется, если не всегда, необходимо подождать пока документ полностью не загрузится перед запуском функций JQuery. В противном случае, код может попытаться выполниться для HTML элементов, которые ещё не были загружены (смотри http://api.jquery.com/ready/).

Стилистическое замечание
........................
JQuery требует от Вас больше использовать ``функциональный`` стиль программирования, в отличие от обычного Javascript стиля, который часто пишется в ``процедурном`` стиле программирования. Все команды JQuery имеют один и тот же шаблон: выбрать и совершить какое-либо действие. Выбрать элемент, а затем совершить действие над этим элементом. Об этом стоит помнить. Существуют различные операторы выбора и различные действия, которые могут быть выполнены/применены над/к элементам. Ниже в подразделах мы рассмотрим несколько функций JQuery, которые Вы можете использовать для манипулирования HTML элементами.

Пример: Всплывающее окно по щелчку
----------------------------------
В этом примере мы хотим показать насколько может отличаться реализация одной и той же функции, используя стандартный Javascript и JQuery.

В Вашем шаблоне ``about.html`` добавьте следующий фрагмент кода:

.. code-block:: html

	 <button onClick="alert('You clicked the button using Javascript.');"> 
	 	Click Me - I run Javascript 
	 </button>
	 
В нём мы присваиваем функцию ``alert()`` обработчику события ``onClick`` (по щелчку - Прим. переводчика) кнопки. Загрузите страницу ``about`` и проверьте работоспособность этой функции.

Теперь давайте сделаем тоже самое, используя Jquery, добавив вторую кнопку на страницу:

.. code-block:: html

	<button id="about-btn"> Click Me - I'm Javascript on Speed</button>
	
	<p>This is a example</p>

	<p>This is another example</p>

Обратите внимание, что пока никакой Javascript код не связан с кнопкой. Мы добавим его в файл ``rango-jquery.js``:

.. code-block:: javascript
	 
	$(document).ready( function() {
	        
	    $("#about-btn").click( function(event) {
	    	alert("You clicked the button using JQuery!");
	    });
   	});

Перезагрузите страницу и проверьте как работают кнопки. Если всё было сделано правильно, то Вы увидите, что обе кнопки выводят предупреждение.

Здесь JQuery/Javascript код сначала выбирает объект документ и когда он загрузился, выполняет функции, находящиеся внутри него, т. е., ``$("#about-btn").click()``, которая выбирает элемент на странице с id равным ``about-btn`` и затем программно связывает событие нажатия на кнопку с функцией ``alert()``.

Сначала может показаться, что код jQuery более громоздкий, поскольку требуется намного больше кода, чтобы выполнить ту же функцию, которую выполняет Javascript. Это верно для простой функции, такой как ``alert()``, но более сложные функции получаются намного чище с использованием jQuery, поскольку JQuery/Javascript код содержится в отдельном файле (полностью!). Это связано с тем, что мы назначаем обработчик события во время выполнения функции, а не статически в коде. Таким образом, происходит разделение между jQuery/Javascript кодом и HTML кодом.

.. note:: Помните, что CSS, JAVASCRIPT и HTML, необходимо хранить в отдельных файлах!


Селекторы
---------

Существует несколько способов выбрать элементы в JQuery. В вышеприведенном примере показано как можно использовать символ ``#``, чтобы найти элементы с атрибутом ``id`` в Вашем HTML документе. Чтобы найти классы, Вы можете использовать символ ``.`` так, как это сделано в следующем фрагменте кода:

.. code-block:: javascript

    $(".ouch").click( function(event) {
               alert("You clicked me! ouch!");
    });

В этом случае будут выбраны все элементы, которые имеют класс ``class="ouch"`` и им будет назначен обработчик события - щелчка мыши, при котором будет вызываться функция ``alert()``. Учтите, что всем элементам будет присвоена одна и та же функция.

Также HTML теги можно выбрать, если указать тег в селекторе:

.. code-block:: javascript

    $("p").hover( function() {
		$(this).css('color', 'red');
	}, 
	function() {
		$(this).css('color', 'blue');
	});
	
Здесь мы выбираем все HTML элементы ``p`` и связываем с ними две функции - одна срабатывает при наведении мышки на них, а другая - когда мышь находится вне элемента. Из примера видно, что мы используем другой селектор под названием ``this``, который выбирает необходимый элемент, а затем изменяет его цвет на красный или синий соответственно.
Обратите внимание, что функция ``hover()`` JQuery принимает в качестве параметров две функции (смотри http://api.jquery.com/hover/), а функция JQuery ``click()`` требует передачу события (смотри http://api.jquery.com/click/).

Попытайтесь добавить вышеприведенный код в Ваш файл ``rango-jquery.js`` и убедитесь, что он находится внутри функции ``$(document).ready()``. Что произойдет, если Вы измените ``$(this)`` на ``$(p)``?

Функция Hover - это пример события перемещения мыши; описание других подобных собитий можно найти по ссылке: http://api.jquery.com/category/events/mouse-events/


Пример манипуляции DOM
----------------------
В вышеприведенном примере мы использовали функцию ``hover`` для назначения обработчику события ``hover`` и затем использовали функцию ``css`` для изменения цвета элемента. Функция ``css`` - это один из примеров манипуляции с DOM, однако, мы можем добавлять элементам классы с помощью функции ``addClass``:

.. code-block:: javascript

    $("#about-btn").addClass('btn btn-primary')
	

Этот фрагмент кода выберет элемент с идентификатором ``#about-btn`` и присвоит ему классы ``btn`` и ``btn-primary``. После добавления этих Bootstrap классов кнопке оно будет отображаться, используя Bootstrap стиль (если Вы используете набор инструментов Bootstrap).

Также можно получить доступ к конкретному HTML элементу. Например, давайте разместим ``div`` в ``about.html``:

.. code-block:: html 

	<div id="msg">Hello</div>

Затем добавим следующий JQuery код в ``rango-jquery.js``:


.. code-block:: javascript

		$("#about-btn").click( function(event) {
	    	msgstr = $("#msg").html()
			msgstr = msgstr + "o"
			$("#msg").html(msgstr)
		 });


По щелчку на элементе с идентификатором ``#about-btn`` мы сначала извлечем HTML код внутри элемента с идентификатором ``msg`` и добавим к нему символ "o". Затем мы изменим HTML внутри элемента, опять вызвав функцию ``html``, но в этот раз передавая ей строку ``msgstr``, чтобы заменить HTML код внутри этого элемента.

В этой главе дано элементарное руководство по использованию JQuery и включению его в Ваше Django приложение. Сейчас Вы должно понимать как работает JQuery и поэкспериментировать с различными функциями и библиотеками, предоставляемыми JQuery и JQuery разработчиками (смотри http://jquery.com). В следующей главе мы будем использовать JQuery для работы с AJAX в Rango.
 

