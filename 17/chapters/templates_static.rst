.. _templates-label:

Шаблоны и статические медиа файлы
=================================
В этой главе мы расширим Ваши знания о Django, вводя механизм шаблонов, а также как использовать *статические медиа файлы* на Ваших веб страницах.

.. _model-setup-templates-label:

Использование шаблонов
----------------------
До этого Вы объединяли несколько компонентов, чтобы создать веб страницу с помощью Django. Так представление объединялось с набором URL сопоставлений. В этой главе мы разберемся, как добавить шаблоны к тому, что мы уже изучили.

В хорошо разработанных веб сайтах используется множество повторений их структуры или макета. `Повторение макета страницы <http://www.techrepublic.com/blog/web-designer/effective-design-principles-for-web-designers-repetition/>`_  - одинаковый хедер или футер на страницах веб сайта - помогает пользователям при навигации, способствует организации веб сайта и усиливает чувство приемственности. Django использует `шаблоны  <https://docs.djangoproject.com/en/1.7/ref/templates/>`_, чтобы облегчить достижение этой дизайнерской цели разработчикам, а также для отделения логики приложения от его внешнего вида. В этой главе Вы создадите базовый шаблон, который будет использоваться для создания HTML страницы. Этот шаблон будет передаваться через Django представление. В главе :ref:`model-using-label` мы пойдем ещё дальше и будем использовать шаблоны вместе с моделями для передачи динамически генерируемых данных.

Настройка каталога с шаблонами
..............................
Чтобы использовать шаблоны, Вам необходимо настроить каталог, в котором будут храниться файлы шаблонов.

В каталоге Вашего Django проекта (например, ``<рабочее пространство>/tango_with_django_project/``) создайте новый каталог с названием ``templates``. Внутри нового каталога templates создайте другой каталог под названием ``rango``. Итак каталог ``<рабочее пространство>/tango_with_django_project/templates/rango/`` будет использоваться для хранения шаблонов, связанных с нашим приложением ``rango``.

Чтобы сообщить Вашему Django проекту, где будут находится шаблоны, откройте файл ``settings.py`` Вашего проекта. Добавьте кортеж ``TEMPLATE_DIRS`` в  ``settings.py`` и запишите в нем путь к недавно созданному каталогу ``templates`` так, чтобы он выглядел как показано ниже.

.. code-block:: python
	
	
	TEMPLATE_DIRS = ('<рабочее пространство>/tango_with_django_project/',)

.. note:: (Примечание переводчика). Кортеж TEMPLATE_DIRS может уже существовать и иметь вид:
	TEMPLATES = [
	    {
	        'BACKEND': 'django.template.backends.django.DjangoTemplates',
	        'DIRS': ['<рабочее пространство>/tango_with_django_project/'],
	        'APP_DIRS': True,
	        'OPTIONS': {
	            'context_processors': [
	                'django.template.context_processors.debug',
	                'django.template.context_processors.request',
	                'django.contrib.auth.context_processors.auth',
	                'django.contrib.messages.context_processors.messages',
	            ],
	        },
	    },
	]
	В этом случае путь к шаблонам добавляется в 'DIRS'.

Учтите, что Вы *должны использовать абсолютные пути* при указании каталога ``templates``. Если Вы являетесь частью команды или работаете на разных компьютерах, это может привести к проблеме в будущем. Проблема заключается в различных путях к Вашему каталогу ``<рабочее пространство>``. *Жестко-заданный* путь, показанный выше, будет разным на разных компьютерах. Конечно, Вы можете изменять каталог с шаблонами для каждой машины, но это довольно плохой способ решения проблемы. Так что же делать?

.. warning::
	Жестко-заданными путями вымощена дорога в ад.
 	`Жестко-заданные <http://en.wikipedia.org/wiki/Hard_coding>`_ пути считаются `антимоделью при проектировании программного обеспечения <http://sourcemaking.com/antipatterns>`_, и уменьшат `переносимость <http://en.wikipedia.org/wiki/Software_portability>`_ Вашего проекта.

Динамические пути
.................
Решение проблемы жестко-заданных путей - это использование встроенных функций Python, которые автоматически создают путь к нашему каталогу ``templates``. Таким образом, абсолютный путь можно получить независимо от того где Вы разместите код Вашего Django проекта в Вашей файловой системе. Это в свою очередь улучшит *переносимость* Вашего проекта.

В Django 1.7 файл ``settings.py`` теперь содержит переменную под названием ``BASE_DIR``. В ней хранится путь к каталогу, в котором будет находится модель ``settings.py`` Вашего проекта. Это достигается, используя специальный Python атрибут ``__file__``, который `определяет абсолютный путь Вашего модуля настроек <http://stackoverflow.com/a/9271479>`_. ``__file__`` выдает абсолютный путь к файлу настроек, а затем вызывается ``os.path.dirname()``, чтобы получить абсолютный путь к каталогу. Повторный вызов ``os.path.dirname()`` удаляет последний каталог в пути, поэтому ``BASE_DIR`` содерит ``<workspace>/tango_with_django_project/``. Если Вам интересно можно понаблюдать за этим процессом, добавив в ``settings.py`` следующие строки:

.. code-block:: python
	
	print __file__
	print os.path.dirname(__file__)
	print os.path.dirname(os.path.dirname(__file__))
	

.. note:: 
	(Примечание переводчика). Используйте следующий код, если работаете в Python 3.*:
	.. code-block:: python
		
		print(__file__)
		print(os.path.dirname(os.path.abspath(__file__))) 
		print(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


Воспользуемся этим. Создайте новую переменную в ``settings.py`` под названием ``TEMPLATE_PATH`` и сохраните в ней путь к каталогу ``templates``, который Вы создали ранее. Используя функцию ``os.path.join()``, Ваш код должен иметь вид показанный ниже.

.. code-block:: python
	
	TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates')

Здесь мы используем ``os.path.join()`` для объединения переменной ``BASE_DIR` и строки ``'templates'``, что для примера приведет к ``<рабочее пространство>/tango_with_django_project/templates/``. Мы можем заменить жестко-заданный путь, который мы прописали в ``TEMPLATE_DIRS`` на ``TEMPLATE_PATH``, как это сделано ниже.

.. code-block:: python
	
	TEMPLATE_DIRS = (
	    # Добавляйте сюда строки, например "/home/html/django_templates" или "C:/www/django/templates".
	    # Всегда используйте прямые слеши, даже в Windows.
	    # Не забывайте использовать абсолютные пути, а не относительные.
	    TEMPLATE_PATH,
	)

.. note:: (Примечание переводчика). Пример заполнения кортежа TEMPLATE_DIRS:
	TEMPLATES = [
	    {
	        'BACKEND': 'django.template.backends.django.DjangoTemplates',
	        'DIRS': [TEMPLATE_PATH],
	        'APP_DIRS': True,
	        'OPTIONS': {
	            'context_processors': [
	                'django.template.context_processors.debug',
	                'django.template.context_processors.request',
	                'django.contrib.auth.context_processors.auth',
	                'django.contrib.messages.context_processors.messages',
	            ],
	        },
	    },
	]

Мы можем задать переменную ``TEMPLATE_PATH`` в начале нашего модуля ``settings.py``, чтобы её можно было легко изменить в случае необходимости. Из-за этого мы создали дополнительную переменную для хранения пути к шаблону.

.. warning:: При объединении или конкатенации системных путей, предпочтительно использовать ``os.path.join()``. Использование этой функции гарантирует, что применяются правильные слеши в зависимости от Вашей операционной системы. На POSIX-совместимой операционной системе будут использоваться прямые слеши для разделения каталогов, тогда как в ОС Windows будут использоваться обратные. Если Вы вручную добавите слеши к путям, то это может привести к ошибке в пути при запуске Вашего кода на другой операционной системе.



.. _adding-a-template-label:

Добавление шаблона
..................
После настройки Вашего каталога с шаблонами и пути к нему, создайте файл под названием ``index.html`` и поместите его в каталог ``templates/rango/``. В этот новый файл добавьте следующий HTML код:

.. code-block:: html
	
	<!DOCTYPE html>
	<html>
	
	    <head>
	        <title>Rango</title>
	    </head>
	    
	    <body>
	        <h1>Rango says...</h1>
	        hello world! <strong>{{ boldmessage }}</strong><br />
	        <a href="/rango/about/">About</a><br />
	    </body>
	
	</html>

Из этого HTML кода должно быть понятно, что будет создаваться простая HTML страница с приветственным сообщением для пользователя *hello world*. Также в коде присутствует некоторый код не характерный HTML, например, ``{{ boldmessage }}``. Это *переменная шаблона Django* и мы сможем задавать значение для этой переменной, которое будет отображаться в выдаваемом клиенту результате. Вскоре мы вернемся к этому.

Чтобы использовать этот шаблон, нам необходимо изменить представление ``index()``, которое мы создали ранее. Вместо отправки простого сообщения, мы изменим его так, чтобы оно отправляло наш шаблон.

Убедитесь, что следующая команда импорта находится в верхней части файла ``rango/views.py``.

.. code-block:: python
	
	from django.shortcuts import render

Затем Вы можете скорректировать функцию-представление ``index()`` следующим образом. Прочитайте комментарии внутри функции, чтобы понять, что делает каждая строка.

.. code-block:: python
	
	def index(request):
	     
	    # Создаем словарь, чтобы передать шаблону в качестве содержимого.
	    # Заметьте, что ключ boldmessage называется так же как и переменная {{ boldmessage }} в шаблоне!
	    context_dict = {'boldmessage': "I am bold font from the context"}
	    
	    # Возвращает ответ, полученный с помощью шаблона, который посылается клиенту.
	    # Для упрощения нашей работы мы используем следующую функцию.
	    # Заметьте, что первый параметр - это шаблон, который мы хотим использовать.
		
	    return render(request, 'rango/index.html', context_dict)


Сначала мы создаём словарь из пар ключ-значение, который мы хотим использовать в шаблоне, затем мы вызываем вспомогательную функцию ``render()``. Эта функция принимает в качестве входного аргумента пользовательский запрос ``request``, имя файла шаблона и словарь контекста. Функция ``render()` принимает эти данные и объединяет их с шаблоном, выдавая законченную HTML страницу. Затем она возвращается и отправляется веб браузеру пользователя.

Когда файл шаблона загружается системой шаблонов Django, создается *контекст шаблона*. Проще говоря, контекст шаблона по сути это Python словарь, который связывает имена переменных шаблона с Python переменными. В шаблон, который мы создали ранее, мы включили переменную шаблона ``boldmessage``. В примере нашего представления ``index(request)`` строка ``I am bold font from the context`` ссылается на переменную шаблона ``boldmessage``. Таким образом, строка ``I am bold font from the context`` заменяет любой экземпляр ``{{ boldmessage }}`` в шаблоне.

Теперь, когда Вы изменили представление, чтобы оно могло использовать Ваш шаблон, запустите Django сервер для разработки и посетите адрес http://127.0.0.1:8000/rango/. Вы должны увидеть Ваш шаблон как в примере, показанном на Рисунке :num:`fig-rango-hello-world-template`.

Если этого не произошло, прочитайте сообщение об ошибке, чтобы понять в чем проблема, и затем тщательно проверьте все изменения, которые Вы сделали. Убедитесь, что все требуемые изменения были сделаны. Одной из наиболее распространенных проблем с шаблонами является неправильно настроенный путь в ``settings.py``. Иногда стоит добавить команду ``print`` в ``settings.py``, чтобы просмотреть ``BASE_DIR`` и ``TEMPLATE_PATH``.

Этот пример показывает, как использовать шаблоны в ваших представлениях. Однако мы коснулись только некоторых функциональных возможностей, предоставляемых Django, связанных с шаблонами. Мы рассмотрим более сложные способы использования шаблонов позднее в этом учебном пособии. В то же время, Вы можете узнать больше информации о `шаблонах из официальной документации Django <https://docs.djangoproject.com/en/1.7/ref/templates/>`_.

.. _fig-rango-hello-world-template:

.. figure:: ../images/rango-hello-world-template.png
	:figclass: align-center

	Снимок экрана Google Chrome, в котором отображается шаблон, используемый в этом учебном пособии.

Работа со статическими медиа файлами
------------------------------------
Конечно, веб сайт *Rango* довольно простой, поскольку мы не использовали никаких стилей или изображений. `Каскадные таблицы стилей (CSS) <http://en.wikipedia.org/wiki/Cascading_Style_Sheets>`_, `JavaScript <https://en.wikipedia.org/wiki/JavaScript>`_ и изображения являются по существу *статическими медиа* файлами, которые мы можем включить в нашу веб страницу, чтобы добавить стилизацию и создать динамическое поведение. Их использование немного отличается от обычных веб страниц. Это связано с тем, что они не создаются динамически как наши HTML страницы. В этом разделе показано как настроить Ваш Django проект для предоставления статических медиа файлов клиенту. Мы также изменим наш шаблон, добавив некоторые примеры статических медиа файлов.

Настройка каталога со статическими медиа файлами
................................................
Чтобы можно было использовать статические медиа файлы, Вам необходимо создать каталог, в котором они будут храниться. В Вашем каталоге проекта (например, ``<рабочее пространство>/tango_with_django_project/``), создайте новый каталог под названием ``static`` и новый каталог ``images`` внутри ``static``.

Теперь поместите изображение в каталог ``static/images``. Как показано на Рисунке :num:`fig-rango-picture`, мы выбрали изображение хамелеона, `Ранго <http://www.imdb.com/title/tt1192628/>`_ - подходящий талисман, если бы он был нужен.


.. _fig-rango-picture:

.. figure:: ../images/rango-picture.png
	:figclass: align-center

	Хамелеон Ранго в нашем каталоге статических медиа файлов.

Используя созданный каталог ``static``, нам необходимо сообщить Django о нём, аналогично тому как мы сделали это раньше для нашего каталога ``templates``. В файле ``settings.py`` необходимо изменить две переменные: ``STATIC_URL`` и кортеж ``STATICFILES_DIRS``. Сначала создайте переменную для хранения пути к статическому каталогу (``STATIC_PATH``) следующим образом.

.. code-block:: python
	
	STATIC_PATH = os.path.join(BASE_DIR,'static')

	STATIC_URL = '/static/' # Эта переменная уже определена.
	
	STATICFILES_DIRS = (
	    STATIC_PATH,
	)

Вы ввели некоторый код, но что он делает? Первая переменная ``STATIC_URL`` определяет базовый URL, с помощью которого приложение Django найдет статические медиа файлы при запуске сервера. Например, при запуске Django сервера для разработки с ``STATIC_URL`` равным ``/static/`` как в вышеприведенном примере, статические медиа файлы будут доступны по адресу ``http://127.0.0.1:8000/static/``. В `официальной документации по настройке статических медиа файлов <https://docs.djangoproject.com/en/1.7/ref/settings/#std:setting-STATIC_URL>`_ дается предупреждение, что очень важно убедиться, что поставлены оба слеша. Если не знать об этом, то это может привести к большим проблемам.

В то время как ``STATIC_URL`` определяет URL для доступа к медиа файлам через веб сервер, ``STATICFILES_DIRS`` позволяет Вам указать местоположение только что созданного каталога ``static`` на Вашем локальном диске. Как и кортеж ``TEMPLATE_DIRS``, ``STATICFILES_DIRS`` требует абсолютного пути к каталогу ``static``. Здесь мы опять использовали ``BASE_DIR``, определенную в Разделе :ref:`model-setup-templates-label` для создания ``STATIC_PATH``.

После того как две эти переменные настроены, опять запустите Ваш Django сервер для разработки. Если мы хотим просмотреть наше изображение Ранго, нужно перейти по адресу ``http://127.0.0.1:8000/static/images/rango.jpg``. Если оно не появилось, нужно проверить всё ли было правильно сделано, сохранили ли Вы Ваш файл ``settings.py``, перезапустили ли сервер для разработки. Если изображение появилось, попытайтесь добавить другие типы файлов в каталог ``static`` и запросить их через Ваш браузер.

.. caution:: 
Хотя можно Django использовать сервер для разработки при работе с Вашими статическими медиа файлами при разработке приложения, его нельзя использовать при реальной работе приложения. В `официальной Django документации по развертыванию <https://docs.djangoproject.com/en/1.7/howto/static-files/deployment/>`_ дается дополнительная информация о развертывании статических файлов на сервере, где приложение будет работать.

Статические медиа файлы и шаблоны
---------------------------------
Теперь, когда Ваш Django проект настроен и может работать со статическими медиа файлами, Вы можете получить доступ к ним из шаблонов.

Чтобы показать, как включить статические медиа файлы, откройте ``index.html`` расположенный в каталоге ``<рабочее пространство>/templates/rango/``. Измените исходный HTML код следующим образом. Две новые строки добавлены с HTML комментарием, чтобы их было легче найти.

.. code-block:: html

	<!DOCTYPE html>
	
	{% load staticfiles %} <!-- Ноая строка -->
	
	<html>
	
	    <head>
	        <title>Rango</title>
	    </head>
	    
	    <body>
	        <h1>Rango says...</h1>
	        hello world! <strong>{{ boldmessage }}</strong><br />
	        <a href="/rango/about/">About</a><br />
	        <img src="{% static "images/rango.jpg" %}" alt="Picture of Rango" /> <!-- Новая строка -->
	    </body>
	
	</html>

Во-первых, мы должны сообщить системе шаблонов Django, что мы будем использовать статические медиа файлы с помощью тега ``{% load staticfiles %}``. Это позволяет вызывать тег шаблона ``static`` как это сделано в ``{% static "rango.jpg" %}``. Как Вы могли заметить, теги шаблонов Django заключаются в фигурные скобки ``{ }``. В этом примере, тег ``static`` объединит ``STATIC_URL`` с ``"rango.jpg"`, поэтому после обработки эта строка в HTML файле будет выглядеть как:

.. code-block:: html

	<img src="/static/images/rango.jpg" alt="Picture of Rango" /> <!-- New line -->

Если по какой-то причине изображение не будет загружено, всегда стоит указывать альтернативный текст. Это достигается с помощью атрибута ``alt`` - текст, присвоенный этому атрибуту, отображается, если изображение не будет загружено.

Опять запустите Django сервер для разработки с учетом этих небольших изменений и перейдите по адресу ``http://127.0.0.1:8000/rango``. Надеемся Вы увидите страницу похожую на ту, которая показана на Рисунке :num:`fig-rango-site-with-pic`.

.. _fig-rango-site-with-pic:

.. figure:: ../images/rango-site-with-pic.png
	:figclass: align-center

	Наш первый Rango шаблон с изображением хамелеона Ранго.

Вызов функции ``{% static %}`` должен использоваться, когда Вы хотите сослаться на статические медиа файлы в шаблоне. Пример кода, приведенный ниже, показывает, как Вы можете добавить JavaScript, CSS и изображения в Ваши шаблоны - везде используется правильная HTML разметка.

.. code-block:: html
	
	<!DOCTYPE html>
	
	{% load staticfiles %}
	
	<html>
	
	    <head>
	        <title>Rango</title>
	        <link rel="stylesheet" href="{% static "css/base.css" %}" /> <!-- CSS -->
	        <script src="{% static "js/jquery.js" %}"></script> <!-- JavaScript -->
	    </head>
	    
	    <body>
	        <h1>Including Static Media</h1>
	        <img src="{% static "images/rango.jpg" %}" alt="Picture of Rango" /> <!-- Изображения -->
	    </body>
	
	</html>

Очевидно, что статические файлы, на которые Вы ссылаетесь, должны находиться в Вашем каталоге ``static``. Если файл находится не там или Вы не правильно на него сослались, то в командной строке облегченный Django сервер для разработки выведет сообщения о любых ошибках. Попытайтесь сослаться на не существующий файл и посмотрите что произойдет.

Для получения дополнительной информации о включении статических файлов прочтите официальную `Django документацию по работе со статическими файлами в шаблонах <https://docs.djangoproject.com/en/1.7/howto/static-files/#staticfiles-in-templates>`_.

.. caution:: В Ваших шаблонах необходимо гарантировать, что любое `объявление типа документа <http://en.wikipedia.org/wiki/Document_Type_Declaration>`_ (например, ``<!DOCTYPE html>``), которое Вы используете на Ваших страницах, должно выводиться на *первой строке*. Вот почему шаблон ``Django {% load staticfiles %}`` находится ниже объявления типа документа, а не выше. Это требование HTML/XHTML, чтобы объявление типа документа производилось на первой строке. Конечно Django команды, размещенные выше, будут удалены при выводе, но могут остаться пробелы, которые `не позволят пройти валидацию  <http://www.w3schools.com/web/web_validate.ASP>`_ на `сервисе валидации W3C разметки <http://validator.w3.org/>`_.

#TODO(leifos): Note that this not the best practice when you go to deployment, and that they should see: https://docs.djangoproject.com/en/1.7/howto/static-files/deployment/ and that the following solution works when ``DEBUG=True``

#TODO(leifos): the DEBUG variable in settings.py, lets you control the output when an error occurs, and is used for debugging. When the application is deployed it is not secure to leave DEBUG equal to True. When you set DEBUG to be False, then you will need to set the ALLOWED_HOSTS variable in settings.py, when running on your local machine this would be ``127.0.0.1``. You will also need to update the project urls.py file:


.. code-block:: python


	from django.conf import settings # Новый импорт
	from django.conf.urls.static import static # Новый Импорт


	if not settings.DEBUG:
		urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


#TODO(leifos): Maybe we should describe all this in the deployment chapter... probably makes the most sense


Сервер статических файлов
-------------------------
Теперь, когда Вы можете передавать статические файлы клиенту, рассмотрим вариант загружаемых на сервер статических файлов. Многие веб сайты предоставляют своим пользователям эту возможность - например, загрузить изображение для профиля. В этом разделе мы покажем как добавить простой медиа сервер для разработки к Вашему Django проекту. Медиа сервер для разработки может использоваться вместе с формами для загрузки файлов, которые мы рассмотрим в Главе :ref:`login-label`.

Итак, как нам настроить медиа сервер для разработки? В первую очередь нужно создать новый каталог под названием ``media`` в корневом каталоге нашего Django проекта (например, ``<рабочее пространство>/tango_with_django_project/``). Новый каталог ``media`` теперь должен находится на одном уровне с Вашими каталогами ``templates`` и ``static``. После создания каталога, измените файл ``urls.py`` Вашего Django проекта, который расположен в каталоге конфигурации проекта (например, ``<рабочее пространство>/tango_with_django_project/tango_with_django_project/``). Добавить следующие строки в файл ``urls.py``.

.. code-block:: python
	
	# В верхней части Вашего urls.py файла добавьте следующую строку:
	from django.conf import settings
	
	# НИЖЕ Вашего определения urlpatterns добавьте следующие две строки:
	if settings.DEBUG:
	    urlpatterns += patterns(
	        'django.views.static',
	        (r'^media/(?P<path>.*)',
	        'serve',
	        {'document_root': settings.MEDIA_ROOT}), )

Модуль ``settings`` из ``django.conf`` дает доступ к переменным, определённым в файле ``settings.py`` нашего проекта. Условный оператор проверяет запущен ли Django проект в `DEBUG <https://docs.djangoproject.com/en/1.7/ref/settings/#debug> режиме. Если настройка ``DEBUG`` проекта равна ``True``, то к кортежу ``urlpatterns`` добавляется дополнительный URL шаблон. Из шаблона видно, что любой файл, запрашиваемый с помощью URL, начинающегося с ``media/``, запрос будет передаваться представлению ``django.views.static``. Этот запрос обрабатывает загруженные файлы.

После корректировки Вашего файла ``urls.py`` нам необходимо изменить наш файл проекта ``settings.py``. Теперь нужно задать значения двух переменных. В добавьте ``MEDIA_URL`` и ``MEDIA_ROOT`` в файл и присвойте им следующие значения.


.. code-block:: python
	
	MEDIA_URL = '/media/'
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Абсолютный путь к медиа каталогу

Первая переменная ``MEDIA_URL`` определяет базовый URL, откуда будут доступны все медиа файлы на Вашем сервере для разработки. Присвоение ``MEDIA_URL`` из примера значения ``/media/`` означает, что загруженные пользователем файлы будут доступны с URL ``http://127.0.0.1:8000/media/``. ``MEDIA_ROOT`` используется, чтобы сообщить Django, где должны храниться загруженные файлы на Вашем локальном диске. В вышеприведенном примере, мы задали этой переменной значение равное результату объединения нашей переменной ``PROJECT_PATH``, определенной в разделе :ref:`model-setup-templates-label`, с ``/media/``. Оно будет равно абсолютному пути ``<рабочее пространство>/tango_with_django_project/media/``.

.. caution:: Как было сказано ранее, медиа сервер для разработки, поставляемый с Django, очень удобен для целей отладки. Однако, он *не* должен использоваться на реальном сервере, где приложение будет работать. В официальной `Django документации по статическим файлам <https://docs.djangoproject.com/en/1.7/ref/contrib/staticfiles/#static-file-development-view>`_ дается предупреждение, что такой метод *"крайне неэффективен и не безопасен"*. Если Вы планируете развертывать Ваш Django проект, прочтите документацию, чтобы увидеть альтернативное решение для загрузки файлов, которое может обрабатывать большой объем запросов гораздо более безопасным образом.

Вы можете проверить, что данная настройка работает поместив файл изображения в Ваш недавно созданный каталог ``media``. Вставьте файл, запустите Django сервер для разработки и запросите изображение в Вашем браузере. Например, если Вы добавили файл ``rango.jpg`` в ``media``, то URL, который Вы должны ввести будет выглядеть как ``http://127.0.0.1:8000/media/rango.jpg``. Изображение должно появиться в Вашем браузере. Если оно не появилось, проверьте всё ли Вы сделали правильно.

#TODO(leifos): check that this still works (certainly you can access the images.. need to check the uploading)

Основная последовательность действий
------------------------------------
После завершения этой главы Вы должны знать как настраивать и создавать шаблоны, использовать шаблоны в Ваших представлениях и использовать Django для отправки статических медиа файлов, включая изображения в Ваших шаблонах *и* настраивать Django сервер статических медиа файлов, который позволяет загружать файлы. Мы действительно рассмотрели столько тем!

Процесс создания шаблона и его интеграция в Django представление - это основная идея, которая должна быть Вам понятна. Он выполняется в несколько шагов, но после нескольких попыток это войдет в привычку.

#. Во-первых, создайте шаблон, который Вы хотите использовать и сохраните его в каталоге ``templates``, который Вы указали в Вашем файле проекта ``settings.py``. Вы можете использовать переменные шаблона Django (например, ``{{ имя_переменной }}``) в Вашем шаблоне. Вы сможете заменить их на что угодно в соответствующем представлении.
#. Найдите или создайте новое представление в файле приложения ``views.py``.
#. Добавьте логику, характерную представлению (если она необходима). Например, извлечение данных из базы данных.
#. В представлении создайте словарь, который Вы передадите механизму шаблонов в качестве *контекста* шаблона.
#. Воспользуйтесь вспомогательной функцией ``render()``, чтобы создать ответ для клиента на основе шаблона. Убедитесь, что Вы передаете функции запрос, затем файл шаблона и наконец словарь контекста!
#. Если Вы ещё этого не сделали, то сопоставьте представлению URL, модифицируя файл Вашего проекта ``urls.py`` - и файл ``urls.py`` приложения, если он существует.

Вы также должны знать последовательность действий для добавления статического медиа файла на одну из Ваших страниц. Ниже приведен пошаговый процесс как это сделать.

#. Выберите статический медиа файл, который Вы хотите использовать, и поместите его в каталог ``static`` Вашего проекта. Это каталог, который Вы определяете в кортеже ``STATICFILES_DIRS`` в файле Вашего проекта ``settings.py``.
#. Добавьте ссылку на статический медиа файл в шаблоне. Например, изображение должно быть вставлено в HTML страницу с помощью тега ``<img />``.
#. Не забудьте использовать команды ``{% load staticfiles %}`` и ``{% static "filename" %}`` в шаблоне для доступа к статическим файлам.

В следующей главе мы будем рассматривать базы данных. Мы увидим как использовать превосходно сделанный уровень абстракции Django для взаимодействия с базами данных, который облегчает работу и позволяет не применять SQL!

Упражнения
----------
Выполните следующие упражнения, чтобы закрепить то, что Вы узнали из этой главы.

* Измените страницу ``about`` так, чтобы она тоже использовала шаблон под названием ``about.html``.
* В шаблон ``about.html`` добавьте изображение, сохраненное в каталоге статических медиа файлов Вашего проекта.
