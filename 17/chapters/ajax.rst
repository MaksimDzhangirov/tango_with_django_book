.. _ajax-label:

AJAX в Django, используя JQuery
===============================
AJAX это на самом деле несколько технологий, которые объединены вместе, для уменьшения количества перезагрузки страницы. Вместо перезагрузки целой страницы, перезагружается только часть страницы или данных на странице. Если Вы не использовали AJAX до этого или хотите узнать больше о нём, перед его использованием здесь, воспользуйтесь ресурсами на сайте Mozilla: https://developer.mozilla.org/en-US/docs/AJAX

Чтобы упростить AJAX запросы, мы будем использовать библиотеку JQuery. ОБратите внимание, что если Вы используете набор инструментов Twitter CSS Bootstrap, то JQuery уже входит в него. В противном случае, скачайте последнюю версию JQuery и добавьте его в Ваше приложение (смотри Главу ..).


Функциональные возможности приложения Rango, реализуемые с помощью AJAX
-----------------------------------------------------------------------
Чтобы ещё больше улучшить взаимодействие пользователя с приложением Rango, давайте добавим ряд функций, которые используют AJAX, такие как:

* Кнопка "Лайк", чтобы зарегистрированный пользователи могли *лайкнуть* определенную категорию;
* "Живой поиск" по категориям - когда пользователь вводит название категории система автодополняет, позволяя быстрее осуществлять поиск;
* Кнопка "Добавить страницу", позволяющая пользователям быстро и легко добавить страницу в категорию.

Создайте новый файл - ``rango-ajax.js`` и добавьте его в Ваш каталог ``js``. Затем в Ваш *базовый* шаблон включите:

.. code-block:: html
	
	<script src="{% static "js/jquery.js" %}"></script>
	<script src="{% static "js/rango-ajax.js" %}"></script>

Здесь мы предполагаем, что Вы скачали одну из версий библиотеки JQuery, но Вы можете также подгружать её с Интернета:

.. code-block:: html

	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

Теперь, когда библиотека JQuery подключена и её можно использовать, воспользуемся ей, чтобы улучшить приложение Rango.

Добавляем кнопку "Лайк"
-----------------------
Было бы не плохо, если бы зарегистрированный пользователь мог бы каким-то образом показать, что ему нравится определенная категория. Следующая последовательность действий позволит пользователям "лайкать" категории, но не отслеживать какие категории они "лайкнули", т. е., мы считаем, что они не будут нажимать кнопку "лайк" несколько раз.

Последовательность действий
...........................
Чтобы пользователи могли "лайкать" определенные категории, осуществите следующую последовательность действий:

* В шаблон ``category.html``:
	- Добавьте кнопку "Лайк" с идентификатором ``id="like"``;
	- Добавьте тег шаблона отображающий количество лайков: ``{{% category.likes %}}``;
	- Поместите его внутри тега div с идентификатором ``id="like_count"``, т. е., ``<div id="like_count">{{ category.likes }} </div>``
	- Таким образом производится настрока шаблона, чтобы можно было лайкать категории и отображать лайки для категории.
	- Обратите внимание, что поскольку представление ``category()`` передает ссылку на объект category, мы можем использовать её, чтобы получить доступ к количеству лайков в шаблоне следующим образом - ``{{ category.likes }}``.

* Создайте представление - ``like_category``, которое будет анализировать запрос и извлекать ``category_id``, а затем инкрементировать количество лайков для категории с указанным идентификатором;
	- Не забудьте сопоставить ему URL; т. е. сопоставить представлению ``like_category`` URL ``rango/like_category/``. В этом случае GET запрос будет иметь вид ``rango/like_category/?category_id=XXX``;
	- Вместо возврата HTML страницы, это представление будет возвращать новое общее количество лайков для этой категории;
* Теперь в "rango-ajax.js" добавьте код JQuery для выполнения AJAX GET запроса;
	- Если запрос успешен, то нужно обновите элемент ``#like_count`` и скрыть кнопку "Лайк".

Обновляем шаблон для категорий
..............................
Чтобы подготовить шаблон к новой функциональной возможности, нам необходимо добавить кнопку "Лайк" с идентификатором ``id="like"`` и создать ``<div>`` для отображения количества лайков ``{{% category.likes %}}``. Для этого добавьте следующий ``<div>`` следующий ``<div>`` в шаблон *category.html*:

.. code-block:: html
	
	<p>
	
	<strong id="like_count">{{ category.likes }}</strong> people like this category
	
	{% if user.is_authenticated %}
		<button id="likes" data-catid="{{category.id}}" class="btn btn-primary" type="button">
		<span class="glyphicon glyphicon-thumbs-up"></span> 
		Like
		</button>
	{% endif %}
	
	</p>

Создаем представление Like Category
...................................
Создайте представление под названием ``like_category`` в ``rango/views.py``, которое будет анализировать запрос и извлекать идентификатор категории category_id, а затем инкрементировать количество лайков для категории с указанным идентификатором.

.. code-block:: python
	
	from django.contrib.auth.decorators import login_required

	@login_required
	def like_category(request):
	   
	    cat_id = None
	    if request.method == 'GET':
	        cat_id = request.GET['category_id']

	    likes = 0
	    if cat_id:
	        cat = Category.objects.get(id=int(cat_id))
	        if cat:
		    likes = cat.likes + 1
	            cat.likes =  likes 
	            cat.save()
		
	    return HttpResponse(likes)

Просмотрев код, Вы увидите, что мы позволяем только аутентифицированным пользователям лайкнуть категорию. В представлении предполагается, что переменная ``category_id`` была передана через GET запрос, с помощью которой мы можем определить для какой категории нужно обновить количество лайков. В этом представлении, если бы захотели, мы могли бы также отслеживать и фиксировать, что определенный пользователь "лайкнул" эту категорию - но мы специально упростили его, чтобы сосредоточиться на AJAX механике.

Не забудьте сопоставить ему URL в ``rango/urls.py``. Обновите ``urlpatterns`` добавив в них:

.. code-block:: python
	
	url(r'^like_category/$', views.like_category, name='like_category'),


Создаем AJAX запрос
...................
Теперь в "rango-ajax.js" добавьте JQuery код для выполнения AJAX GET запроса. Вставьте следующий код:

.. code-block:: javascript
	
	    $('#likes').click(function(){
	        var catid;
	        catid = $(this).attr("data-catid");
	        $.get('/rango/like_category/', {category_id: catid}, function(data){
	                   $('#like_count').html(data);
	                   $('#likes').hide();
	        });
	    });

Этот фрагмент JQuery/Javascript добавит обработчик события к элементу с идентификатором ``#likes``, т. е., к кнопке. При нажатии на неё, будет извлечен идентификатор категории из элемента кнопки и затем создан  AJAX GET запрос, который вызовет ``/rango/like_category/``, передав ``category_id`` в запросе. Если запрос передасться успешно, то HTML элемент с идентификатором like_count (т. е., <strong>) обновиться и станет равным данным, возвращенным по запросу, а HTML элемент с идентификатором likes (т. е., <button>) будет скрыт.

При этом происходит много чего и правильно понять механику для создания страниц с AJAX может быть не совсем просто. По сути, при нажатии кнопки создается AJAX запрос, с учетом нашего URL сопоставления, вызывающий представление ``like_category``, которое обновляет и возвращает новое количество лайков для категории. Когда AJAX получает ответ от представления, он обновляет определенные части страницы, т. е. текст и кнопку. Кнопка ``#likes`` становится скрытой.

Добавляем "живой поиск" для категории
-------------------------------------
Было бы здорово, если бы мы предоставили пользователям быстрый способ поиска категории, чтобы они не просматривали длинный список. Для этого мы можем создать поле для ввода, позволяющее пользователям вводить символы или части слова, а затем система предоставит список совпавших с символами категорий, из которых пользователь сможет выбрать подходящую. Каждый раз, когда пользователь вводит символ, осуществляется запрос на сервер, извлекающий категории, которые соответствуют вводу пользователя.

Последовательность действий
...........................
Для этого Вам необходимо сделать следующее.

* Создать параметризированную функцию под названием ``get_category_list(max_results=0, starts_with='')``, которая возвращает все категории, которые начинаются с ``starts_with``, если ``max_results=0``, а в противном случае возвращает до ``max_results`` категорий.
	- Функция возвращает список объектов-категорий, а также закодированное название категории, хранящее в атрибуте ``url``.
* Создайте представление под названием *suggest_category*, которая будет анализировать запрос и извлечь категорию из строки запроса.
	- Предположим, что осуществляется GET запрос и попытаемся получить атрибут *query*.
	- Если строка запроса не пустая, извлечь из модели Category первые 8 категорий, которые начинаются со строки запроса.
	- Затем список категорий вставляется в HTML код с помощью шаблона.
* Вместо создания шаблона под названием ``suggestions.html`` опять используем ``cats.html``, поскольку в нём будут отображаться данные того же типа (т. е., категории).
* Чтобы клиент мог запросить эти данные, Вы должны создать URL сопоставление; давайте назовём его *category_suggest*.

После настройки сопоставления, представления и шаблона для этого представления, Вам необходимо обновить шаблон ``base.html`` и добавить определенный Javascript код, чтобы категории отображались при вводе пользователем символов.

* В  шаблоне ``base.html`` измените блок боковой панели так, чтобы в div с идентификатором id="cats" находились категории, соответствующие запросу. JQuery/AJAX будет обновлять этот элемент.
	- Выше этого элемента <div> добавьте поле для ввода, чтобы пользователь мог ввести символы, входящие в категорию, т. е.:
	
		``<input  class="input-medium search-query" type="text" name="suggestion" value="" id="suggestion" />``

* Добавив эти элементы в шаблоны, Вы можете записать определенный JQuery код, который обновит список категорий, каждый раз при вводе пользователя.
	- Свяжите обработчик события нажатия на клавишу с *полем ввода* с идентификатором ``id="suggestion"``
	- ``$('#suggestion').keyup(function(){ ... })``;
	- Когда пользователь отпускает клавишу, осуществите AJAX запрос, чтобы получить обновленный список категорий
	- Затем используйте JQuery функцию ``.get()``, т. е., ``$(this).get( ... )``;
	- Если запрос выполнен успешно, то замените содержимое элемента <div> с идентификатором id="cats" на полученные данные;
	- Здесь можно использовать функцию JQuery ``.html()``, т. е., ``$('#cats').html( data )``.


Создаём функцию c параметрами Get Category List
...............................................
В этой вспомогательной функции мы используем фильтр, чтобы найти все категории, которые начинаются с переданной в функцию строки. Мы используем фильтр ``istartwith``, который не чувствителен к регистру символов. Если наоборот необходимо его учитывать, то Вам нужно использовать фильтр ``startswith``.

.. code-block:: python

	def get_category_list(max_results=0, starts_with=''):
		cat_list = []
		if starts_with:
			cat_list = Category.objects.filter(name__istartswith=starts_with)
		
		if max_results > 0:
			if len(cat_list) > max_results:
				cat_list = cat_list[:max_results]
			
		return cat_list

Создаем представление Suggest Category
......................................
Используя функцию ``get_category_list`` мы теперь можем создать представление, которое возвращает первые 8 совпавших результатов как показано ниже:

.. code-block:: python
	
	def suggest_category(request):
		
		cat_list = []
		starts_with = ''
		if request.method == 'GET':
			starts_with = request.GET['suggestion']
		
		cat_list = get_category_list(8, starts_with)
			
		return render(request, 'rango/category_list.html', {'cat_list': cat_list })

Отметим, что мы опять используем шаблон ``rango/cats.html`` :-).

Сопоставляем представлению URL
..............................
Добавьте следующий код в ``urlpatterns`` из файла ``rango/urls.py``:

.. code-block:: python

	url(r'^suggest_category/$', views.suggest_category, name='suggest_category'),

Обновите базовый шаблон
.......................
В базовый шаблон в div для боковой панели добавьте следующий HTML код:

.. code-block:: html

	
		<ul class="nav nav-list">
			<li class="nav-header">Find a Category</li>
			<form>
			<label></label>
			<li><input  class="search-query span10" type="text" name="suggestion" value="" id="suggestion" /></li>
			</form>
		</ul>
	
		<div id="cats">
		</div>	

Здесь мы добавили поле для ввода с идентификатором ``id="suggestion"`` и div c идентификатором ``id="cats"``, в котором будет отображаться результат запроса. Нам не нужно добавлять кнопку, поскольку мы создадим обработчик события при отпускании клавиши в поле ввода, который отправит введенный запрос.

Добавляем AJAX, чтобы запросить подходящие категории
....................................................
Добавьте следующий JQuery код в ``js/rango-ajax.js``:

.. code-block:: javascript
	
	$('#suggestion').keyup(function(){
		var query;
		query = $(this).val();
		$.get('/rango/suggest_category/', {suggestion: query}, function(data){
                 $('#cats').html(data);
		});
	});

Здесь мы добавили обработчик события к HTML элементу input с идентификатором ``id="suggestion"``, срабатывающий при событии - отпускание клавиши. Когда это происходит содержимое поля ввода извлекается и передается в переменную ``query``. Затем создается AJAX GET запрос, обращающийся к ``/rango/category_suggest/`` и передающий ``query`` в качестве параметра. При успешном запросе, с помощью функции html обновляется HTML элемент с идентификатором id="cats", т. е., div, новым списком категорий.

Упражнения
----------
Чтобы пользователь мог легко и быстро добавить страницу в категорию, поместите кнопку "Add" рядом с каждым результатом поиска.

* Обновите шаблон ``category.html``:
	- Добавьте небольшую кнопку рядом с каждым результатом поиска (если пользователь аутентифицирован), задайте для каждой кнопки атрибуты data-catid, data-title и data-url, чтобы их можно было выбрать с помощью JQuery.
	- Разместите элемент <div> с идентификатором ``id="page"`` рядом со страницами в категории, чтобы его можно было обновить при добавлении страниц.
	- Если хотите можете удалить ссылку на кнопку добавления страницы.

* Создайте представление auto_add_page, которое принимает параметризированный GET запрос (с параметрами title, url, catid) и добавляет страницу с такими параметрами в категорию
* Сопоставьте URL представлению ``url(r'^auto_add_page/$', views.auto_add_page, name='auto_add_page'),``
* Добавьте обработчик события к кнопке с помощью JQuery - после добавления страницы скройте кнопку. Также можно обновить страницы, приведенные на странице категории.

Подсказки к упражнениям
.......................
HTML код шаблона: 

.. code-block:: html
	
	{% if user.is_authenticated %}
		<button data-catid="{{category.id}}" data-title="{{ result.title }}" data-url="{{ result.link }}" class="rango-add btn btn-mini btn-info" type="button">Add</button>
	{% endif %}

JQuery код:

.. code-block:: javascript

	$('.rango-add').click(function(){
	    var catid = $(this).attr("data-catid");
		var url = $(this).attr("data-url");
        	var title = $(this).attr("data-title");
        	var me = $(this)
	    	$.get('/rango/auto_add_page/', {category_id: catid, url: url, title: title}, function(data){
	                   	$('#pages').html(data);
	                   	me.hide();
	               		});
	    				});

Отметим, что здесь мы связали обработчик события - нажатие на кнопку - со всеми кнопками с классом  ``rango-add``.

Код представления:

.. code-block:: python
	
	@login_required
	def auto_add_page(request):
	    cat_id = None
	    url = None
	    title = None
	    context_dict = {}
	    if request.method == 'GET':
	        cat_id = request.GET['category_id']
	        url = request.GET['url']
	        title = request.GET['title']
	        if cat_id:
	            category = Category.objects.get(id=int(cat_id))
	            p = Page.objects.get_or_create(category=category, title=title, url=url)

	            pages = Page.objects.filter(category=category).order_by('-views')

	            # Добавляем наш список результатов в контекст шаблона под названиями страниц.
	            context_dict['pages'] = pages

	    return render(request, 'rango/page_list.html', context_dict)
	

