.. _bing-label:

Добавляем функциональные возможности: внешний поиск
===================================================
В настоящий момент наше Rango приложение можно считать практически завершенным - большинство требуемых от него функциональных возможностей реализовано. В этой главе мы подключим к Rango API Bing Search, чтобы пользователи могли осуществлять поиск страниц, а не просто использовать категории. Давайте начнем с регистрации учетной записи для использования Bing Search, затем создадим оболочку для вызова функции веб-поиска Bing перед его интеграцией в Rango.

API Bing Search
---------------
Bing Search API позволяет Вам встраивать результаты поиска поисковой системы Bing в Ваше собственное приложение. С помощью простого интерфейса Вы можете запросить результаты поиска от Bing серверов в XML или JSON форме. Возвращаемые данные могут быть обработаны XML или JSON анализатором, а результат затем выведен с помощью шаблона Вашего приложения.

Хотя Bing API может обрабатывать запросы различного вида, в этом учебном пособии мы сосредоточимся только на поиске, а также обработке JSON данных. Для использования Bing Search API Вам надо зарегистрироваться, чтобы получить *API ключ*. В настоящее время ключ позволяет осуществлять до 5000 запросов в месяц, что более чем достаточно для наших целей.

Регистрируемся для получения ключа Bing API
...........................................
Для получения Bing API ключа, Вы должны сначала зарегистрировать бесплатную учетную запись Microsoft. Учетная запись открывает доступ к широкому спектру услуг Microsoft. Если у Вас есть учетная запись Hotmail, то Вы уже зарегистрированы! Вы можете создать бесплатную учетную запись и войти в систему по адресу https://account.windowsazure.com.

После создания учетной записи, перейдите на страницу `Bing Search API магазина Windows Azure <https://datamarket.azure.com/dataset/5BA839F1-12CE-4CCE-BF57-A49D98D29A44>`_. Вверху экрана сначала необходимо нажать на кнопку *Sign In* (Входа в систему - Прим. переводчика) - но если Вы уже имеете зарегистрированную учетную запись Microsoft, то вводить свои данные опять не нужно. Если на кнопке написано  *Sign Out* (Выйти из системы - Прим. переводчика), Вы уже вошли в систему.

В правой нижней части страницы приведен список транзакций в месяц. В конце списка написано *5,000 транзакций/месяц*. Нажмите на кнопку *Sign up* справа - Вам станет доступна эта бесплатная услуга. Затем Вам дадут почитать *Условия использования* и если Вы согласны с ними нажмите *Sign Up*, чтобы продолжить. Затем будет показана страница подтверждающая, что Вы успешно подписались на использование этой услуги.

После этого, нажмите на ссылку *Data* в верхней части страницы. Вы должны увидеть список источников данных доступных через магазин Windows Azure. В верхней части списка должно быть *Bing Search API*, а также должно быть написано, что Вы *подписаны* на этот источник данных. Нажмите ссылку *use*, связанную с Bing Search API, расположенную справа на странице. Затем Вы должны увидеть на экране страницу, подобную той, которая показана на Рисунке :num:`fig-bing-explore`.

.. _fig-bing-explore:

.. figure:: ../images/bing-explore.png
	:figclass: align-center

	Страница тестирования услуги Bing Search API. На этом снимке экрана, *Primary Account Key (Первичный ключ учетной записи)* скрыт специально. Вы тоже должны держать в тайне Ваш ключ!

Эта страница позволяет Вам протестировать Bing Search API, заполнив поля слева. Например, поле *Query* позволяет Вам определить запрос, посылаемый API. Убедитесь, что в нижней части экрана Вы выбрали *Web*, чтобы выводились результаты только веб поиска. Обратите внимание, что URL внутри синего поля в верхней части страницы поменяется, если Вы измените настройки на странице. Запомните URL для поиска в Интернете. Позднее мы будем использовать его часть в нашем коде. Ниже дан пример URL, который осуществляет поиск в Интернете по запросу *rango*.

::
	
	https://api.datamarket.azure.com/Bing/Search/v1/Web?Query=%27rango%27

Мы должны также получить Ваш ключ API, чтобы серверы Bing могли Вас аутентифицировать при отправке запросов им. Чтобы получить ключ, найдите текст *Primary Account Key* в верхней части страницы и нажмите ссылку показать рядом с ним. После этого ключ будет показан. Мы будем использовать его позже - поэтому держите его в тайне! Если кто-то получит Ваш ключ, то сможет использовать Вашу квоту бесплатных запросов.


.. note:: На странице услуги Bing API Service также ведется учет того сколько бесплатных запросов в месяц у Вас осталось. Их можно увидеть в верхней части страницы.

Добавляем функцию поиска
------------------------
Чтобы добавить функцию поиска в Rango, мы сначала должны написать вспомогательную функцию для посылки запроса к Bing API. Эта функция должена принять запрос от конкретного пользователя и вернуть вызывающей функции список результатов поиска. Любые ошибки, возникающие во время запроса к API, должны быть учтены и обрабатываться в функции. Выделение функции поиска в вспомогательную функцию также обеспечивает хорошее разделение кода, связанного с Django, от кода для реализации функций поиска.

Для начала давайте создадим новый Python модуль под названием ``bing_search.py`` внутри каталога приложения ``rango``. Добавьте следующий код в файл. Прочитайте встроенные комментарии, чтобы понять, что делает функция.

.. code-block:: python
	
	import json
	import urllib, urllib2

	# Добавьте Ваш Bing API ключ в BING_API_KEY 

	BING_API_KEY = '<вставьте_bing_api_ключ_сюда>'

	def run_query(search_terms):
	    # Определяем основную часть URL адреса
	    root_url = 'https://api.datamarket.azure.com/Bing/Search/'
	    source = 'Web'

	    # Указываем сколько результатов поиска должно отображаться на странице.
	    # Смещение указывает позицию в списке результатов поиска.
	    # Если results_per_page = 10 и offset = 11, то нужно переходить на вторую страницу.
	    results_per_page = 10
	    offset = 0

	    # Заключаем в кавычки наши условия запроса, как этого требует Bing API.
	    # Запрос, который мы будем использовать, хранится в переменной query.
	    query = "'{0}'".format(search_terms)
	    query = urllib.quote(query)

	    # Создаем оставшуюся часть URL для нашего запроса.
	    # Выбираем в качестве формата для результатов запроса JSON и настраиваем другие параметры.
	    search_url = "{0}{1}?$format=json&$top={2}&$skip={3}&Query={4}".format(
	        root_url,
	        source,
	        results_per_page,
	        offset,
	        query)

	    # Настройка аутентификации для доступа к Bing серверам.
	    # username ДОЛЖНО быть пустой строкой
	    username = ''


	    # Создаем 'менеджер паролей', который осуществит аутентификацию за нас.
	    password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
	    password_mgr.add_password(None, search_url, username, BING_API_KEY)

	    # Создаем список результатов, который мы будем заполнять
	    results = []

	    try:
	        # Подготовка подключения к Bing серверам.
	        handler = urllib2.HTTPBasicAuthHandler(password_mgr)
	        opener = urllib2.build_opener(handler)
	        urllib2.install_opener(opener)

	        # Подключение к серверу и считывание сгенерированнго сервером ответа.
	        response = urllib2.urlopen(search_url).read()

	        # Преобразование строки ответа от сервера в объект-словарь Python.
	        json_response = json.loads(response)

	        # Перебираем в цикле каждую страницу ответа и заполняем наш список результатов.
	        for result in json_response['d']['results']:
	            results.append({
	            'title': result['Title'],
	            'link': result['Url'],
	            'summary': result['Description']})

	    # Перехватываем исключение URLError - произошла ошибка при подключении!
	    except urllib2.URLError as e:
	        print "Error when querying the Bing API: ", e

	    # Возвращаем список результатов вызывающей функции.
	    return results

Логика вышеприведенной функции может быть в общих чертах разделана на шесть основных задач:

* Во-первых, функция подготавливается к подключению Bing, создавая URL для запроса.
* Затем функция подготавливается к аутентификации, используя Ваш Bing API ключ. Убедитесь, что Вы заменили строку ``<вставьте_bing_api_ключ_сюда>`` на реальный Bing API ключ, в противном случае произойдет ошибка при аутентификации! 
* Затем мы подсоединяемся к Bing API, используя команду ``urllib2.urlopen(search_url)``. Ответ от сервера считывается и сохраняется в виде строки.
* Эта строка затем анализируется и преобразуется в объек-словарь Python, используя Python пакет ``json``.
* В цикле мы перебираем каждый из возвращенных результатов и заполняем словарь ``results``. Для каждого результата мы извлекаем ``title`` (заголовок) страницы, ссылку или URL и краткое ``summary`` (описание) каждого возвращенного результата.
* Функция возвращает словарь.

Учтите, что результаты передаются Bing серверами в виде JSON. Это происходит потому, что мы явно указали использовать JSON в нашем первоначальном запросе - посмотрите на определенную нами переменную ``search_url``. Если произошла ошибки при доступе к Bing серверам, то она выводится в терминал с помощью оператора ``print`` в блоке ``except``.

.. note:: Существует множество различных параметров, не рассматриваемых здесь, которые может обрабатывать Bing Search API. Если Вы хотите узнать как можно настроить результаты поиска, ознакомьтесь с `Руководством по миграции и FAQ Bing Search API <http://datamarket.azure.com/dataset/bing/search>`_.

Безопасное хранение Вашего API ключа
------------------------------------
Если Вы выкладываете свой код в публичный репозиторий на GibHub или другом подобном сайте, необходимо предпринять некоторые меры предосторожности, связанные с общим доступом к Вашему API ключу. Одним из решений является создание нового файла под названием ``keys.py``, в котором находится переменная ``BING_API_KEY``. Затем нужно импортировать ``BING_API_KEY`` в файл ``bing_search.py``. Обновите Ваш файл ``.gitignore`` и допишите в него ``keys.py``, чтобы ``keys.py`` не добавлялся в репозиторий. Таким образом, ключ будет храниться только локально.

Упражнения
----------
Взяв за основу функцию Bing Search API, которую мы создали выше, попытайтесь выполнить следующие упражнения.
* Если Вы используете публичный репозиторий, реорганизуйте код таким образом, чтобы Ваш API ключ не был общедоступным.
* Добавьте функцию main() в *bing_search.py*, чтобы протестировать BING Search API.
* Подсказка: добавьте следующий код, чтобы при вводе в терминале ``python bing_search.py``, вызывалась функция ``main()``:

.. code-block:: python

	if __name__ == '__main__':
	    main()
	
	
* Функция main должна позволять пользователю вводить запрос (из командной строки) и затем выполнять запрос к BING API, используя метод run_query и выводить на экран первые десять результатов поиска.
* Выведите на экран номер, название и URL каждого результата.


Добавляем поиск в Rango
-----------------------
Чтобы добавить функцию внешнего поиска, нам необходимо выполнить следующие шаги:
#. Сначала нужно создать шаблон ``search.html``, который наследует наш шаблон ``base.html``. В шаблоне ``search.html`` будет находиться HTML ``<форма>`` для считывания пользовательского запроса, а также код шаблона для отображения результатов.
#. Затем создайте представление для обработки шаблона ``search.html``, а также вызова функции ``run_query()``, которая была определена выше.

Добавляем шаблон для поиска
...........................
Давайте сначала создадим наш шаблон ``search.html``. Добавьте следующую HTML разметку и код шаблонов Django.

.. code-block:: html
	
	{% extends "base.html" %}

	{% load staticfiles %}

	{% block title %}Search{% endblock %}

	{% block body_block %}

	    <div class="page-header">
	        <h1>Search with Rango</h1>
	    </div>

	    <div class="row">

	        <div class="panel panel-primary">
	            <br/>

	            <form class="form-inline" id="user_form" method="post" action="{% url 'search' %}">
	                {% csrf_token %}
	                <!-- Отображаем элементы поисковой формы здесь -->
	                <input class="form-control" type="text" size="50" name="query" value="" id="query" />
	                <input class="btn btn-primary" type="submit" name="submit" value="Search" />
	                <br />
	            </form>

	            <div class="panel">
	                {% if result_list %}
	                    <div class="panel-heading">
	                    <h3 class="panel-title">Results</h3>
	                    <!-- Отображаем результаты поиска в виде упорядоченного списка -->
	                    <div class="panel-body">
	                        <div class="list-group">
	                            {% for result in result_list %}
	                                <div class="list-group-item">
	                                    <h4 class="list-group-item-heading"><a href="{{ result.link }}">{{ result.title }}</a></h4>
	                                    <p class="list-group-item-text">{{ result.summary }}</p>
	                                </div>
	                            {% endfor %}
	                        </div>
	                    </div>
	                {% endif %}
	                </div>
	            </div>
	 </div>

	{% endblock %}

Вышеприведенный код шаблона выполняет две основные задачи:
	#. В любой ситуации шаблон отображает поле для поиска и кнопки поиска в HTML ``<форме>`` пользователям, чтобы они могли ввести и отправить свои поисковые запросы.
	#. Если объект ``results_list`` был передан в контекст шаблона, то шаблон выводит все элементы объекта, отображая результаты, хранящиеся в нём.

Чтобы стилизовать HTML мы будем использовать Bootstrap: панели, http://getbootstrap.com/components/#panels, списки http://getbootstrap.com/components/#list-group, и формы, расположенные на одной линии http://getbootstrap.com/css/#forms-inline.

Как скоро будет видно из нашего представления, соответствующего шаблону, объект ``results_list`` будет передаваться в шаблон только, когда существуют результаты поиска. Их не будет, например, когда пользователь попадает на страницу поиска в первый раз - поскольку он ничего не ввел в качестве запроса!

Добавляем представление
.......................
После добавления поискового шаблона, мы можем добавить представление, который отвечает за отображение нашего шаблона. Добавить следующее представление ``search()`` в модуль ``views.py`` Rango.

.. code-block:: python
	
	def search(request):

	    result_list = []

	    if request.method == 'POST':
	        query = request.POST['query'].strip()

	        if query:
	            # Запускаем нашу Bing функцию, чтобы получить список результатов!
	            result_list = run_query(query)

	    return render(request, 'rango/search.html', {'result_list': result_list})
		
С учетом того, что Вы знаете, этот код должен быть Вам понятен. Единственным важным отличием его от других представлений является вызов функции ``run_query()``, которая была определена ранее в этой главе. Для её вызова нужно также импортировать модуль ``bing_search.py``. Убедитесь, что перед запуском скрипта, Вы добавили следующий оператор импорта в начале модуля ``views.py``.

.. code-block:: python
	
	from rango.bing_search import run_query

Также Вы должны:
#. Добавить сопоставление между представлением ``search()`` и URL ``/rango/search/``, назвав его ``name='search'``.
#. Обновить навигационную панель ``base.html``, добавив в него ссылку на страницу поиска. Не забывайте использовать тег шаблона ``url``, для получения адреса ссылки.

.. note:: Из `соответствующей статьи на Википедии <http://en.wikipedia.org/wiki/Application_programming_interface>`_, 
*Интерфейс Программирования Приложений (API)* определяет как программы должны взаимодействовать друг с другом. Что касается веб-приложений, API считается набор HTTP запросов, а также определение структуры ответных сообщений, которые могут возвращаться при каждом запросе. Любая более-менее значимая услуга, предоставляемая через Интернет, имеет своё собственное API - оно не ограничивается только поиском в Интернете. Чтобы узнать больше о веб API, прочитайте `отличное учебное пособие по API, написанное Луисом Реем <http://blog.luisrei.com/articles/rest.html>`_.



