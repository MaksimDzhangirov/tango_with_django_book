Работа с шаблонами
==================
Ранее мы создали несколько Django HTML шаблонов для различных страниц в приложении. Вы, наверное, заметили, что в этих шаблонах существует много повторяющегося HTML кода.

Хотя большинство сайтов имеют много повторяющихся элементов (т. е., хедер, сайдбары, футеры и т. д.), повторять HTML в каждом шаблоне не самый лучший способ. Вместо того, чтобы бездумно копировать и вставлять повторяющиеся части кода, мы можем минимизировать повторения в нашем коде, используя *наследование шаблонов*, поддерживаемое Языком Шаблонов Django.

Основной принцип наследования шаблонов заключается в следующем:

#. Определить повторяющиеся части на каждой странице для Вашего приложения  (т. е., хедер, сайдбар, футер, элементы внутри основного содержимого страницы)
#. В *базовом шаблоне* создать каркас стандартной страницы, добавив в него любые общие элементы (т. е., авторские права в футере, логотип и название, которые обычно располагаются в хедере), а затем определите *блоки*, которые будут меняться в зависимости от просматриваемой пользователем страницы.
#. Создайте конкретный шаблон - наследуемый от базового шаблона - и укажите содержимое для каждого блока.

Повторяющийся HTML код и базовый шаблон
---------------------------------------
Учитывая шаблоны, которые мы создали ранее, очевидно, что мы повторяли в них много HTML кода. Ниже мы абстрагируемся от деталей, характерных для конкретных страниц, чтобы показать каркас, который будет повторяться в каждом шаблоне.

.. code-block:: html
	
	<!DOCTYPE html>
	
	<html>
	    <head>
	        <title>Rango</title>
	    </head>
	
	    <body>
	        <!-- Содержимое характерное для каждой конкретной страницы будет размещаться здесь. -->
	    </body>
	</html>

Пусть это будет наш базовый шаблон для начала; сохраните его как ``base.html`` в каталоге ``templates`` (например, ``templates/base.html``).

.. note:: Вы всегда должны стремиться поместить как можно больше повторяющихся частей в Ваши базовые шаблоны. Хотя в первый раз это будет сделать довольно сложно, время которое Вы сэкономите при поддержке Ваших сайтов в будущем значительно превзойдет эти начальные накладные расходы. Подумайте что проще: изменить разметку в одном файле или нескольких?

.. warning:: Помните, что объявление ``<!DOCTYPE html>`` на Вашей странице должно размещаться на первой строке! В противном случае Вы не будете соблюдать нормы W3C HTML5.

Шаблоны блоков
--------------
Теперь когда мы определили наш базовый шаблон, можно подготовить его для последующего наследования. Для этого необходимо добавить тег шаблона, чтобы указать, что может быть изменено в базовом шаблоне - это можно сделать с помощью *блоков*.

Добавим блок ``body_block`` в базовый шаблон следующим образом:

.. code-block:: html
	
	<!DOCTYPE html>
	
	<html>
	    <head lang="en">
		<meta charset="UTF-8">
	        <title>Rango</title>
	    </head>
	
	    <body>
	        {% block body_block %}{% endblock %}
	    </body>
	</html>

Вспомните, что стандартные команды языка шаблонов Django обозначаются тегами ``{%`` и ``%}``. Чтобы начать блок используется команда ``block <ИМЯ>``, где ``<ИМЯ>`` - название блока, который Вы хотите создать. Также необходимо убедиться, что Вы закрыли блок командой ``endblock``, заключенной в теги языка шаблона Django.

Вы можете также указать "содержимое по умолчанию" для Ваших блоков, например:

.. code-block:: html
	
	{% block body_block %}This is body_block's default content.{% endblock %}

При создании шаблона для каждой страницы, мы наследуем шаблон ``base.html`` и переопределяем содержимое ``body_block``. Вы можете поместить в Ваших шаблонов столько блоков, сколько захотите. Например, Вы можете создать блок для заголовка страницы, футера, сайдбара и т. д.. Блоки действительно эффективный инструмент системы шаблонов Django, поэтому чтобы узнать больше о них, ознакомьтесь с `официальной Django документацией по шаблонам <https://docs.djangoproject.com/en/1.7/topics/templates/#id1>`_.

Дальнейшее абстрагирование
..........................
Теперь, когда Вы имеете представление о Django блоках, давайте ещё больше абстрагируем наш базовый шаблон. Заново откройте шаблон ``base.html`` и измените его, чтобы он выглядел следующим образом.

.. code-block:: html
	
	<!DOCTYPE html>
	
	<html>
	    <head>
	        <title>Rango - {% block title %}How to Tango with Django!{% endblock %}</title>
	    </head>

	    <body>
	        <div>
	            {% block body_block %}{% endblock %}
	        </div>
	        
	        <hr />
	        
	        <div>
	            <ul>
	            {% if user.is_authenticated %}
	                <li><a href="/rango/restricted/">Restricted Page</a></li>
	                <li><a href="/rango/logout/">Logout</a></li>
	                <li><a href="/rango/add_category/">Add a New Category</a></li>
	            {% else %}
	                <li><a href="/rango/register/">Register Here</a></li>
	                <li><a href="/rango/login/">Login</a></li>
	            {% endif %}
	                
	                <li><a href="/rango/about/">About</a></li>
	            </ul>
	        </div>
	    </body>
	</html>

Здесь мы использовали два новых элемента в шаблоне.

* Во-первых - новый блок Django шаблона: ``title``. Он позволяет нам указать разный заголовок для каждой страницы, наследуемой от нашего базового шаблона. Если наследуемая страница не изменит этот блок, то будет использоваться заголовок по умолчанию ``Rango - How to Tango with Django!``
* Во-вторых - мы перенесли список ссылок из шаблона ``index.html`` и поместили его в HTML тег ``<div>`` ниже нашего блока ``body_block``. Таким образом, ссылки существующие на всех страницах будут наследоваться из базового шаблона. Перед ссылками размещается горизонтальная линия (тег ``<hr />``), который визуально разделяет содержимое блока body_block`` и ссылки.

Также обратите внимание, что мы заключили блок ``body_block`` в HTML тег ``<div>`` - мы поясним назначение тега ``<div>`` в Главе :ref:`css-course-label`. Наши ссылки также преобразуются в неупорядоченный HTML список, используя теги ``<ul>`` и ``<li>``.


Наследование шаблонов
---------------------
Теперь, когда мы создали базовый шаблон с помощью блока, мы можем обновить шаблоны, так, чтобы они наследовались от базового. Например, давайте модифицируем шаблон ``rango/category.html``.

Для этого сначала удалите весь повторяющийся HTML код, оставив только HTML и команды/теги шаблона, характерные для этой страницы. Затем в начале шаблона, добавьте следующую строку кода:

.. code-block:: html
	
	{% extends 'base.html' %}

Команда ``extends`` принимает один параметр, шаблон, который будет расширен/унаследован (т. е., ``rango/base.html``). Теперь можно изменить шаблон ``category.html``, чтобы он выглядел, как показано в следующем примере.

.. note:: Параметр, который Вы передаете команде ``extends``, должен задаваться относительно каталога ``templates`` Вашего проекта. Например, все шаблоны, которые мы будет использовать для Rango должны наследоваться от ``rango/base.html``, а не ``base.html``.

.. code-block:: html
	
	{% extends 'base.html' %}
	
	{% load staticfiles %}
	
	{% block title %}{{ category_name }}{% endblock %}
	
	{% block body_block %}
	    <h1>{{ category_name }}</h1>
	    {% if category %}
	    	{% if pages %}
	    	<ul>
	        	{% for page in pages %}
	        	<li><a href="{{ page.url }}">{{ page.title }}</a></li>
	        	{% endfor %}
	    		</ul>
	    	{% else %}
	        	<strong>No pages currently in category.</strong>
	    		{% endif %}
	    
	    	{% if user.is_authenticated %}
	       		<a href="/rango/category/{{category.slug}}/add_page/">Add a Page</a>
			{% endif %}
		{% else %}
			 The specified category {{ category_name }} does not exist!
	    {% endif %}
		
	{% endblock %}

Теперь после наследования шаблона ``base.html``, шаблон ``category.html`` содержит только команду ``extends``, блок ``title`` и блок ``body_block``. Не нужно создавать заново HTML документ, поскольку эту же сделано в ``base.html``. Все что нужно сделать - это подключить дополнительные элементы к базовому шаблону для создания законченного HTML документа, который посылается браузеру клиента.

.. note:: 

	Шаблоны очень мощный инструмент и Вы даже можете создавать свои собственные теги шаблонов. Здесь мы показали, как можно минимизировать повторяющуюся структуру HTML в наших шаблонах.

	Однако шаблоны могут также использоваться для минимизации кода в представлениях Вашего приложения. Например, если Вы хотите добавить содержимое из базы данных на каждую страницу Вашего приложения, Вы можете создать шаблон, который вызывает определенное представление для обработки повторяющейся части Ваших страниц. Это избавит Вас от необходимости вызывать Django ORM функции, которые извлекают требуемые данные для шаблона, в каждом представлении.

 	Чтобы узнать больше о дополнительных функциях, предоставляемых языком шаблонов Django, прочтите официальную `Django документацию по шаблонам <https://docs.djangoproject.com/en/1.7/topics/templates/>`_. 

	
Ссылки на URL в шаблонах
------------------------
Ранее мы непосредственно кодировали URL страниц/представлений, которые мы хотим показать в шаблоне, т. е.,  ``<a href="/rango/about/"> About  </a>``. Однако предпочтительней использовать тег шаблона ``url`` для поиска URL в файлах ``urls.py``. При использовании этого шаблона ссылка на URL будет выглядеть следующим образом:

.. code-block:: html

	<li><a href="{% url 'about' %}">About</a></li>
	
Механизм обработки шаблонов Django просмотрит файлы ``urls.py`` в поиске URL ``c названием  равным "about"`` (затем происходит обратный поиск фактического URL). Это означает, что если мы изменим URL сопоставления в ``urls.py``, то не нужно будет просмотреть все шаблоны и обновить адреса URL в них. Если мы не задали нашему URL шаблону название, то мы можем непосредственно сослаться на него как:

.. code-block:: html

	<li><a href="{% url 'rango.views.about' %}">About</a></li>
	
В этом случае необходимо указать приложение и затем представление about.

Теперь Вы можете модифицировать базовый шаблон, используя тег шаблона ``url``; при этом ссылки в базовом шаблоне будут задаваться с помощью следующего кода:

.. code-block:: html
	
	
	<div>
		<ul>
	    {% if user.is_authenticated %}
	    	<li><a href="{% url 'restricted' %}">Restricted Page</a></li>
	        <li><a href="{% url 'logout' %}">Logout</a></li>
	        <li><a href="{% url 'add_category' %}">Add a New Category</a></li>
	    {% else %}
	    	<li><a href="{% url 'register' %}">Register Here</a></li>
	        <li><a href="{% url 'login' %}">Login</a></li>
	    {% endif %}

	    <li><a href="{% url 'about' %}">About</a></li>
	    </ul>
	</div>

Заметьте, что в Вашем шаблоне ``index.html``, существует URL шаблон с параметром, т. е. URL/представление ``category`` принимает ``category.slug`` в качестве параметра. В этом случае Вы можете передать тегу URL шаблона название URL/представления и slug, т. е., записать его в виде {% url 'category' category.slug %} в шаблоне:

.. code-block:: html


	{% for category in categories %}
	    <li><a href="{% url 'category' category.slug %}">{{ category.name }}</a></li>
	{% endfor %}


#TODO(leifos): The official tutorial provides an overview of how to use the url template tag, http://django.readthedocs.org/en/latest/intro/tutorial03.html and the answer at stackoverflow was helpful too: http://stackoverflow.com/questions/4599423/using-url-in-django-templates

#TODO(leifos): Also point out how the urls can be placed in a namespace and referenced accordingly, see http://django.readthedocs.org/en/latest/intro/tutorial03.html 


Упражнения
----------
Теперь после того как Вы изучили эту главу, мы подготовили для Вас несколько упражнений. После их выполнения, вы должны стать профессионалом в области использования шаблонов Django.

* Измените все остальные существующие шаблоны внутри приложения Rango так, чтобы они наследовались от шаблона ``base.html``. Используйте ту же последовательность действий, которая была показана выше. После выполнения этой задачи все Ваши шаблоны должны наследовать ``base.html`` как показано на Рисунке :num:`fig-rango-template-inheritance`. При этом убедитесь, что Вы удалили ссылки на Ваш шаблон ``index.html``. Они нам больше не нужны! Также Вы можете удалить ссылку на домашнюю страницу Rango в шаблоне ``about.html``.
* Преобразуйте страницу с ограниченным доступом так, чтобы она использовала шаблон. Назовите шаблон ``restricted.html`` и убедитесь, что она тоже наследует наш шаблон ``base.html``.
* Измените все URL в ссылках, используя тег шаблона ``url``.
* Добавьте ещё одну ссылку в наш растущий список, которая позволит пользователям вернуться обратно на главную страницу Rango с любой другой страницы на сайте.

.. warning:: Не забудьте добавить ``{% load static %}`` в начале каждого шаблона, что позволит использовать статические медиа файлы. Если не сделать этого, то Вы получите ошибку! Модули шаблонов Django должны импортироваться по отдельности для каждого шаблона, которым они требуются - *Вы не можете использовать модули, добавленные в шаблонах, которые используются для наследования!*

.. _fig-rango-template-inheritance:

.. figure:: ../images/rango-template-inheritance.svg
	:figclass: align-center
	
	Диаграмма классов, показывающая как Ваши шаблоны должны наследовать ``base.html``.

.. note:: После выполнения этих упражнений, все шаблоны должны наследовать ``base.html``. Просмотрите ещё раз содержимое ``base.html``. Объект ``user`` - находящийся в контексте Django запроса - используется, чтобы определить вошел ли в систему пользователь Rango (используя ``user.is_authenticated``). Поскольку все шаблоны Rango должны наследовать этот базовый шаблон, можно сказать, что *все шаблоны Rango теперь зависят от наличия доступа к контексту запроса*.

	Из-за этой новой зависимости, необходимо проверить каждое Django представление в Rango. Убедитесь, что контекст каждого запроса доступен механизму обработки шаблонов Django. В этом учебном пособии, мы используем для этого функцию ``render()``, передавая request в качестве параметра. Если не сделать этого, то Ваши представления могут неправильно обработаться - страница для авторизованных пользователей ничем не будет отличаться от страницы для не авторизованных! 

	В качестве примера проверок, которые Вам необходимо выполнить, взгляните на представление ``about``. Сначала оно было реализовано с помощью жестко заданной строки, как показано ниже. Обратите внимание, что мы посылаем браузеру клиента только строку - мы не передаем запрос в виде параметра ``request``.
	
	.. code-block:: python
		
		def about(request):
		    return HttpResponse('Rango says: Here is the about page. <a href="/rango/">Index</a>')
	
	При использовании шаблона, мы вызываем функцию ``render()`` и передаем ей объект ``request``. Это позволяет механизму обработки шаблонов получить доступ к объектам, таким как ``user``, и определить вошел ли пользователь в систему (т. е., аутентифицирован ли он).
	
	.. code-block:: python
		
		def about(request):
		    
		    return render(request, 'rango/about.html', {})
	
	Напомним, что последний параметр функции ``render()`` - это словарь, который Вы можете использовать для передачи дополнительных данных в механизм обработки шаблонов Django. Поскольку у нас нет дополнительных данных, которые нужно предать, мы используем пустой словарь. Просмотрите Раздел :ref:`adding-a-template-label`, чтобы освежить в памяти использование функции ``render()``.
		
	
	
	
