.. _deploy-label:

Развертывание Вашего проекта
============================
В этой главе дается пошаговое руководство по развертыванию Вашего приложения Django. Мы будем развертывать приложения на `PythonAnywhere <https://www.pythonanywhere.com/>`_, онлайновой ИСР и службе веб хостинга. Служба обеспечивает браузерный доступ к интерфейсам командной строки Python и Bash, установленных на сервере, таким образом, Вы можете взаимодействовать со службами PythonAnywhere так, как будто это обычное окно терминала на Вашем компьютере. В настоящее время PythonAnywhere предлагает бесплатную учетную запись с достаточным объемом дискового пространства и процессорного времени, чтобы настроить и запустить приложение Django.


.. note:: Вы можете выполнить действия, описанные в этой главе, независимо от других (если Вы имеете некоторое представление о Git; в противном случае просмотрите главу об использовании Git).

Создаем учетную запись PythonAnywhere
-------------------------------------
Сначала `зарегистрируйте учетную запись типа Beginner на сайте PythonAnywhere <https://www.pythonanywhere.com/pricing/>`_. Если Ваше приложение станет популярным, Вы всегда можете обновить свой аккаунт позднее, чтобы получить больше дискового пространства и процессорного времени, а также множество других преимуществ (например, определенные домены хостинга и SSH возможности).

После создания учетной записи, у Вас будет свой собственный сайт во всемирной паутине по адресу ``http://<username>.pythonanywhere.com``, где ``<username>`` - это Ваше имя пользователя на сайте PythonAnywhere. Именно с этого URL будет доступно Ваше приложение, размещенное на сайте.

Веб интерфейс PythonAnywhere
----------------------------
Веб интерфейс PythonAnywhere содержит *инструментальная панель*, которая в свою очередь состоит из набора вкладок, позволяющих Вам управлять Вашим приложением. Вкладки, показанные на Рисунке :num:`fig-deploy-pythonanywhere`, таким образом, панель состоит из:

* вкладки *Consoles* (*Консоли*), позволяющей Вам создавать и взаимодействовать с консольными окнами Python и Bash;
* вкладки *Files* (*Файлы*), позволяющей Вам загружать и управлять файлами внутри Вашего дискового пространства;
* вкладки *Web* (*Веб*), позволяющей Вам конфигурировать настройки для размещаемого на сайте приложения;
* вкладки *Schedule* (*Расписание*), позволяющее Вам устанавливать задания, которые будут выполнены в определенные моменты времени; и
вкладка *Databases* (*Базы данных*), позволяющая Вам настраивать экземпляр СУБД MySQL для Ваших приложений, если он Вам необходим.

Из пяти предоставляемых вкладок, мы будем работать главным образом с вкладками *Консоли* и *Веб*. В `PythonAnywhere вики <https://www.pythonanywhere.com/wiki/>`_ даются подробные пояснения о том как использовать другие вкладки.

.. _fig-deploy-pythonanywhere:

.. figure:: ../images/deploy-pythonanywhere.png
	:figclass: align-center

	Инструментальная панель PythonAnywhere, в которой открыта вкладка *Консоли*.


.. _virtual-environment:

Создаём виртуальное окружение
-----------------------------
В рамках стандартной установки, вместе с PythonAnywhere поставляется ряд предустановленных пакетов (т. е., Python 2.7.4 и Django 1.3). Однако, поскольку мы используем другие версии, нам необходимо настроить виртуальное окружение и запустить наше собственное приложение внутри него. Поскольку наш код совместим с Python 2.7.4 мы можем использовать его, но мы должны настроить нашу виртуальную среду, чтобы она использовала Django 1.7.

Сначала откройте консоль, используя вкладку *Консоли* PythonAnywhere, нажав на ссылку *Bash*. В открывшемся окне терминала введите следующие команды.

::
	
	$ source virtualenvwrapper.sh
	$ mkvirtualenv rango

Первая команда импортирует оболочку виртуального окржения. Оболочка имеет ряд расширений, введенных `Doug Hellman <http://doughellmann.com/>`_ в первоначальный инструмент ``virtualenv``, которые упрощают нам создание, удаление и использование виртуальных сред. Вторая команда создает новое виртуальное окружение - ``rango``. Этот процесс должен занять некоторое время, после чего Вы увидите изменившееся приглашение командной строки.

::
	
	(rango)16:38 ~ $

Обратите внимание на наличие слова ``(rango)`` по сравнению с Вашей предыдущей командной строкой. Это означает, что мы активизировали виртуальную среду ``rango`` и любые установленные пакеты будут доступны только в этом окружении, не затрагивая остальную систему. Если Вы затем выполните команду ``ls -la``, то увидите, что был создан каталог ``.virtualenvs``. Это каталог, в котором будут сохраняться все Ваши виртуальные окружения и связанные с ними пакеты. Для завершения настройки, выполните команду ``which pip``. Она выведет путь, где расположен активный двоичный исходник ``pip`` - вероятно внутри ``.virtualenvs`` и ``rango``, как показано ниже.

::
	
	/home/<username>/.virtualenvs/test/bin/pip

Теперь мы можем настроить нашу виртуальное окружение, установив требуемые пакеты для нашего приложения Rango. Установка может занять много времени из-за ограниченного процессорного времени, поэтому придется потерпеть. Установите все требуемые пакеты:

::
	
	$ pip install -U django==1.7
	$ pip install pillow
	$ pip install django-registration-redux
	$ pip install django-bootstrap-toolkit
	

Кроме того, Вы можете использовать команду ``pip freeze > requirements.txt`` для сохранения своей текущей среды разработки и затем в PythonAnywhere, ввести ``pip install -r requirements.txt``, чтобы сразу установить все пакеты.

После установки всех пакетов, проверьте, что был установлен Django с помощью команды ``which django-admin.py``. Вы должны увидеть примерно следующее:

::
	
	/home/<username>/.virtualenvs/rango/bin/django-admin.py

.. note:: В PythonAnywhere также существует руководство по настройке виртуальных окружений, смотри https://www.pythonanywhere.com/wiki/VirtualEnvForNewerDjango.


Переключение между виртуальными окружениями
...........................................
Переключаться между виртуальными окружениями достаточно легко. Прежде всего необходимо убедиться, что был загружен ``virtualenvwrapper.sh`` с помощью команды ``source virtualenvwrapper.sh``.

Вместо того, чтобы делать это каждый раз, когда Вы открываете консоль, Вы можете добавить его в Ваш профиль ``.bashrc``, который расположен в Вашем домашнем каталоге. Таким образом команда будет выполняться автоматически каждый раз, когда Вы запускаете новое окно консоли Bash. Любые открытые Bash консоли нужно закрыть, чтобы изменения вступили в силу.

После этого, Вы можете запустить уже существующее виртуальное окружение с помощью команды ``workon``. Чтобы загрузить приложение Rango, введите:

::
	
	16:48 ~ $ workon rango
	
где ``rango`` можно заменить на название виртуального окружения, которое Вы хотите использовать. Ваше приглашение командной строки изменится, указывая, что Вы работаете в виртуальном окружении.

::
	
	(rango) 16:49 ~ $

Чтобы выйти из виртуального окружения, используйте команду ``deactivate``. При этом из Вашего приглашения командной строки должен исчезнуть префикс ``(rango)`` как показано ниже.

::
	
	(rango) 16:49 ~ $ deactivate 
	16:51 ~ $

Клонируем Ваш Git репозиторий
-----------------------------
Теперь после настройки Вашего виртуального окружения для приложения Rango, Вы можете клонировать Ваш Git репозиторий, для получения копии Ваших файлов проекта. Осуществите клонирование Вашего репозитория, выполнив следующую команду из Вашего домашнего каталога:

::
	
	$ git clone https://<USERNAME>:<PASSWORD>@github.com/<OWNER>/<REPO_NAME>.git

где Вам нужно заменить
- ``<USERNAME>`` на имя пользователя Вашей учетной записи GitHub;
- ``<PASSWORD>`` на пароль от Вашей учетной записи GitHub;
- ``<OWNER>`` на имя пользователя, который является владельцем репозитория; и
- ``<REPO_NAME>`` на название репозитория Вашего проекта.

Если Вы не размещали Ваш код в Git репозитории, Вы можете клонировать нашу версию, используя следующую команду:

::
	
	16:54 ~ $ git clone https://github.com/leifos/tango_with_django17.git
	
	
#TODO(leifos): upload code to github

.. note:: Не важно клонируете ли Вы репозиторий в Вашей новой виртуальной среде или нет. Вы только создаёте файлы в Вашем дисковом пространстве, которые не требуют особой настройки Python.

Настройка базы данных
.....................
После клонирования файлов, Вы должны подготовить базу данных. Мы будем использовать модуль ``populate_rango.py``, который создали ранее в этой книге. При запуске этого модуля, Вам нужно убедиться, что Вы используете виртуальное окружение ``rango`` (для этого выполните команду ``workon rango``). Из вашего домашнего каталога, перейдите в каталог ``tango_with_django`` и выполните следующие команды:

::
	
	
	(rango) 16:55 ~/tango_with_django $ python manage.py makemigrations rango
	(rango) 16:55 ~/tango_with_django $ python manage.py migrate
	(rango) 16:56 ~/tango_with_django $ python populate_rango.py
	(rango) 16:57 ~/tango_with_django $ python manage.py createsuperuser
	
Как уже говорилось ранее в этой книге, первая команда создает миграции для приложения Rango, затем команда migrate создает базу данных SQLlite3. После создания базы данных она может быть заполнена и создан суперпользователь.

Настройка Вашего веб приложения
-------------------------------
Теперь после настройки базы данных, мы можем сконфигурировать NGINX веб-сервер PythonAnywhere, который будет обслуживать Ваше приложение. В веб интерфейсе PythonAnywhere перейдите в *инструментальную панель* и нажмите на вкладку *Веб*. В левой части появившейся страницы, нажимите кнопку *Add a new web app.*

Появится всплывающее окно. Следуйте инструкциям на экране и выберите вариант *ручной настройки* (*manual configuration*), а затем завершите работу мастера.

Затем перейдите в субдомен PythonAnywhere по адресу ``http://<имя пользователя Вашей учетной записи>.pythonanywhere.com`` в новой вкладке браузера. Вы должны увидеть стандартную страницу приветствия ``Hello, World!``. Это связано с тем, что WSGI скрипт в настоящее время выдает эту страницу, а не Ваше приложение Django.

Настраиваем WSGI скрипт
.......................
`Интерфейс шлюза Web-сервера <http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface>`_, сокращенно WSGI обеспечивает простой и универсальный интерфейс между веб-серверами и веб-приложениями. PythonAnywhere использует WSGI для создания связи сервер-приложение и передачи поступающих запросов на Ваш субдомен Вашему веб-приложению.

Чтобы настроить WSGI скрипт, перейдите на вкладку *Веб* в инструментальной панели PythonAnywhere. Здесь нажмите на вкладку Web. Под заголовком Code Вы должны увидеть ссылку на файл конфигурации WSGI, например, ``/var/www/<имя пользователя Вашей учетной записи>_pythonanywhere_com_wsgi.py``

Добрые люди в PythonAnywhere создали простой WSGI файл для нас с несколькими возможными конфигурациями. Для Вашего Веб приложения Вы должны настроить раздел Django файла. В приведенном ниже примере показана возможная конфигурация для Вашего приложения.

.. code-block:: python
	
	# ВКЛЮЧАЕМ ВИРТУАЛЬНОЕ ОКРУЖЕНИЕ ДЛЯ ВАШЕГО ПРИЛОЖЕНИЯ
	activate_this = '/home/<имя пользователя Вашей учетной записи>/.virtualenvs/rango/bin/activate_this.py'
	execfile(activate_this, dict(__file__=activate_this))
	import os
	import sys

	# ДОБАВЛЯЕМ ВАШ ПРОЕКТ В PYTHONPATH интерпретатора PYTHON
	path = '/home/<имя пользователя Вашей учетной записи>/tango_with_django_17/'
	if path not in sys.path:
	    sys.path.append(path)
		
	# ВАЖНО ПЕРЕЙТИ В КАТАЛОГ ПРОЕКТА
	os.chdir(path)

	# СООБЩАЕМ DJANGO ГДЕ РАСПОЛОЖЕН ВАШ МОДУЛЬ С НАСТРОЙКАМИ
	os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tango_with_django_project_17.settings')
	
	# ИМПОРТИРУЕМ НАСТРОЙКУ DJANGO - НОВОВВЕДЕНИЕ ДЛЯ ВЕРСИИ 1.7
	import django
	django.setup()
	
	# ИМПОРТИРУЕМ DJANGO WSGI ОБРАБОТЧИК, КОТОРЫЙ БУДЕТ РАБОТАТЬ С ЗАПРОСАМИ
	import django.core.handlers.wsgi
	application = django.core.handlers.wsgi.WSGIHandler()
	
Убедитесь, что Вы заменили ``<имя пользователя Вашей учетной записи>`` на Ваше имя пользователя и измените любые другие настройки пути, чтобы они соответствовали Вашему приложению. Вы также должны удалить любой другой код из WSGI конфигурации, чтобы убедиться в отсутствии конфликтов.

Вышеприведенный пример кода начинается с активации Вашего виртуального окружения ``rango``, которое было предварительно настроено со всеми необходимыми пакетами. Это скрипт затем добавляет каталог Вашего проекта в ``PYTHONPATH`` интерпретатора Python, который выполняет Ваше веб приложение. Это позволяет Python получить доступ к модулям Вашего проекта. Если нужно добавить дополнительные пути, то Вы можете легко вставить их сюда. Затем Вы можете указать расположение модуля ``settings.py`` Вашего проекта. Последний шаг - это добавление Django WSGI обработчика и вызов его для Вашего приложения.

Когда Вы завершили настройку WSGI, нажмите кнопку *Save* (*Сохранить*) в верхней правой части веб-страницы. Вернитесь обратно в вкладку *Веб* инструментальной панели PythonAnywhere и нажмите кнопку *Reload* (*Перезагрузить*) в верхней части страницы. После перезагрузки приложения, при посещении URL ``http://<имя пользователя Вашей учетной записи>.pythonanywhere.com`` Вы должны увидеть Ваше приложение Django, готовое к работе!


.. note:: Во время тестирования мы заметили, что Вы можете иногда получить ошибки ``HTTP 502 - Bad Gateway`` вместо Вашего приложения. Попытайтесь перезагрузить Ваше приложение и подождать. Если проблема не устраняется, осуществите перезагрузку ещё раз. Если ошибка все равно выдается, проверьте Ваши log файлы, чтобы просмотреть возникающие ошибки, прежде чем обращаться в службу поддержки PythonAnywhere.

Назначаем статические пути
..........................
Мы почти закончили. Последняя задача, которую мы должны рассмотреть - это назначение путей для нашего приложения. Это позволит серверам PythonAnywhere работать с Вашим статическим контентом, например, с инструментальной панели PythonAnywhere, нажав вкладку *Веб* и выбрав субдомен обслуживающий Ваше приложение из левого списка.

Под заголовком *Статические файлы*, осуществите следующие операции:

#. Нажмите ``Enter URL`` и введите ``/static/admin``, а затем нажмите Enter.
#. Нажмите на соответствующий текст ``Enter path`` (``Введите путь``). Присвойте ему значение ``/home/<username>/.virtualenvs/rango/lib/python2.7/site-packages/django/contrib/admin/static/admin``, где ``<username>`` необходимо заменить на имя пользователя Вашей учетной записи PythonAnywhere. Также может быть необходимо изменить слово ``rango``, если виртуальное окружение вашего приложения называется по-другому. Не забудьте нажать Enter, чтобы сохранить путь.
#. Повторите вышеприведенные действия для  URL ``/static/`` и пути ``/home/<username>/tango_with_django/tango_with_django_project/static``, настроив путь для каталога ``static`` Вашего веб-приложения.

Сохранив эти изменения перезагрузите Ваше веб-приложение, нажав на кнопку *Reload* (*Перезагрузка*) в верхней части страницы. Не забудьте о потенциальных ошибках ``HTTP 502 - Bad Gateway``!

Ключ Bing API
.............
Измените ``bing_search.py`` или ``keys.py`` на свой собственный BING API ключ, который позволяет осуществлять поиск в Rango. Опять необходимо нажать на кнопку *Reload* (*Перезагрузка*) , чтобы изменения вступили в силу.

Отключение режима ``DEBUG``
...........................
Когда Ваше приложение готово к работе нужно сообщить Django, что Ваше приложение расположено на production сервере. Для этого откройте файл ``settings.py`` Вашего проекта и измените ``DEBUG = True`` на ``DEBUG = False``. Это отключит режим отладки Django <https://docs.djangoproject.com/en/1.7/ref/settings/#debug>`_, и удалит подробные сообщения об ошибках.

Изменение значения ``DEBUG`` также означает, что Вы должны настроить свойство ``ALLOWED_HOSTS``. Без этого Django будет выдавать ошибки ``HTTP 400 Bad Request``. Измените ``ALLOWED_HOSTS`` таким образом, чтобы в нём находилось значение Вашего субдомена PythonAnywhere как показано ниже.


.. code-block:: python
	
	ALLOWED_HOSTS = ['<username>.pythonanywhere.com']

Опять убедитесь, что ``<username>`` изменено на имя пользователя Вашей учетной записи PythonAnywhere. Сделав это, сохраните файл и перезагрузите приложение через веб-интерфейс PythonAnywhere.

Log файлы
---------
Развертывание Вашего веб-приложения в онлайн создаёт дополнительные сложности. Возможно, что Вы столкнетесь с новыми и странными ошибками из-за неожиданных проблем. Столкнувшись с такими ошибками, информация, позволяющая найти решения, может быть найдена в одном из трёх log файлов, которые создаёт веб-сервер PythonAnywhere.

Log файлы можно просмотреть через веб-интерфейс PythonAnywhere, нажав на вкладку *Веб* или просмотрев файлы в каталоге ``/var/log/``, используя окно консоли Bash. Система создает следующие файлы:

* ``access.log``, который содержит журнал запросов к Вашему субдомену;
* ``error.log``, который регистрирует любые сообщения об ошибках, создаваемых Вашим веб-приложением; и
* ``server.log``, содержащий информацию о UNIX процессах, которые обеспечивают работу Вашего приложения.

Обратите внимание, что названия каждого log файла начинаются с Вашего субдомена. Например, ``access.log`` будет называться ``<username.pythonanywhere.com.access.log``.

При отладке бывает полезно удалять или перемещать log файлы, чтобы не прокручивать длинный список, записанной в него ранее, информации. Если файлы перемещены или удалены они будут созданы заново автоматически при новом запросе или возникновении ошибки.

Упражнения
----------
Поздравляем, Вы успешно развернули приложение Rango!

* Разместите в Твиттере `@tangowithdjango <https://twitter.com/tangowithdjango>`_ ссылку на Ваше приложение. 
* Или напишите нам Ваши впечатления от этой книги.
