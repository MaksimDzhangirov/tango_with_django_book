.. _overview-label:

Вступление
==========
Цель этой книги - стать практическим руководством по веб разработке, используя *Django 1.7.* Эта книга создана главным образом для студентов, обеспечивая пошаговое руководство, необходимое для создания и запуска Ваших первых веб приложений, а также развертывания их на веб-сервере.

Эта книга создана, чтобы дополнить `официальное руководство по Django <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_ и многие другие прекрасные руководства доступные онлайн. Собрав всё необходимое в одном месте, эта книга заполняет многие пробелы в официальной документации по Django, что позволяет изучить фреймворк Django, используя метод обучения, основанный на примерах. Более того, эта книга является введением во многие особенности, необходимые, чтобы стать специалистом в области разработки веб приложений.  

Почему стоит использовать эту книгу?
------------------------------------
**Эта книга съэкономит Ваше время.** Часто мы видели как способные студенты не найдя решение какой-то проблемы, тратили часы, пытаясь бороться Django и другими особенностями веб разработки. Чаще всего проблема связана с тем, что не известна важная информация или что-то было не понятно. Хотя на устранение случайной ошибки обычно уходит 10-15 минут, иногда может потребоваться несколько часов для её решения. Мы попытались избавиться от как можно большего числа таких препятствий. Это означает, что Вы сможете преуспевать при разработке Вашего приложения, а не думать о том как решить очередную проблему.

**Эта книга ускорит процесс усвоения знаний.** Фреймворки для разработки веб приложений избавят Вас от многих трудностей и съэкономят Ваше время. Последнее предложение верно, если Вы знаете как их использовать! Часто процесс усвоения знаний происходит медленно. Эта книга является быстрым стартом и ускоряет процесс усвоения. Показывая как создать веб приложение с самого начала с учётом всех возможностей, книга ускоряет процесс усвоения знаний.

**Эта книга улучшит Вашу последовательность операций над проектом**. Использование фреймворков для создания веб приложений требуется от Вас использования определенного шаблона проектирования - т. е., Вы должны писать только часть кода и только в определенных местах. После работы со многими студентами, мы получили мого жалоб, касающихся использования фреймворков для создания веб приложений - особенно о том как они теряют над ними управление (т. е., инверсия управления). Чтобы помочь Вам, мы создали множество последовательностей операций, чтобы Вы могли сосредоточиться на процессе разработки, не терять это чувство контроля и проектировать Ваше веб приложение, придерживаясь определенного порядка.

**Эта книга не создана ТОЛЬКО для чтения.** Что бы Вы не делали, не надо ТОЛЬКО читать эту книгу! Это практическое руководство по созданию веб приложений в Django. Чтение никогда не заменит работу. Чтобы получить больше опыта, пройдите через показанную последовательность шагов и разработайте приложение. При программировании приложения, *не просто вырезайте и вставляйте код*. Вводите его, думайте о том, что он деляет, затем читайте пояснения, которые мы дали, чтобы описать что происходит. Если Вы после этого все равно что-то не понимаете, обратитесь к документации по Django, задайте вопрос на `Stack Overflow <http://stackoverflow.com/questions/tagged/django>`_ или на других полезных сайтах и заполните этот пробел в своих знаниях. Если Вы думаете, что о Вашей проблеме стоит упомянуть в книге, пожалуйста свяжитесь с нами, чтобы мы могли улучшить книгу - у нас уже есть несколько соучастников и мы с радостью признаем Ваш вклад!

Чему Вы научитесь
-----------------
Эта книга использует метод обучения, основанный на примерах (или справочно-ориентированного обучения). В книге будет показано как спроектировать веб приложение, названное *Rango* (смотри Design Brief в разделе :ref:`overview-design-brief-label` ниже). По ходу повествования, мы покажем как решить следующие задачи.

* Настроить среду окружения - включая то как использовать терминал, Pip инсталятор, как работать с Git и т. д..
* Настроить Django проект и создать базовое Django приложение.
* Сконфигурировать Django проект, чтобы использовать статические медиа и другие медиа файлы.
* Работать с шаблоном проектирования Django's *Модель-Представление-Шаблон*.
* Создавать модели баз данных и использовать объектно-реляционное отображение, предоставляемое Django.
* Создавать формы, которые могут использовать Ваши модели из базы данных, чтобы создавать динамически генерируемые страницы.
* Использовать службы аутентификации пользователя, предоставляемые Django.
* Добавлять внешние службы в приложение.
* Включать *Каскадные таблицы стилей (CSS)* и *JavaScript* в веб приложение.
* Проектировать и применять CSS, чтобы улучшить внешний вид и впечатления о веб приложении.
* Работать с cookies и сессиями в Django.
* Использовать дополнительные функциональные возможности, например, *AJAX* в Вашем приложении.
* Развернуть Ваше приложение на веб сервере, используя *PythonAnywhere.*

В конце каждой главы мы добавили ряд упражнений, созданных для Вашей мотивации и для проверки - сможете ли Вы применить на практике то, чему научились. В последующих главах дается ряд упражнений для самообучения, а также решения с кодом и пояснениями. Наконец, весь код доступен из *GitHub* по адресу https://github.com/leifos/tango_with_django.

Чтобы увидеть законеченную, работоспособную версию приложения, Вы можете также посетить веб-сайт `How to Tango with Django <http://www.tangowithdjango.com/>`_ по адресу http://www.tangowithdjango.com/rango/.

Технологии и службы
-------------------------
При изучении этой книги мы будем использовать различные технологии и внешние службы, включая:

* Python, http://www.python.org
* Pip, http://www.pip-installer.org
* Django, https://www.djangoproject.com
* Git, http://git-scm.com 
* GitHub, https://github.com
* HTML, http://www.w3.org/html/
* CSS, http://www.w3.org/Style/CSS/
* Javascript
* JQuery, http://jquery.com
* Twitter Bootstrap, http://getbootstrap.com/
* Bing Search API от Azure Datamarket, http://datamarket.azure.com
* PythonAnywhere, https://www.pythonanywhere.com

Мы выбрали эти технологии и службы поскольку они либо являются основой для веб разработки и/или используются для примера того как интегрировать Ваше веб приложение с CSS инструментариями (таким как *Twitter Bootstrap*), внешними службами (например, предоставляемые *Microsoft Azure*) и быстро и легко развернуть Ваше приложение (с помощью PythonAnywhere).

Rango: Первоначальное ТЗ и характеристики проекта
-------------------------------------------------
Как было сказано выше, в центре внимания этой книги будет разработка приложения под названием *Rango*. При разработке этого приложения будут рассмотрены основные компоненты, которые должны быть спроектированы при создании любого веб-приложения.

.. _overview-design-brief-label:

Техническое задание
...................
Ваш клиент хочет создать веб-сайт под названием *Rango*, который позволит пользователям просматривать пользовательские категории для доступа к различным веб-страницам. В переводе с испанского слово "rango" означает *"группы, разделенные по свойству"* или *"место в социальной иерархии"* (смотри https://www.vocabulary.com/dictionary/es/rango).

* На *главной странице* сайта клиент хочет, чтобы пользователи могли видеть:

	* 5 самых просматриваемых страниц;
	* пять наивысших по рангу категорий; и
	* способ, с помощью которого пользователи могли бы просматривать или осуществлять поиск по категориям.
* Когда пользователь просматривает *страницу категории*, клиент хотел бы, чтобы на ней отображалось:
	* название категории, количество посещений, число лайков;
	* список страниц, связанных с этой категорией (показывается название страницы и ссылка на неё); и
	* возможность поиска (с помощью Bing's Search API), чтобы найти другие страницы, которые можно связать с этой категорией.
* Для конкретной категории, клиент хотел бы хранить название категории, сколько раз была посещена каждая категория и сколько пользователей нажило на кнопку "like" (т. е., страница получает свой ранг и поднимается по социальной иерархии).
* Каждая категория должна быть доступна через читаемый URL - например, ``/rango/books-about-django/``.
* Только зарегистрированные пользователи могут искать и добавлять страницы к категориям. Также посетители должны иметь возможность зарегистрировать аккаунт.

На первый взгляд разрабатываемое приложение кажется довольно простым. По существу это просто список категорий, со ссылками на страницы, не так ли? Тем не менее, существует множество сложностей и проблем, которые необходимо решить. Во-первых, давайте попытаемся получить более полную картину того, что нам необходимо разработать, сформулировав некоторые высокоуровневые концепции.

Упражнения
----------
Перед тем как продолжить, подумайте о требованиях клиента и создайте следующие составляющие проекта.

* N-уровневая схема или схема архитектуры системы.
* Каркас главной страницы и страницы категории.
* URL отображения.
* Диаграмма сущность-связь для описания модели данных, которую мы будем реализовывать.

N-уровневая архитектура
-----------------------
Высокоуровневой архитектурой для большинства веб приложений считается *3-уровневая архитектура*. Rango будет разновидностью этой архитектуры, поскольку он взаимодействует с внешней службой.

.. _fig-ntier:

.. figure:: ../images/rango-ntier-architecture.svg
	:scale: 100%
	:figclass: align-center
	
	Обзор архитектуры системы для Rango. Обратите внимание на добавление внешнего Поискового *Интерфейса Программирования Приложений (API)*.

Поскольку мы создаем веб приложением с помощью Django, мы будем использовать следующие технологии для следующих уровней.

* *Клиентом* будет веб браузер (т. е., Chrome, Firefox, Safari и т. д.), который будет отображать HTML/CSS страницы.
* *ПО промежуточного слоя* будет приложение Django, и взаимодействие с ним будет происходить через встроенный в Django веб сервер для разрабоотки.
* *Базой данных* будет, основанный на Python, драйвер базы данных *SQLite3*.
* *Поисковым API* будет *Bing Search API.*

В большей степени книга будет посвящена разработке ПО промежуточного слоя, хотя должно быть видно из Рисунка :num:`fig-ntier`, что мы должны взаимодействовать со всеми компонентами.

Каркасы
----------
Каркасы позволяют клиентам понять как будет выглядеть приложение после завершения. Они экономят кучу времени, и могут быть как от руки нарисованными эскизами, так и точными макетами, в зависимости от доступных Вам инструментов. Для Rango, мы хотим, чтобы индексная страница сайта выглядела как снимок экрана на Рисунке :num:`fig-index-page`. Наша страница категорий показана на Рисунке :num:`fig-cat-page`.

.. _fig-index-page:

.. figure:: ../images/ch1-rango-index.png
	:scale: 60%
	:figclass: align-center

	Индексная страница с левым меню категорий, а также пятью самыми просматриваемыми страницами и пятью самыми просматриваемыми категориями.

.. _fig-cat-page:

.. figure:: ../images/ch1-rango-cat-page.png
	:scale: 60%
	:figclass: align-center
	
	Страница категорий, на которой показаны страницы в категории (вместе с числом просмотров). Ниже изображен результат выполнения поиска по слову *Python*.

Страницы и конфигурация URL
---------------------------
Из ТЗ мы уже определили две страницы, которые наше приложение будет выдавать пользователю в разные моменты времени. Чтобы получить доступ к каждой из этих страниц нам необходимо описать как-то URL конфигурацию. Считайте, что конфигурирование URL заключается в выборе текста, который должен ввести в строке адреса браузера пользователь, чтобы перейти на заданную страницу. Конфигурирование основных URL для Rango показано ниже.

* ``/rango/`` будет ссылаться на представление главной (или индексной) страницы.
* ``/rango/about/`` будет ссылаться на представление страницы "О проекте".
* ``/rango/category/<category_name>/`` будет ссылаться на представление страницы категории ``<category_name>``, где категорией могут быть:
	* игры;
	* рецепты python; или
	* код и компиляторы.
* ``/rango/etc/``, где ``etc`` может быть заменено на URL для какой-нибудь функции, которую мы захотим реализовать позднее.

При создании нашего приложения нам вероятно понадобится создавать другие URL конфигурации. Тем не менее мы начнем с перечисленных выше. В какой-то момент мы также преобразуем названия категорий в правильную URL строку, а также напишем обработчик для случая, когда запрашиваемого названия категории не существует.

Позднее мы конкретизируем как создать эти страницы, используя Django фреймворк и его шаблон проектирования Модель-Представление-Шаблон. Однако сейчас имея представление о URL конфигурировании и о том как будут выглядеть страницы, нам нужно определить модель данных, которая будет содержать данные нашего веб приложения.

Диаграмма сущность-связь
------------------------
Учитывая ТЗ должно быть понятно, что мы имеем по крайней мере две сущности: *категория* и *страница*. Должно быть также ясно, что *категория* может содержать много *страниц*. Мы можем создать следующую диаграмму сущность-связь, чтобы описать эту простую модель данных.

.. _fig-rango-erd:

.. figure:: ../images/rango-erd.svg
	:scale: 100%
	:figclass: align-center

	Диаграмма сущность-связь для двух основных сущностей Rango.

Обратите внимание, что это ТЗ является нечетким. Одна страница может находится в одной или нескольких категориях. Таким образом, мы можем моделировать связь как много-ко-многим. Этот подход, однако, приводит к ряду сложностей, поэтому мы сделаем упрощающее предположение, что *одна категория содержит много страниц, но одна страница связана только с одной категорией.* Это не исключает варианта, когда одна и та же страница может быть связана с различными категориями - но страница должна быть введена дважды, что не всегда приемлемо.

Хорошей практикой является запись любых принятых предположений таких как это. Не известно когда они смогут помешать Вам при создании приложения. Записывая предположения, Вы сообщите о них Вашей команде разработчиков и убедитесь, что предположение допустимо и они готовы продолжать работать с учётом этого предположения.

Получившиеся таблицы показаны ниже, где ``Str`` обозначает ``строковое`` или ``символьное`` поле, ``Int`` - ``целочесленное`` поле, ``URL`` - URL поле и ``FK`` - внешний ключ.

.. raw:: html
	
	<style type="text/css">
		
		#ch1-tables table {
			width: 80%;
			margin: auto;
			margin: 
		}
		
		#ch1-tables table tr th {
			border-bottom: 2px solid black;
			text-align: center;
		}
		
		#ch1-tables table tr.table-header th {
			border-bottom: none;
			margin: 10px 0 10px;
			font-size: 12pt;
			font-style: italic;
		}
		
		#ch1-tables table tr td {
			text-align: center;
			border-bottom: 1px solid lightgray;
		}
		
		#ch1-tables table th.none, #ch1-tables table td.none {
			border: none;
		}
	
	</style>
	
	<div id="ch1-tables">
		<table>
			
			<tr class="table-header">
				<th colspan="2">Таблица "Категория"</th>
				<th class="none">&nbsp;</th>
				<th colspan="2">Таблица "Страница"</th>
			</tr>
			
			<tr>
				<th style="width: 20%;">Поле</th>
				<th style="width: 20%;">Тип</th>
			
				<th class="none"></th>
			
				<th style="width: 20%;">Поле</th>
				<th style="width: 20%;">Тип</th>
			</tr>
		
			<tr>
				<td>название</td>
				<td>Str</td>
			
				<td class="none">&nbsp;</td>
			
				<td>категория</td>
				<td>FK</td>
			</tr>
			
			<tr>
				<td>количество просмотров</td>
				<td>Int</td>
			
				<td class="none">&nbsp;</td>
			
				<td>заголовок</td>
				<td>Str</td>
			</tr>
			
			<tr>
				<td>количество лайков</td>
				<td>Int</td>
			
				<td class="none">&nbsp;</td>
			
				<td>url</td>
				<td>URL</td>
			</tr>
			
			<tr>
				<td class="none">&nbsp;</td>
				<td class="none">&nbsp;</td>
		
				<td class="none">&nbsp;</td>
		
				<td>количество просмотров</td>
				<td>Int</td>
			</tr>
	
		</table>
	</div>

У нас также будет таблица ``User`` - которая здесь не показана, но будет введена позже в книге. В следующих главах мы увидим как создать экземпляр этих моделей данных в Django и как использовать объектно-реляционное отображение Django для связи с базой данных.

Резюме
------
При проектировании нашего веб приложения мы будем ссылаться на это высокоуровневое проектирование и ТЗ. Хотя мы будем концентрироваться на использовании специальных технологий, эти шаги являются общими для большинства веб сайтов с использованием баз данных. Хорошо, когда Вы знакомы с принципами и комфортно себя чувствуете при создании таких описаний приложения и реализации высокоуровневого проектирования.

Если Вы уже установили Python 2.7 и Django 1.7, у Вас хорошие практические знания работы с командной строкой, настройки путей, то Вы можете сразу перейти к Главе :ref:`Django Basics <django-basics>`. В противном случае, начните с Главы :ref:`requirements-label`.

Работа с официальным учебным пособием Django
..........................................
Мы предлагаем выполнять `официальное учебное пособие Django <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_ в качестве упражнений, связанных с каждой главой этой книги. Ниже показана связь между заданиями в учебном пособии и главами книги. Задания в учебном пособии закрепят Ваше понимание фреймворка Django, а также помогут выработать практические навыки.

.. note:: (Примечание переводчика). Таблица соответствия глав книги и официального учебного пособия по Django была откорректированна.

.. raw:: html
	
	<style type="text/css">
		
		#ch1-tables table {
			width: 80%;
			margin: auto;
			margin: 
		}
		
		#ch1-tables table tr th {
			border-bottom: 2px solid black;
			text-align: center;
		}
		
		#ch1-tables table tr.table-header th {
			border-bottom: none;
			margin: 10px 0 10px;
			font-size: 12pt;
			font-style: italic;
		}
		
		#ch1-tables table tr td {
			text-align: center;
			border-bottom: 1px solid lightgray;
		}
		
		#ch1-tables table th.none, #ch1-tables table td.none {
			border: none;
		}
	
	</style>
	
	<div id="ch1-tables">
		<table>
			
			<tr>
				<th style="width: 20%;">Танго с Django</th>
				<th style="width: 20%;">Официальное учеюное пособие по Django</th>
			</tr>
			
			<tr>
				<td>Глава 6</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial01/">Часть 1 - Модели</a></td>
			</tr>
			
			<tr>
				<td>Глава 6</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial02/">Часть 2 - Интерфейс администратора</a></td>
			</tr>
			
			<tr>
				<td>Глава 7, 10</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial03/">Часть 3 - Представления и шаблоны</a></td>
			</tr>
			
			<tr>
				<td>Глава 8</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial04/">Часть 4 - Формы и общие представления</a></td>
			</tr>
			
			<tr>
				<td>Глава 20</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial05/">Часть 5 - Тестирование</a></td>
			</tr>
			
			<tr>
				<td>Глава 13, 18, 26</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial06/">Часть 6 - Статические файлы (CSS, JavaScript)</a></td>
			</tr>
	
		</table>
	</div>





