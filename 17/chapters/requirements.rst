.. _requirements-label:

Подготовка к Танго
======================
Давайте произведем настройку! Чтобы станцевать танго с Django, Вам необходимо убедиться, что Вы установили всё, что необходимо на Ваш компьютер и что Вы четко понимаете для чего нужна каждая составляющая Вашей среды разработки. В этой главе пошагово рассматриваются необходимые Вам инструменты, и обсуждается то, что Вы должны знать.

Для этого учебного пособия, Вам потребуется следующее программное обеспечение, без которого не возможна работа с этой книгой.

* Python версии 2.7.5+
* Django версии 1.7

Поскольку Django является фреймфорком для создания веб приложений, написанном на языке программирования Python, Вы должны иметь практические навыки программирования на этом языке. Если Вы не использовали язык Python до этого или просто хотите освежить свои знания, то мы настоятельно рекомендуем просмотреть и поработать с одним или несколькими из следующих руководств.

* **Краткое руководство** - Learn Python in 10 Minutes от Stavros, http://www.korokithakis.net/tutorials/python/.
* **Официальное руководство по Python** по адресу http://docs.python.org/2/tutorial/.
* **Блестящая книга**: Think Python: How to Think like a Computer Scientist, автор Allen B. Downey, доступная онлайн по адресу http://www.greenteapress.com/thinkpython/.
* **Изумительный онлайн курс**: Learn to Program, авторы Jennifer Campbell и Paul Gries по адресу https://www.coursera.org/course/programming1.

Использование терминала
------------------
Чтобы настроить Вашу среду разработки, действительно важно знать как использовать *Интерпретатор Командной Строки - ИКС (Command Line Interpreter - CLI)*, входящий в состав Вашей операционной системы. Во время работы с этим учебным пособием, вы будете постоянно взаимодействовать с ИКС. Если Вы уже знаете как использовать интерфейс командной строки, вы можете перейти непосредственно к разделу :ref:`Установка программного обеспечения <installing-software>`.

Все операционные системы на основе UNIX используют приблизительно одинаковый `терминал <http://www.ee.surrey.ac.uk/Teaching/Unix/unixintro.html>`_. На сегодняшний день доступны потомки, производные и клоны UNIX, включая `Apple's OS X <http://en.wikipedia.org/wiki/OS_X>`_  и `многие доступные дистрибутивы Linux <http://en.wikipedia.org/wiki/List_of_Linux_distributions>`_. Все эти операционные системы содержат базовый набор команд, которые помогут Вам перемещаться по Вашей файловой системе и запускать программы без использования графического интерфейса. В этом разделе приведены основные команды, с которыми Вы должны ознакомиться.

.. note:: Это учебное пособие ориентировано на пользователей операционных систем, основанных на UNIX или UNIX-подобных. Хотя Python и Django могут работать в среде Windows, многие команды, которые мы будем использовать в этой книге предназначены для UNIX терминалов. Тем не менее, эти команды могут быть воспроизведены в Windows, используя графический интерфейс пользователя, `применяя соответствующую команду в командной строке Windows <http://www.ai.uga.edu/mc/winforunix.html>`_ или применяя `Windows PowerShell <http://technet.microsoft.com/en-us/library/bb978526.aspx>`_, который предоставляет ИКС подобный UNIX терминалу.

.. Примечание переводчика:: ИКС в Windows 7 можно вызвать следующим образом. Откройте меню Пуск и в строке *Найти программы и файлы* введите cmd.exe.

После запуска нового окна терминала, Вы обычно видите что-то подобное:

.. code-block:: guess
	
	sibu:~ leif$

Это называется *приглашением командной строки*, и обозначает, что система ждет и готова к выполнению любой Вашей команды. Приглашение командной строки, которое Вы видите, может меняться в зависимости от используемой операционной системы, но все они похожи друг на друга. В вышеприведенном примере, обратите внимание на следующие три основных элемента:

* Ваше имя пользователя и имя компьютера (имя пользователя ``leif`` и имя компьютера ``sibu``);
* Ваш *текущий рабочий каталог* (тильда или ``~``); и
* привилегия учетной записи пользователя (знак доллара или ``$``).

Знак доллара (``$``) обычно обозначает, что пользователь использует стандартную пользовательскую учетную запись. Напротив, символ решетки (``#``) используется для обозначения того, что пользователь, вошедший в систему, имеет `привилегии типа root или суперпользователя <http://en.wikipedia.org/wiki/Superuser>`_. Не зависимо от того такой символ изображен, он используется, чтобы показать, что компьютер ожидает Вашего ввода. 

Откройте окно терминала и посмотрите как выглядит Ваше приглашение командной строки.

.. Примечание переводчика:: В ИКС cmd.exe приглашение командной строки выглядит как:

.. code-block:: guess

	Текущий рабочий каталог>

Изменить вид приглашения командной строки можно с помощью команды ``prompt``, например, ``prompt $$`` меняет вид приглашения на знак доллара.

Когда Вы используете терминал, важно знать в каком каталоге файловой системы Вы находитесь. Чтобы это узнать, Вы можете выполнить команду ``pwd``. Она отобразит Ваш текущий рабочий каталог. В качестве примера рассмотрим работу с терминалом, показанную ниже.

.. code-block:: guess
	
	Last login: Mon Sep 23 11:35:44 on ttys003
	sibu:~ leif$ pwd
	/Users/leif
	sibu:~ leif$

В этом примере текущий рабочий каталог - это: ``/Users/leif``.

Вы должны были также заметить, что приглашение указывает, что мой текущий рабочий каталог - это ~. Это связано с тем, что тильда (``~``) представляет Ваш *домашний каталог*. Основной каталог в любой файловой системе, основанной на UNIX, - это *корневой каталог*. Путь к корневому каталогу обозначается одним прямым слэшем (``/``).

Если вы находитесь не в своём домашнем каталоге, Вы можеет изменить каталог (``cd``) на домашний, выполнив следующую команду.

.. code-block:: guess
	
	$ cd ~

Давайте создадим каталог под названием ``code``. Для этого используйте команду (``mkdir``), как показано ниже.

.. code-block:: guess
	
	$ mkdir code

Чтобы перейти в только что созданный каталог ``code``, введите ``cd code``. Если теперь просмотреть Ваш текущий рабочий каталог, то он изменится на ``~/code/``. Это также может быть отражено в Вашем приглашении. Заметьте, что в приведенном ниже примере, текущий рабочий каталог выводится после имени компьютера ``sibu``.

.. Замечание:: Всякий раз говоря о ``<рабочем пространстве>``, мы будем иметь в виду Ваш каталог ``code``.

.. code-block:: guess
	
	sibu:~ leif$ mkdir code
	sibu:~ leif$ cd code
	sibu:code leif$ 
	sibu:code leif$ pwd
	/Users/leif/code

Чтобы получить список файлов, которые находятся в каталоге, Вы можете выполнить команду ``ls``. Чтобы увидеть скрытые файлы или каталоги - если таковые существуют - выполните команду ``ls -a``, где ключ ``a`` первая буква слова *all (все).* Если вернуться обратно в Ваш домашний каталог (``cd ~``) и затем выполнить ``ls``, Вы увидите, что существует нечто под названием ``code`` в Вашем домашнем каталоге.

Чтобы получить больше информации о том, что находится в Вашем каталоге, введите ``ls -l``. Эта команда выдает более подробный *список* Ваших файлов, а также информацию о том является ли файл каталогом или нет (для этого используется символ ``d`` в начале строки).

.. code-block:: guess
	
	sibu:~ leif$ cd ~ 
	sibu:~ leif$ ls -l 
	
	drwxr-xr-x   36 leif  staff    1224 23 Sep 10:42 code

Выводимый текст также содержит информацию о `правах доступа связанных с каталогом <http://www.elated.com/articles/understanding-permissions/>`_, кто его создал (``leif``), группе пользователей (``staff``), размере, дате/времени, когда файл был изменен и, конечно, его название.

.. Примечание переводчика:: В ИКС cmd.exe для просмотра содержимого каталога используйте команду ``dir``.

Также полезно иметь возможность редактировать файлы, используя Ваш терминал. Существует много редакторов, которые Вы можете использовать - причем некоторые из них могут быть уже установлены на Вашем компьютере. Редактор `nano <http://www.nano-editor.org/>`_, например, является простым редактором, в отличие от `vi <http://en.wikipedia.org/wiki/Vi>`_, для изучения которого потребуется некоторое время. Ниже приводится список часто используемых UNIX команд, которые могут оказаться полезны.

Основные команды
*************
Все операционные системы, основанные на UNIX, содержат список встроенных команд - большинство из которых предназначено исключительно для работы с файлами. Команды, которые Вы будете использовать чаще всего, приведены ниже, с коротким пояснением того, что они делают и как их использовать.

- ``pwd``: Выводит на экран терминала Ваш текущий *рабочий каталог*. Отображается полный путь того каталога, в котором Вы сейчас находитесь.
- ``ls``: Выводит список файлов в текущем рабочем каталоге на экран терминала. По умолчанию, размер файлов не выводится - если он необходим необходимо добавить к команде ``ls`` ключ ``-lh``, т. е. ввести команду ``ls -lh``.
- ``cd``: Позволяет Вам *изменить* Ваш текущий рабочий *каталог* с учетом пути. Например, команда ``cd /home/leif/`` изменяет текущий рабочий каталог на ``/home/leif/``. Вы также можете перемещаться на один уровень каталогов вверх без указания `полного пути <http://www.uvsc.edu/disted/decourses/dgm/2120/IN/steinja/lessons/06/06_04.html>`_, используя две точки, например ``cd ..``.
- ``cp``: Копирует файлы и/или каталоги. Вы должны указать *источник* (откуда копировать) и *назначение* (куда копировать). Например, чтобы скопировать файл ``input.py`` в тот же каталог, Вы можете ввести команду ``cp input.py input_backup.py``.
- ``mv``: Перемещает файлы/каталоги. Как и ``cp``, Вы должны указать *источник* и *назначение*. Эта команда также используется для переименовывания файлов. Например, чтобы переименовать ``numbers.txt`` в ``letters.txt``, выполните команду ``mv numbers.txt letters.txt``. Чтобы переместить файл в другой каталог, необходимо указать абсолютный или относительный путь как часть назначения - например, ``mv numbers.txt /home/david/numbers.txt``.
- ``mkdir``: Создает каталог в текущем рабочем каталоге. Вы должны указать название нового каталога после команды ``mkdir``. Например, если Ваш текущий рабочий каталог - это ``/home/david/`` и Вы ввели ``mkdir music``, то будет создан каталог ``/home/david/music/``. Выполните команду ``cd имя каталога``, чтобы перейти в только что созданный каталог.
- ``rm``: сокращение от *remove (удалить)*, эта команда удаляет файлы из Вашей файловой системы. Вы должны указать имя файла(ов), которые хотите удалить. При выполнении команды ``rm``, появляется предупреждающее сообщение о том, действительно ли Вы хотите удалить выбранный файл(ы). Вы также можете удалять каталоги, `используя рекурсивный ключ <http://www.computerhope.com/issues/ch000798.htm>`_. Будьте осторожны при использовании этой команды - восстановить удаленные файлы очень сложно, если вообще возможно!
- ``rmdir``: Альтернативная команда для удаления каталогов из Вашей файловой системы. Нужно указать каталог, который Вы хотите удалить. Опять, будьте осторожны: система не предложит подтвердить свои намерения.
- ``sudo``: Программа, которая позволяет Вам запускать команды с привилегиями безопасности другого пользователя. Обычно она используется для запуска других программ от имени ``root`` - `суперпользователя <http://en.wikipedia.org/wiki/Superuser>`_ любой операционной системы, основанной на UNIX или UNIX-подобной.

.. Замечание:: Это только краткий список команд. Просмотрите документацию Ubuntu `Использование терминала <https://help.ubuntu.com/community/UsingTheTerminal>`_  для более подробного обзора или `Шпаргалку 
 <http://fosswire.com/post/2007/08/unixlinux-command-cheat-sheet/>`_ от FOSSwire для краткого справочного руководства.

 .. Примечание переводчика:: В ИКС cmd.exe для копирования файлов используйте команду ``copy``, перемещения файлов/каталогов - ``move``, удаления файлов - ``del``. Полную справку по всем командам можно найти `по адресу <http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true>`_

.. _installing-software:

Установка программного обеспечения
-----------------------
Теперь, когда Вы достаточно понимаете как взаимодействовать с терминалом, Вы можете начать устанавливать программное обеспечение, требуемое для этого учебного пособия.

Установка Python
*****************
Итак, как насчет того, чтобы установить Python 2.7.5 на Ваш компьютер? Возможно Python уже установлен на Вашем компьютере - а, если Вы используете дистрибутив Linux или OS X, то безусловно он установлен. Это связано с тем, что некоторые функциональные возможности Вашей операционной системы `реализованы на Python <http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified>`_, поэтому возникает необходимость использования интерпретатора!

К сожалению, почти все современные операционные системы используют более старую версию Python, чем мы требуем для этого учебного пособия. Существует множество способов установки Python и многие из них к сожалению сложно в реализации. Мы покажем наиболее часто используемые способы и дадим ссылки, которые можно использовать для получения дополнительной информации.

.. Предупреждение:: В этом разделе будет подробно описано как запустить Python 2.7.5 *не зависимо от* Вашей текущей установки Python. Считается плохой практикой удалять установку Python по умолчанию, произведенную Вашей операционной системой и заменять её новой версией. Это может вывести из строя некоторые компоненты Вашей операционной системы!

Apple OS X
..........
Самый простой способ установить Python 2.7.5 на Ваш Mac - это скачать и запустить простой установщик с официального веб сайта Python. Вы можете скачать установщик, посетив веб страницу по адресу http://www.python.org/getit/releases/2.7.5/.

.. Предупреждение:: Убедитесь, что Вы скачали ``.dmg`` файл, который подходит для Вашей конкретной версии установки OS X!

#. После того как Вы скачали ``.dmg`` файл, дважды щелкните на нём в Finder.
#. Файл смонируется как отдельный диск и появится новое окно Finder.
#. Дважды щелкните на файле ``Python.mpkg``. Это запустит установщик Python.
#. Следуйте дальнейшим инструкциям на экране, пока не дойдете до места, где программа будет готова к установке программного обеспечения. Введите свой пароль для подтвердждения того, чтоы Вы хотите установить программное обеспечение.
#. После завершения, закройте установщик и извлеките диск с Python. Теперь Вы можете удалить загруженный ``.dmg`` файл.

Теперь у Вас должна быть установлена обновленная версия Python и можно начинать установку Django! Легко, не правда ли?

Дистрибутивы Linux
...................
К сожалению, существует множество различных способов загрузки, установки и запуска обновленной версии Python на Вашем дистрибутиве Linux. В довершение всего, способ установки меняется от дистрибутива к дистрибутиву. Например, последовательность действий для установки Python на дистрибутив `Fedora <https://github.com/yyuu/pyenv>`_ может отличаться от последовательности, необходимой для дистрибутива `Ubuntu <http://www.ubuntu.com/>`_.

Однако, не все так плохо. Прекрасный инструмент (или *менеджер версий Python*) под названием `pyenv <https://github.com/utahta/pythonbrew>`_ может помочь нам решить эту проблему. Он позволяет легко установить и управлять различными версиями Python, позволяя избежать конфликтов с установленной по умолчанию операционной системой версией Python. Ура!

Приведенная ниже последовательность шагов, взятая со `страницы GitHub pyenv <https://github.com/yyuu/pyenv>`_, установит Python 2.7.9 на Ваш дистрибутив Linux.

1. Откройте новое окно терминала.
2. Установите curl
::
	$ sudo apt-get install curl
3. Установите ``pyenv``
::
	$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
Это загрузит установщик и запустит его в Вашем терминале. Установка pyenv будет произведена в каталог ``~/.pyenv``. Напоминаем, что тильда (``~``)обозначает Ваш домашний каталог!

4. Добавляем в файл `.bashrc`
::
	$ nano ~/.bashrc

	export PATH="$HOME/.pyenv/bin:$PATH"
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
`pyenv` вероятно попросит Вас сделать это после установки. 
Отредактируйте файл ``~/.bashrc`` в текстовом редакторе. (например, `gedit`, `nano`, `vi` или `emacs`)

5. После сохранения отредактированной версии файла ``~/.bashrc``, закройте терминал и откройте новый. После этого изменения вступят в силу.

6. Часто возникающие `проблемы сборки <https://github.com/yyuu/pyenv/wiki/Common-build-problems>`_, можно избежать следующим образом
::
	$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
	libreadline-dev libsqlite3-dev wget curl llvm

7. Установите выбранную Вами версию Python
::
	$ pyenv install 2.7.9
Эта команда установит Python версии 2.7.9 в `~/.pyenv/versions`

8. Теперь Вы можете изменить `локальную` или `глобальную` версию Python
::
	$ pyenv versions
	* system
	  2.7.9

	$ pyenv global 2.7.9

.. Замечание:: Каталоги или файлы, начинающиеся с точки, можно считать эквивалентными *скрытым файлам* в Windows. `Dot-файлы <http://en.wikipedia.org/wiki/Dot-file>`_ обычно не видны средствами для просмотра каталога и используются в качестве конфигурационных файлов. Чтобы просмотреть скрытые файлы, можно использовать команду ``ls`` с ключом ``-a`` в конце команды, т. е., ``ls -a``.

.. _requirements-install-python-windows:

Windows
.......
По умолчанию, Microsoft Windows не имеет установленных в ней версий Python. Это означает, что не будет конфликтов с уже установленными версиями; таким образом, достаточно просто осуществить установку с нуля. Вы можете загрузить 64-битную или 32-битную версию Python с `официального сайта Python <http://www.python.org/download/>`_. Если Вы не уверены такую версию скачать, Вы можете определить является ли Ваш компьютер 32- или 64-разрядным, воспользовавшись инструкциями `на сайте Microsoft <http://windows.microsoft.com/en-gb/windows7/32-bit-and-64-bit-windows-frequently-asked-questions>`_.

#. После загрузки установщика, откройте файл из каталога, в который он был загружен.
#. Следуйте указаниям на экране, чтобы установить Python.
#. Закройте установщик после завершения установки и удалите загруженный файл.

После того как установка будет завершена, Вы станете обладателем рабочей версии Python. По умолчанию, Python 2.7.5 устанавливается в каталог ``C:\Python27``. Мы рекомендуем не изменять этот каталог на другой.

После завершения установки, откройте окно терминала и введите команду ``python``. Если Вы увидите начальное приветствие Python, установка прошла успешно. Тем не менее иногда установщик не может правильно установить переменную среды ``PATH`` Вашей установки Windows. Это приведет к тому, что команда ``python`` не будет найдена. В Windows 7 Вы можете самостоятельно установить переменную среды следующим образом:

#. Нажмите кнопку *Пуск*, щелкните правой кнопкой на *Мой компьютер* и выберите *Свойства*.
#. Выберите пункт *Дополнительные параметры системы* в левом меню.
#. Нажмите на кнопку *переменные среды*.
#. В списке *Системные переменные*, найдите переменную под названием *Path*, щелкните на неё, и затем нажмите кнопку *Изменить*.
#. В конце строки с названием Значение переменной, введите ``;C:\python27;C:\python27\scripts``. Не забудьте точку с запятой и *не добавляйте* пробел перед ней.
#. Нажмите OK в каждом окне, чтобы сохранить изменения.
#. Закройте все окна терминалов, откройте новое окно и попытайтесь опять запустить команду ``python``.

Таким образом, Вы должны получить полностью работоспособную установку Python. Порядок настройки переменной среды ``PATH`` несколько отличается в , `Windows XP <http://www.computerhope.com/issues/ch000549.htm>`_, и `Windows 8 <http://stackoverflow.com/a/14224786>`_.

Настройка ``PYTHONPATH``
*****************************
После того как Python установлен, теперь мы должны проверить, что установка прошла успешно. Для этого проверим, что `переменная окружения <http://en.wikipedia.org/wiki/Environment_variable>`_ ``PYTHONPATH`` правильно настроена. ``PYTHONPATH`` указывает интерпретатору Python, где находятся дополнительные Python `пакеты и модули <http://stackoverflow.com/questions/7948494/whats-the-difference-between-a-python-module-and-a-python-package>`_ , которые добавляют дополнительные функциональные возможности к базовой установке Python. Без правильно настроенной ``PYTHONPATH``, мы не сможем установить и использовать Django!

Во-первых, давайте убедимся, что наша переменная ``PYTHONPATH`` существует. В зависимости от используемого метода установки, иногда она создается автоматически, а иногда - нет. Для проверки на Вашей операционной системе, основанной на UNIX, выполните следующую команду в терминале.

.. code-block:: guess
	
	$ echo $PYTHONPATH

На машине с Windows, откройте командную строку и выполните следующую команду.

.. code-block:: guess
	
	$ echo %PYTHONPATH%

Если все настроено правильно, Вы должны увидеть примерно то, что показано ниже. На машине с Windows, Вы увидите путь, скорее всего начинающийся с диска C.

.. code-block:: guess
	
	/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:

Это путь к ``site-packages`` Вашей установки Python, где хранятся дополнительные пакеты и модули Python. Если Вы видите путь, то Вы можете переходить к следующей части этого учебного пособия. Однако, если ничего не выводится, необходимо найти этот путь. Для ОС Windows это сделать легко: ``site-packages`` расположены внутри каталога ``lib`` с Вашей установкой Python. Например, если Вы установили Python в ``C:\Python27``, ``site-packages`` будут находится в ``C:\Python27\Lib\site-packages\``.

Для операционных систем на основе UNIX нужно больше усилий, чтобы найти путь к ``site-packages``. Запустите интерпретатор Python. Приведенная ниже сессия в терминале демонстрирует команды, которые Вы должны вводить.

.. code-block:: python
	
	$ python
	
	Python 2.7.5 (v2.7.5:ab05e7dd2788, May 13 2013, 13:18:45) 
	[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
	Type "help", "copyright", "credits" or "license" for more information.
	
	>>> import site
	>>> print site.getsitepackages()[0]
	
	'/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages'
	
	>>> quit()

Вызов ``site.getsitepackages()`` возвращает список путей, где хранятся дополнительные пакеты и модули Python. Первый элемент в списке обычно возвращает путь к Вашему каталогу ``site-packages``. В зависимости от Вашей установки может потребоваться выводить другой элемент в списке. Если Вы получаете сообщение об ошибке, начинающее со слов, что ``getsitepackages()`` нет в модуле ``site``, убедитесь, что Вы работаете в правильной версии Python. Версия 2.7.5 должна включать эту функцию. Предыдущие версии языка не включают эту функцию.

.. Примечание переводчика:: Если Вы используете Python 3.*, то вводите вместо ``print site.getsitepackages()[0]`` ``print(site.getsitepackages()[0])``.

Строка, отображаемая в результате выполнения ``print site.getsitepackages()[0]`` - это путь к Вашему каталогу ``site-packages``. Скопировав путь, теперь нам нужно добавить его к Вашей конфигурации. Для операционной системы на основе UNIX или UNIX-подобной, опять отредактируйте Ваш файл ``.bashrc``, добавив следующую строку в конец файла.

.. code-block:: guess
	
	export PYTHONPATH=$PYTHONPATH:<PATH_TO_SITE-PACKAGES>

Замените ``<PATH_TO_SITE-PACKAGES>`` путем к Вашему каталогу ``site-packages``. Сохраните файл, закройте все окна терминалов и повторно откройте их.

На компьютере под управлением Windows, Вы должны следовать последовательности действий, приведенных в Разделе :num:`requirements-install-python-windows`, чтобы вызвать диалоговое окно установки переменной окружения. Добавьте переменную ``PYTHONPATH`` со значением равным Вашему каталогу ``site-packages``, которое обычно равно ``C:\Python27\Lib\site-packages\``.

Использование Setuptools и Pip
************************
Установка и настройка Вашей среды разработки действительно важная часть любого проекта. Хотя можно установить пакеты Python, такие как Django отдельно, это может привести к многочисленным проблемам и трудностям позднее. Например, как бы Вы могли поделиться своей настройкой с другим разработчиком? Как бы Вы создали ту же среду на Вашей новой машине? Как бы Вы могли обновиться до последней версии пакета? Использование менеджера пакетов устраняет большую часть трудностей при создании и настройке вашей среды. Он также гарантирует, что пакет, который Вы установили, а также другие пакеты, которые требуются для правильной работы устанавливаемого, подходят для версии Python, которую Вы используете.

В этой книге, мы будем использовать *Pip*. Pip - это надстройка с дружественным пользовательским интерфейсом менеджера пакетов Python *Setuptools*. Поскольку Pip зависит от Setuptools, нам необходимо, чтобы обе программы были установлены на Вашем компьютере.

.. Примечание переводчика:: В последних версиях Python 3.*, Setuptools и Pip устанавливаются вместе с Python (по крайней мере для Windows). Проверьте их наличие в папке Scripts установки Python.

Для начала загрузим Setuptools с `официального сайта акетов official Python <https://pypi.python.org/pypi/setuptools/1.1.6>`_.
Вы можете загрузить пакет в виде сжатого файла ``.tar.gz``. Используя Вашу любимую программу для распаковки, извлеките файлы. Они должны появиться в каталоге под названием ``setuptools-1.1.6``, где ``1.1.6`` - это версия Setuptools. Из окна терминала, Вы можете перейти в каталог и выполнить скрипт ``ez_setup.py`` как показано ниже.

.. code-block:: guess
	
	$ cd setuptools-1.1.6
	$ sudo python ez_setup.py

В приведенном выше примере, мы также используем ``sudo``, чтобы изменения подействовали на всю систему. Вторая команда должна установить Setuptools. Если установка прошла успешно, то Вы увидите на экране сообщение подобное тому, которое показано ниже.

.. code-block:: guess
	
	Finished processing dependencies for setuptools==1.1.6

В Вашем случае ``1.1.6`` может быть заменено версией Setuptools, которую Вы устанавливаете. Если эта строка видна, то Вы можете переходить к установке Pip. Сделать это можно с помощью одной простой команды. Из окна терминала, введите следующее.

.. code-block:: guess
	
	$ sudo easy_install pip

Эта команда должна загрузить и установить Pip, опять для всей системы. Вы должны увидеть следующее сообщение на экране, подтверждающее, что Pip был успешно установлен.

.. code-block:: guess
	
	Finished processing dependencies for pip

Увидев это сообщение, Вы должны суметь запустить Pip из Вашего терминала. Для этого просто введите ``pip``. Если вместо сообщения об ошибке из-за неизвестной введенной команды, должен быть показан список команд и ключей, которые принимает Pip. Увидев его, можно двигаться дальше!

.. Замечение:: Для компьютеров под управлением Windows, последовательность действий такая же. Единственное отличие заключается в том, что не нужно вводить команду ``sudo``.

Установка Django
*****************
Как только менеджер пакетов Python успешно установлен на Вашем компьютере, установить Django очень легко. Откройте командную строку или окно терминала и выполните следующую команду.

.. code-block:: guess
	
	$ pip install -U django==1.7

Если Вы используете операционную систему на основе UNIX и получаете сообщения о недостаточности прав доступа, Вам необходимо выполнить команду с привилегиями суперпользователя, используя команду ``sudo``. В этом случае Вы должны вводить следующую команду вместо предыдущей.

.. code-block:: guess
	
	$ sudo pip install -U django==1.7

Менеджер пакетов загрузит Django и установит его в правильном месте. Учтите, что если не добавить ``==1.7``, то может быть установлена другая версия Django.

Установка Python Imaging Library (библиотека для работы с растровой графикой)
*************************************
Во время создания Rango, мы будем загружать и обрабатывать изображения. Это означает, что нам необходима поддержка `Pillow (Python Imaging Library) <https://pillow.readthedocs.org/en/latest/>`_. Чтобы установить этот пакет, выполните следующую команду.

.. code-block:: guess
	
	$ pip install pillow

Опять используйте ``sudo`` при необходимости. 

Установка других пакетов Python
********************************
Отметим, что подобным образом можно легко загрузить любые другие дополнительные пакеты Python. `В каталоге пакетов Python <https://pypi.python.org/pypi>`_ приведен список всех пакетов доступных через Pip.

Чтобы получить список установленных пакетов, Вы можете запустить следующую команду.

.. code-block:: guess
	
	$ pip list

Совместное использование Вашего списка пакетов
*************************
Вы также можете получить список установленных пакетов в формате, которым можно поделиться с другими разработчиками. Для этого выполните следующую команду.

.. code-block:: guess
	
	$ pip freeze > requirements.txt

Если просмотреть ``requirements.txt``, используя любую из команд ``more``, ``less`` или ``cat``, Вы увидите одинаковую информацию, но в немного разном формате. Файл ``requirements.txt`` можно затем использовать для установки той же настройки, выполнив следующую команду. Это очень удобно, например, при настройке Вашей среды разработки на другом компьютере.

::
	
	$ pip install -r requirements.txt

Интегрированная среда разработки
----------------------------------
Хотя её использовать не обязательно, хорошая интегрированная среда разработки (ИСР), основанная на Python, может быть полезна для Вас в процессе разработки. Их существует несколько, но наверное `*PyCharm* <http://www.jetbrains.com/pycharm/>`_ от JetBrains' и *PyDev* (плагин `ИСР Eclipse <http://www.eclipse.org/downloads/>`_) являются наиболее популярными. На странице `Python Wiki <http://wiki.python.org/moin/IntegratedDevelopmentEnvironments>`_ представлен современный список ИРС Python.

Определите ту, которая Вам подходит, но учтите, что для некоторых нужно покупать лицензию. В идеале Вы хотите выбрать ИСР, которая поддерживала бы интеграцию с Django. PyCharm и PyDev непосредственно поддерживают интеграцию Django - хотя Вам придется указать ИРС какую версию Python Вы используете.

Виртуальные окружения для разработки
********************
Мы почти закончили настройку! Те не менее, перед тем как продолжить, отметим, что хотя это хорошая первоначальная настройка, она имеет некоторые недостатки. Что если существует другое Python приложение, которое требует другой версии для своей работы? Или Вы хотите перейти на новую версию Django, но всё равно поддерживать ваш проект на  Django 1.7?

Решением этой проблемы является использование `виртуальных окружений <http://simononsoftware.com/virtualenv-tutorial/>`_. Виртуальные окружения позволяют сосуществовать множеству установок Python и связанных с ними пакетов. Это общепринятая практика настройки Python на сегодняшний день.

Их довольно легко установить, как только Вы установили Pip и Вы знаете правильные команды. Вам необходимо установить несколько дополнительных пакетов.

::
	
	$ pip install virtualenv
	$ pip install virtualenvwrapper
	
Первый пакет предоставляет инфраструктуру для создания виртуального окружения. Смотри `не магическое введение в Pip и Virtualenv для Python новичков <http://dabapps.com/blog/introduction-to-pip-and-virtualenv-python/>`_ от Jamie Matthews, чтобы узнать больше об использовании virtualenv. Однако, использовать только *virtualenv* довольно сложно. Второй пакет является надстройкой пакета virtualenv и упрощает работу с ним.

Если Вы используете ОС на основе Linux/Unix, то, чтобы использовать надстройку, вызовите следующий скрипт из командной строки:

::

	$ source virtualenvwrapper.sh

Добавьте эту строку к вашему скрипту bash или профиля. В этом случае Вам не надо будет запускать его каждый раз, когда Вы захотите использовать виртуальные окружения.

Если Вы используете Windows, то установите пакет `virtualenvwrapper-win <https://pypi.python.org/pypi/virtualenvwrapper-win>`_:

::

	$ pip install virtualenvwrapper-win
	

Теперь всё должно быть готово для создания виртуального окружения:	

::

	$ mkvirtualenv rango

Вы можете вывести список виртуальных окружений с помощью команды ``lsvirtualenv``, и Вы можете активировать виртуальное окружение как:

::

	$ workon rango
	(rango)$
	
Ваше приглашение командной строки изменится и будет отображаться текущая виртуальное окружение, т. е., rango. Теперь в этом окружении Вы сможете устанавливать любые пакеты, причем они не будут конфликтовать с Вашим стандартным или другими окружениями. Используйте команду ``pip list``, чтобы убедиться, что в Вашей виртуальном окружении не установлен Django или Pillow. Теперь Вы можете установить их с помощью pip, чтобы они присутствовали в вашей виртуальном окружении.
Позже, когда мы начнем развертывать приложение, мы выполним аналогичные действия, смотри Главу `Развертывание Вашего приложения <virtual-environment>` и настроим виртуальное окружение на PythonAnywhere.

Репозиторий с кодом
***************
Мы также должны отметить, что при разработке кода, Вы должны всегда хранить свой код в репозитории системы контроля версий, такой как `SVN <http://subversion.tigris.org/>`_ или `GIT <http://git-scm.com/>`_. Мы не будем уделять этому время сейчас, так как это помешает приступить к немедленной разработке приложения в Django. Однако, мы даем ссылку на :ref:`ускоренный курс по GIT <git-crash-course>`. Мы настоятельно рекомендуем настроить Вам GIT репозиторий для Ваших собственных проектов. Это может спасти Вас от многих проблем.


Упражнения
---------
Чтобы чувствовать себя уверенно при работе в Вашем окружении, попробуйте выполнить следующие упражнения.

* Установите Python 2.7.5+ и Pip.
* Потренируйтесь с Вашей ИКС и создайте каталог под названием ``code``, который мы будем использовать для создания наших проектов.
* Установите пакеты Django и Pillow.
* Настройте Ваше Виртуальное Окружение.
* Настройте Ваш аккаунт на GitHub
* Загрузите и установите Интегрированную среду разработки (например, PyCharm)
* Код этой книги и приложения, которое Вы будете создавать доступны на GitHub, смотри `Книгу Танго с Django <https://github.com/leifos/tango_with_django_book>`_  и  `Приложение Rango <https://github.com/leifos/tango_with_django>`_ .
	* Если Вы заметили ошибки в книге, Вы можете сделать запрос на изменение!
	* Если у Вас возникли проблемы при выполнении упражнений, Вы можете просмотреть в репозитории как мы решили их.

