.. _tango-label:
.. _tango-chapter:

Улучшаем приложение Rango! Упражнения
=====================================

До сих пор мы добавляли различные функции в Rango. Мы создавали приложение таким образом, чтобы Вы познакомились с фреймворком Django и узнали как реализовать различные части веб сайта, которые Вы вероятно будете разрабатывать в своих собственных проектах. Тем не менее, Rango в настоящий момент не является полноценным. В этой главе мы просим Вас улучшить приложение и впечатление от использования его пользователем, объединив функциональные возможности, которые мы уже реализовали с некоторыми превосходными новыми дополнениями.

Чтобы сделать Rango более последовательным и интегрированным, необходимо добавить в него следующие функции:

* Отслеживание переходов к категориям и страницам, т. е.:
	* подсчет количества просмотров категории;
	* подсчет количества просмотров страницы с помощью Rango; и
	* сбор лайков для категорий (смотри Главу :ref:`ajax-label`).

* Интегрирование просмотра и поиска в категорию, а именно:
	* вместо того, чтобы создавать отдельную страницу поиска, пусть пользователи осуществляют поиск страниц на каждой конкретной странице категории;
	* позволить пользователям фильтровать набор категорий, показанных в боковой панели (смотри Главу :ref:`ajax-label`); и
	* вместо обновления всей страницы при осуществлении пользователем поиска, обновлять только результаты (смотри Главу :ref:`ajax-label`).

* Предоставление дополнительных возможностей для зарегистрированных пользователей, т. е.:
	* предполагая, что Вы используете пакет django-registration-redux, необходимо настроить форму регистрации для сбора дополнительной информации (т. е., веб-сайт пользователя, изображение для профиля);
	* позволить пользователям просматривать их профили;
	* позволить пользователям редактировать их профили; и
	* позволить пользователям видеть списки пользователей и их профили.


.. note:: Мы не будем решать все эти задачи сейчас. Некоторых из них будут решены в Главе :ref:`ajax-label`, а другие останутся Вам в качестве дополнительных упражнений.

Прежде чем начать добавлять эти дополнительные функции, мы составим список задач, чтобы спланировать нашу последовательность действий для каждой задачи. Разбиение задач на подзадачи значительно упростит реализацию, поскольку для решения каждой задачи у нас будет четкий план действий. В этой главе мы приведем последовательность действий для множества вышеприведенных задач. С учетом того, что Вы знаете, Вы должны суметь заполнить проблемы в Ваших знаниях реализовать большинство из них (за исключением тех, которые требуют использования AJAX). В следующую главу мы добавили куски кода и детально объясняем, как реализовать эти функции.

Подсчет количества просмотров страницы	
-----------------------------------------
В настоящий момент, Rango выдает прямую ссылку на внешние страницы. Это не самый хороший вариант, если Вы хотите отслеживать количество щелчков и просмотров каждой страницы. Для подсчета количества просмотров страницы через Rango, Вам необходимо выполнить следующие действия:

* Создайте новое представление под названием ``track_url()`` и сопоставьте ему URL ``/rango/goto/`` и название ``'name=goto'``.
* Представление ``track_url()`` будет анализировать параметры HTTP ``GET`` запроса и извлекать переменную ``page_id``. HTTP ``GET`` запросы будут выглядеть примерно так: ``/rango/goto/?page_id=1``.
	* В представлении выберите/получите ``page`` (страницу) с ``page_id`` и затем инкрементируйте соответствующее поле ``views`` (количество просмотров) и сохраните (``save()``) его.
	* Представление должно перенаправить пользователя на указанный URL, используя метод Django ``redirect``.
	* Если в HTTP ``GET`` запросе нет переменной ``page_id`` или нет объекта ``Page`` для указанного ``page_id``, то перенаправить пользователя на главную страницу Rango.
* Изменить ``category.html`` так, чтобы в нем использовались ссылки вида ``/rango/goto/?page_id=XXX`` вместо прямых URL; не забудьте использовать тег шаблона ``url`` (т. е., <a href="{% url 'goto' %}?pageid={{page.id}}">).

Подсказка
.........
Если Вы не знаете, как извлечь ``page_id`` из HTTP ``GET`` запроса, то используйте следующий фрагмент кода.

.. code-block:: python
	
	if request.method == 'GET':
	    if 'page_id' in request.GET:
	        page_id = request.GET['page_id']

Всегда сначала проверяйте имеет ли запрос тип ``GET``, затем обратитесь к словарю ``request.GET``, который содержит значения, переданные как часть запроса. Если ``page_id`` существует в словаре, то Вы можете извлечь требуемое значение следующим образом - ``request.GET['page_id']``.

.. note:: Вы можете сделать это, не используя строку запроса, а непосредственно через URL, т. е. ``/rango/goto/<page_id>/``. В этом случае Вам нужно будет создать URL шаблон, который извлекает page_id.

Поиск на странице категории
---------------------------
Цель Rango - предоставить пользователям полезный каталог ссылок на страницы. На данный момент, функция поиска не зависима от категорий. Было бы лучше, если бы поиск был интегрирован в просмотр категории. Давайте предположим, что пользователи сначала просматривают интересующие их категории. Если они не нашли нужную им страницу, тогда они могут поискать её. Если они нашли в поиске подходящую страницу, они могут добавить её в категорию, в которой они находятся. Давайте сосредоточимся на первой задаче - добавления поиска на страницу категории. Для этого выполните следующие действия:

* Удалите ссылку на общий *Поиск* из меню, т. е., мы избавляемся от глобальной функции поиска.
* Переместите HTML разметку формы для поиска и результатов поиска из шаблона ``search.html`` в ``category.html``.
* Обновите форму для поиска так, чтобы атрибут action ссылался на страницу категории, т. е., ``<form class="form-inline" id="user_form" method="post" action="{% url 'category'  category.slug %}">``.
* Измените представление для категории, чтобы оно обрабатывало HTTP ``POST``  запросы. Представление должно добавлять любые результаты поиска в словарь контекста, который передается шаблону.
* Также давайте сделаем так, чтобы только авторизированные пользователи могли осуществлять поиск. Для этого добавьте ``{% if user.authenticated %}`` в шаблон ``category.html``, чтобы ограничить доступ.

Создаем и просматриваем профили
-------------------------------
Если Вы используете пакет ``django-registration-redux``, то Вы должны собрать дополнительные данные для ``UserProfile`` (профиля пользователя).
Для этого вместо перенаправления пользователя на главную страницу Rango, Вам необходимо перенаправить его на новую форму, чтобы собрать данные о веб-сайте и URL. Чтобы добавить функцию регистрации профиля пользователя:
* Создайте ``profile_registration.html``, который будет отображать ``UserProfileForm`` (форму для профиля пользователя).
* Создайте представление ``register_profile()`` для сбора данных профиля.
* Сопоставьте представлению URL, например, ``rango/add_profile/``.
* В ``MyRegistrationView`` измените ``get_success_url()``, чтобы она ссылалась на ``rango/add_profile/``.

Ещё одна полезная функция - позволить пользователям просматривать и редактировать их профиль. Чтобы добавить эту функцию, осуществите следующие шаги:

* Во-первых, создайте шаблон под названием ``profile.html``. В этом шаблоне добавьте поля, связанные с профилем пользователя и пользователем (т. е., имя пользователя, email, веб-сайт и изображение).
* Создайте представление под названием ``profile()``. Это представление будет получать данные, необходимые для отображения шаблона профиля пользователя.
* Сопоставьте URL ``/rango/profile/`` Вашему новому представлению ``profile()``.
* В базовом шаблоне добавьте ссылку с названием *Profile* в меню, желательно в правую часть вместе с другими пользовательскими ссылками. Она должна быть доступна только пользователям, вошедшим в систему (т. е., ``{% if user.is_authenticated %}``).

Чтобы пользователи могли просматривать профили других пользователей, Вы можете создать страницу с пользователями, на которой перечислены все пользователи. Если Вы нажмете на конкретного пользователя, то сможете увидеть его профиль (но пользователь может редактировать только свою страницу).







