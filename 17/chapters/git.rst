.. _git-crash-course:

Ускоренный курс по Git
----------------------
Мы настоятельно рекомендуем Вам потратить некоторое время на самостоятельное ознакомление с системой контроля версий. Для удобства в этом разделе дается ускоренный курс по использованию `Git <http://en.wikipedia.org/wiki/Git_(software)>`_, одной из многих доступных систем контроля версий. Первоначально разработанная `Линусом Торвальдсом <http://en.wikipedia.org/wiki/Linus_Torvalds>`_, Git сегодня очень популярная система и используется в проектах как с открытым, так и закрытым исходным кодом.

В этом учебном пособии показано как работает Git на высоком уровне, объясняются основные команды, которые Вы можете использовать и даются пояснения к стандартной последовательности действий в Git.

Почему нужно использовать систему контроля версий?
**************************************************
По мере роста Ваших навыков разработки программного обеспечения, Вы увидите, что можете планировать и реализовывать решения для все более сложных задач. Как правило, чем больше ТЗ задачи, тем больше кода нужно написать. Чем больше кода Вы пишите, тем больше внимания нужно уделять практическим особенностям проектирования программного обеспечения. К ним относятся использование шаблонов проектирования и принципа DRY (не повторяться).

Большинство проектов состоят из множества файлов и много людей могут работать с этими файлами, что приводит к беспорядку. Вы когда-либо сталкивались с одной или несколькими из следующих ситуаций:

* Делали изменения в коде, понимали, что они были ошибочными и хотели бы откатить изменения?
* Потеряли код (из-за неисправности жесткого диска) или имели слишком старую резервную копию?
* Должны были поддерживать несколько версий программного кода (возможно для разных организаций)?
* Хотели бы посмотреть на различия в двух (или более) версиях Вашего базового кода?
* Хотели бы показать, что конкретное изменение сломало или исправило определенную часть кода?
* Хотели бы изменить (создать патч) какой-либо чужой код?
* Хотели бы посмотреть какая часть работы сделана (где было сделано, когда было сделано или кто это сделал)?
* Хотели бы поэкспериментировать с новой функцией, не вмешиваясь в рабочий код?

Использование системы контроля версий упрощает работу во *всех* вышеприведенных случаях. Хотя использование системы контроля версиями сначала может показаться хлопотным, все окупится позже - пусть её использование войдет в привычку.

Git на Windows
**************
Как и Python, Git не входит в стандартную установку Windows. Тем не менее, могут быть загружены и установлены реализации систем контроля версий для Windows. Вы можете загрузить официальный клиент Git для Windows с `веб-сайта Git <http://git-scm.com/download/win>`_. В установку входит программа для работы с командной строкой ``git``, которую мы будем использовать в этом ускоренном курсе.

Вы также можете скачать программу под названием *TortoiseGit*, графическое расширение оболочки Windows Explorer. Программа предоставляет действительное хорошее контекстное меню Git, вызываемое нажатием правой кнопки мыши на файлах. Это действительно упрощает использование системы контроля версий. Вы можете `скачать TortoiseGit отсюда <https://code.google.com/p/tortoisegit/>`_. Хотя мы не рассматриваем TortoiseGit в этом ускоренном курсе, по нему существуют многие учебные пособия онлайн. Просмотрите `этот учебный курс по TortoiseGit <http://robertgreiner.com/2010/02/getting-started-with-git-and-tortoisegit-on-windows/>`_, если Вы хотите использовать его.

Система Git
***********
По существу Git состоит из четырех отдельных мест хранения: Вашего *рабочего каталога*, локального *индекса*, *локального репозитория* и *удаленного репозитория*. Как можно предположить из названия, удаленный репозиторий хранится где-то на удаленном сервере - и это единственная часть Git, которая хранится за пределами Вашего компьютера. Это считается большим преимуществом Git - Вы можете изменять Ваш локальный репозиторий, пока у Вас нет доступа к Интернету, а затем, позднее, передать эти изменения в удаленный репозиторий.


.. note:: Мы используем слово *репозиторий*, но что мы действительно имеем в виду? В контексте систем контроля версий, репозиторием считается форма структуры данных, которая содержит набор *объектов commit* и набор ссылок на эти объекты, называемые *heads*. Вы можете узнать больше о них из `этого учебного пособия по Git http://www.sbf5.com/~cduan/technical/git/git-1.shtml>`_ - мы объясним, что означает термин head позднее.

В элементах приведенного ниже списка дается пояснение каждой части системы Git.

* Как уже говорилось, *удаленный репозиторий* - это копия репозитория Вашего проекта, хранящаяся на некотором удаленном сервере. Это особенно важно для Git проектов, над которыми работает несколько человек - Вам необходимо место для хранения работы всех членов команды. Если Вы не боитесь трудностей, то можете настроить сервер Git на компьютере с доступом в Интернет и правильно настроенным брандмауэром (для этого обратитесь, например, к `этому учебному пособию по настройке Git сервера <http://www.seifeet.com/2012/11/centos-63-configuring-git-server.html>`) или используйте одну из многих сайтов, предоставляющих бесплатное хранение Git репозиториев. Одним из наиболее широко используемых сайтов, доступных сегодня является `GitHub <https://github.com/>`_. На самом деле это книга тоже имеет Git `репозиторий <https://github.com/leifos/tango_with_django>`_  на GitHub!

* *Локальный репозиторий* - это копия удаленного репозитория. Ключевым различием является то, что локальным репозиторий хранится на Вашем собственном компьютере. Именно в этом репозитории Вы производите все операции добавления, изменения и удаления файлов. Когда Вы достигли определенного этапа в создании приложения, Вы можете передать все Ваши локальные изменения в удаленный репозиторий. После этого Вы можете попросить членов Вашей команды скачать репозиторий с Вашими изменениями. Эта концепция называется *pulling* из удаленного репозитория и мы объясним её немного подробнее позднее.

* *Индекс* - это специальная часть локального репозитория. Индекс хранит список файлов, с которыми должна работать система контроля версий. Его назначение поясняется подробнее в разделах описания команд и последовательности действий при работе с Git. Можете просмотреть эту `ссылку <http://stackoverflow.com/questions/4084921/what-does-the-git-index-exactly-contains>`_ на обсуждение о том, что именно хранится в индексе Git.

* Последняя часть Git - это Ваш *рабочий каталог*. Считайте эту папку или каталог местом на Вашем компьютере, где Вы можете вносить изменения в файлы Вашего репозитория. В Ваш рабочий каталог Вы можете добавлять новые файлы, изменять или удалять существующие. Отсюда Вы указываете Git обновить репозитории, чтобы отразить изменения, внесенные в рабочий каталог. Важно *не изменять код внутри локального репозитория, а только редактировать файлы в Вашем рабочем каталоге*. Локальный репозиторий содержит множество файлов, которые Git использует для отслеживания Вашего содержимого, управляемого системой контроля версий. Если Вы попытаетесь изменить что-то в этих файлах, Вы скорее всего что-нибудь испортите!

Далее мы рассмотрим как настроить Ваш рабочий каталог для Git. Мы также обсудим основную последовательность действий, которую Вы должны использовать при работе с Git.

Настраиваем Git
***************
Настроить Ваш рабочий каталог  для работы с Git просто. После того как все настроено, Вы начнете разбираться со структурой каталогов, которую использует Git. Предположим, что ВЫ зарегистрировали новую учетную запись на `GitHub <https://github.com/>`_ и `создали новый репозиторий на сайте <https://help.github.com/articles/create-a-repo>`_ для Вашего проекта. После настройки Вашего удаленного репозитория, выполните следующие действия, чтобы получить локальный репозиторий и настроенное рабочий каталог на Вашем компьютере. Мы будем предполагать, что Вы будете работать в Вашем каталоге ``<рабочего пространства>``.

#. Откройте терминал и перейдите в Ваш домашний каталог (например, ``cd ~``);
#. *Осуществите клонирование* удаленного репозитория - или другими словами, создайте его копию. Посмотрите как это сделать ниже.
#. Перейдите в созданный каталог. Это Ваш рабочий каталог, в который Вы можете добавлять файлы, контролируемые Git!

.. _requirements-git-clone-label:

Как осуществить клонивароние удаленного репозитория
...................................................
Клонирование Вашего репозитория - это простой процесс, осуществляемый с помощью команды ``git clone``. Дополните эту команду URL Вашего удаленного репозитория - и если необходимо также параметры аутентификации. URL Вашего репозитория меняется в зависимости от сайта, который Вы используете, для хранения репозиториев. Если Вы не уверены какой URL надо ввести, стоит запросить его формат с помощью поисковика или спросить у кого-то кто знает.

Для GitHub, попробуйте использовать следующую команду, заменив соответствующим образом приведенные ниже части:

``$ git clone https://<USERNAME>:<PASSWORD>@github.com/<OWNER>/<REPO_NAME>.git <workspace>``

где Вы заменяете
	- ``<USERNAME>`` на имя Вашей учетной записи GitHub;
	- ``<PASSWORD>`` на пароль Вашей учетной записи GitHub;
	- ``<OWNER>`` на имя пользователя, который является владельцем репозитория;
	- ``<REPO_NAME>`` на название репозитория Вашего проекта; и
	- ``<workspace>`` на название для Вашего рабочего каталога. Его указывать не обязательно, но мы укажем его здесь, чтобы создать каталог ``<рабочего пространства>``.

Если все прошло успешно, то Вы должны увидеть несколько сообщений в Вашем терминале или командной строке, уведомляющих о том, что клон репозитория был успешно создан.

Структура каталога
..................
После того как Вы создали копию Вашего удаленного репозитория на Вашем локальном компьютере, перейдите в каталог, используя терминал, командную строку или графический браузер файлов. Если Вы создали копию пустого репозитория рабочий каталог должен быть пустым. Таким образом, этот каталог является Вашим пустым рабочим пространством, в которое Вы можете начать добавлять файлы Вашего проекта.

Тем не менее, каталог совсем не пустой! При внимательном рассмотрении, Вы заметите скрытый каталог под названием ``.git``. В нём хранится локальный репозиторий и индекс. Не изменяйте содержимое каталога ``.git``. Это может привести к выходу из строя системы контроля версий для этого репозитория. *Таким образом вновь созданный рабочий каталог содержит рабочий каталог, локальный репозиторий и индекс*.

Заключительные настройки
........................
После настройки Вашего рабочего каталога, самое время осуществить некоторые заключительные настройки. Здесь мы рассмотрим две полезные функции, которые облегчат жизнь Вам (и членам Вашей команды).

При использовании Вашего Git репозитория Вами как членом команды, любые сделанные Вами изменения будут связаны с именем пользователя, который Вы используете для доступа к Вашему удаленному Git репозиторию. Тем не менее, Вы также можете указать Ваше полное имя и адрес электронной почты, которые будут включены в изменения, сделанные Вами, в удаленном репозитории. Это очень просто сделать. Просто откройте командную строку/терминал и перейдите в Ваш рабочий каталог. Из него выполните две команды: одна сообщит Git Ваше полное имя, а вторая - Ваш адрес электронной почты.

``$ git config user.name "John Doe"``

``$ git config user.email "johndoe123@me.com"``

Очевидно, что Вам нужно заменить фамилию, имя и адрес электронной почты на Ваш собственный. Мы не хотим, чтобы изменения в репозиторий вносил кто-то по имени John Doe! Но вдруг Вас действительно зовут John Doe?

В любом случае перейдем к рассмотрению второй функции. Git позволяет Вам не включать - или игнорировать - определенные файлы, чтобы они не добавлялись в систему контроля версий. Например, Вы можете не захотеть добавлять файл, содержащий уникальные ключи, в систему контроля, которая доступна публично с веб сайта. Если такой файл добавлен в удаленный репозиторий, то любой человек сможет теоретически получить доступ к нему создав копию репозитория.

Используя Git, файлы могут быть проигнорированы, если добавить их в файл ``.gitignore``. Этот файл должен находится в корне Вашего рабочего каталога. При добавлении файлов в систему контроля версий, Git анализирует этот файл. Если файл, который добавляется в систему контроля версий, содержится в ``.gitignore``, то он игнорируется. Информация о каждом новом игнориуермом файле или файловый шаблон для нескольких файлов должна размещаться на отдельной строке в ``.gitignore``. Просмотрите следующие примеры:

``config/api_keys.py``

``*.pyc``

В этом примере в файле две строки. В первой сообщается, что Git должен игнорировать файл ``api_keys.py`` , находящийся в каталоге ``config``. Во второй - что Git должен игнорировать *все* файлы с расширением ``.pyc``. Это действительно здорово: Вы можете использовать шаблоны, создав правило для нескольких файлов, если необходимо!

Основные команжы и последовательность действий при работе с Git
***************************************************************
После создания копии Вашего репозитория и настройки его на Вашем локальном компьютере, можно приступать к освоению последовательности действий при работе с Git. В этом разделе рассматривается основная последовательность действий при работе с Git и связанные с ней команды, вводимые Вами. 

.. _fig-git-sequence:

.. figure:: ../images/git-sequence.svg
	:figclass: align-center
	
	Схема, изображающая основную последовательность действий и соответствующие команды взаимодействия с Git репозиторием.

На рисунке :num:`fig-git-sequence` показано графическое представление основной последовательности действий при работе с Git. Каждое из чисел в синих кружках соответствует номеру в списке, приведенному ниже.

1. Начинаем работу
..................
Прежде чем Вы сможете начать работать над Вашим проектом, Вы должны подготовить Git к предстоящему циклу работы. Если Вы до сих пор не создали рабочий каталог Git для Вашего проекта, Вам необходимо ``clone`` (``клонировать``) репозиторий, чтобы получить копии всех файлов. Просмотрите раздел :ref:`requirements-git-clone-label`, чтобы получить больше информации о том как это сделать.

Если Вы уже создали копию удаленного репозитория, хорошей привычкой считается обновление Вашей локальной копии, используя команду ``git pull``. Она ``извлекает`` изменения из удаленного репозитория. Сделав это, Вы будете работать с той же версией файлов, что и члены Вашей команды, что позволит отслеживать конфликты в файлах, оберегая Вас от кошмарных проблем, связанных с использованием разных версий файлов.

2. Работаем внутри рабочего каталога!
.....................................
После того как Вы обновили Ваш рабочий каталог с учетом последних внесенных в него изменений, вся ответственность за сделанную Вами работу ложится на Вас. Из рабочего каталога Вы можете загрузить существующие файлы и изменять их. Также Вы можете удалять их или добавлять новые файлы, причем за всем этим следит система контроля версий.

Тем не менее, не все так просто как кажется. Вы должны знать, что во время Вашей работы, необходимо периодически сообщать Git о списке файлов, которые были добавлены, удалены или изменены Вами, модифицируя *локальный индекс*. Список файлов, хранящийся в локальном индексе затем используется для осуществления Вашего следующего *коммита*, который мы будем рассматривать ниже. Чтобы сообщать Git об изменениях, существует несколько Git команд, которые позволяют Вам обновлять локальный индекс. Эти команды почти идентичны тем, которые рассматривались в Главе :ref:`requirements-label`, но к ним спереди добавляется слово ``git``.

- Первая команда ``git add`` позволяет Вам указать Git, что необходимо добавить определенный файл в Ваш следующий коммит. Часто встречающаяся ошибка новичков заключается в том, что они предполагают, что ``git add`` используется только для добавления новых файлов в Ваш репозиторий - *но это не так! Вы должны также использовать эту команду, что указать Git коммит каких существующих модифицированных файлов Вы хотите совершить!* Команда может использовать следующим образом ``git add <filename>``, где ``<filename>`` - это имя файла, который Вы хотите добавить в Ваш следующий коммит. С помощью команды ``git add .`` можно добавить несколько файлов и каталогов - `но необходимо с осторожностью использовать эту возможность <http://stackoverflow.com/a/16969786>`_!

- ``git mv`` выполняет ту же функцию, что и команда Unix ``mv`` - перемещает файлы. Единственное отличие между двумя командами заключается в том, что ``git mv`` обновляет локальный индекс перед перемещением файлов. Используя эту команду необходимо указывать имя файлв следующим образом ``git mv <filename>``. Например, с помощью этой команды Вы можете переместить файлы в другой каталог в пределах Вашего репозитория. Это изменение будет отражено в следующем коммите.

- ``git cp`` позволяет создать копию файла или каталога, добавляя ссылки на новые файлы в локальный индекс. Синтаксис команды такой же как и для ``git mv``, указанной Выше, где имя файла или каталога задается следующим образом: ``git cp <filename>``.

- Команда ``git rm`` добавляет запрос на удаление файла или каталога в локальный индекс. Хотя команда ``git rm`` не удаляет файл сразу, указанный файл или каталог удаляется из Вашей файловой системы и Git репозитория при следующем коммите. Синтаксис команды такой же как и для приведенных выше команд, где имя файла может быть определено следующим образом: ``git rm <filename>``. Учтите, что вы можете добавить множество запросов на удаление в Ваш локальный индекс, а не удалять каждый файл вручную. Например, команда ``git rm -rf media/`` создает запросы на удаление в Вашем локальном индексе каталога ``media/``. Ключ ``r`` позволяет Git *рекурсивно* удалить каждый файл внутри каталога ``media/``, а ``f`` позволяет Git *не запрашивать подтверждения операции* при удалении файлов. Просмотрите `страницу Wikipedia <http://en.wikipedia.org/wiki/Rm_(Unix)#Options>`_ о команде ``rm``, чтобы узнать больше о ней.

Множество изменений, сделанных между коммитами, могут сильно запутать порядок операций с файлами. Например, Вы можете просто забыть какие файлы Вы уже указали удалить Git. К счастью Вы можете вызывать команду ``git status``, чтобы увидеть список файлов, которые были изменены в Вашем текущем рабочем каталоге, но ещё не добавлены в локальный индекс для обработки. Ниже приведен стандартный вывод для этой команды, чтобы Вы представляли, что Вы можете увидеть.

.. code-block:: python
	
	$ git status
	
	# On branch master
	# Changes to be committed:
	#   (use "git reset HEAD <file>..." to unstage)
	#
	#	modified:   chapters/requirements.rst
	#
	# Changes not staged for commit:
	#   (use "git add/rm <file>..." to update what will be committed)
	#   (use "git checkout -- <file>..." to discard changes in working directory)
	#
	#	modified:   ../TODO.txt
	#	modified:   chapters/deploy.rst
	#	deleted:    chapters/index.rst
	#	deleted:    images/css-font.png
	#	modified:   images/git-sequence.pdf
	#	modified:   omnigraffle/git-sequence.graffle
	#
 
Чтобы получить больше информации об этой полезной команде, просмотрите `официальную документацию по Git <http://git-scm.com/docs/git-status>`_.

3. Осуществляем коммит Ваших изменений
......................................
Мы использовали слово *коммит* несколько раз ранее - но что оно обозначает? В Git коммит обозначает сохранение изменений - которые перечислены в локальном индексе - то есть, которые сделаны в Вашем рабочем каталоге. Чем чаще Вы совершаете коммит, тем больше у Вас возможностей вернуться к старой версии Вашего кода, если что-то пошло не так! Старайтесь часто совершать коммит - но не совершайте его для не полной или не рабочей версии определенного модуля или функции! Существует множество онлайновых тем, посвященных идеальному времени для совершения коммита - `просмотрите эту страницу на Stack Overflow <http://stackoverflow.com/questions/1480723/dvcs-how-often-and-when-to-commit-changes>`_, где приводится мнение нескольких разработчиков.

Для совершения коммита выполните команду ``git commit``. Любые изменения в существующих файлах, которые Вы передали в индекс, будут сохранены системой контроля версий. Кроме того, системой контроля версий будут выполнены все запросы на копирование, удаление, перемещение или добавление файлов, отраженные в локальном репозитории. Когда Вы совершаете коммит, Вы обновляете *HEAD* Вашего локального репозитория. HEAD по существу является "последним коммитом из всех выполненных" - просмотрите эту `страницу Stack Overflow <http://stackoverflow.com/questions/2304087/what-is-git-head-exactly>`_, чтобы узнать больше.

При совершении коммита очень полезно для Вас и членов Вашей команды пояснять почему Вы совершили данный коммит. когда Вы совершаете коммит, если хотите, Вы можете добавить к нему дополнительное сообщение - хотя мы настоятельно рекомендуем всегда добавлять его. Вместо простого вызова ``git commit``, запускайте следующую улучшенную команду:

``$ git commit -m "Изменен файл helpers.py; добавлена функция преобразования Unicode, str_to_unicode()."``

Из вышеприведенного примера, видно, что используя ключ ``-m`` с последующей строкой, можно добавить сообщение к Вашему коммиту. Старатесь описать как можно подробнее что Вы сделали, но не пишите слишком много. Люди часто хотят сразу понять что Вы сделали, а не читать длинное сочинение. В то же время, сообщение не должно быть бессмысленным. Просто написав ``Изменен helpers.py`` может сообщить разработчику какой файл Вы изменели, но ему потребуется время, чтобы понять что именно Вы изменили.

.. note:: Хотя часто совершать коммиты хорошо, убедитесь, что Вы написали на самом деле *работающий код* перед коммитом. Это может звучать глупо, но многие не задумываются об этом. Коммит неработающего кода, может разозлить членов Вашей команды, если им придется осуществлять откат к версии Вашего кода проекта, который окажется не рабочим!

4. Синхронизация Вашего репозитория
...................................
После того как Вы совершили коммит Вашего локального репозитория и зафиксировали Ваши изменения, Вы почти готовы послать свои коммиты в удаленный репозиторий, *передав* Ваши изменения. Тем не менее, что если кто-то в Вашей команде передал свои изменения до Вас? Это означает, что Ваш локальный репозиторий не синхронизирован с удаленным, поэтому выполнить любую команду ``git push`` будет очень сложно!

Поэтому желательно всегда проверять были ли изменен удаленный репозиторий перед его обновлением. Команда ``git pull`` загрузит любые изменения из удаленного репозитория и попытается поместить их в Ваш локальный репозиторий. Если не было сделано никаких изменений, Вы спокойно можете передать Ваши. Если изменения были сделаны и не могут быть легко устранены, Вы должны проделать определенную работу.

В таком случае Вы можете *объединить* изменения из удаленного репозитория. После выполнения команды ``git pull`` откроется текстовый редактор, в котором Вы сможете добавить комментарий, объясняющий почему необходимо объединение. При сохранении текстового документа, Git объединит изменения в удаленном репозитории с Вашим локальным репозиторием.

.. note:: Если Вы используете Mac или Linux, то вероятно откроется текстовый редактор `vi <http://en.wikipedia.org/wiki/Vi>`_. Если Вы никогда не использовали vi раньше, то просмотрите `эту страницу, содержащую список базовых команд <http://www.cs.colostate.edu/helpdocs/vi.html>`_ на веб-сайте кафедры компьютерных наук Государственного Университета Колорадо. Если Вам не нравится vi, `Вы можете изменить текстовый редактор, используемый по умолчанию <http://git-scm.com/book/en/Customizing-Git-Git-Configuration#Basic-Client-Configuration>`_, который вызывает Git. В ОС Windows скорее всего будет запускаться Notepad.

5. Передача Вашего коммита(ов)
..............................
*Pushing*  - это фраза, используемая Git для описания процесса передачи любых изменений в Вашем локальном репозитории в удаленный репозиторий. Таким образом, Ваши изменения становятся доступны всем членам Вашей команды, которые могут их получить, выполнив команду ``git pull`` в своих собственных локальных рабочих каталогах. Команда ``git push`` не вызывается так часто как команда ``commit`` *Вы совершаете один или несколько коммитов перед использованием команды push*. Вы можете выполнять команду push раз в день, если завершена определенная функциональная часть или по запросу от члена команды, который нуждается в обновленной версии Вашего кода. 

Чтобы передать Ваши изменения, в простейшем случае выполните команду:

``$ git push origin master``

Как поясняется на `этой странице вопросов и ответов Stack Overflow <http://stackoverflow.com/questions/7311995/what-is-git-push-origin-master-help-with-gits-refs-heads-and-remotes>`_, эта команда передаст вашу локальную основную ветку (где сохранены Ваши изменения) в *origin* (удаленный сервер, из которого осуществлялось первоначальное копирование). Если Вы используете более сложную настройку, включающую `ветвление и слияние <http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging>`_, измените ``master`` на название ветки, в которую Вы хотите передать изменения.

Если то, что Вы передаёте очень важно, то Вы можете опционально предупредить других членов команды о том, что они должны обновить их локальные репозитории, загрузив Ваши изменения. Для этого осуществите *pull request.* Выполните его после передачи Ваших последних изменений, используя команду ``git request-pull master``, где master - это название Вашей ветки (master - это значение по умолчанию). Если Вы используете GitHub, то веб-интерфейс позволяет создавать запросы без необходимости вводить команду. Просмотрите `официальное учебное пособие на веб-сайте GitHub <https://help.github.com/articles/using-pull-requests>`_, чтобы узнать больше.

Восстановление работы при возникновении ошибок
**********************************************
В этом разделе представлено решение для худшего кошмара программиста: что делать, если Ваш код перестал работать? Возможно рефакторинг кода был проведен неправильно, кто-то что-то изменил или все так запутанно, что Вы не знаете что произошло. Независимо от причины, используя одну из систем контроля версий у Вас всегда есть возможность откатить изменения до предыдущего коммита. В этом разделе подробно описано как это сделать. Мы используем информацию, приведенную на этой странице вопросов и ответов `Stack Overflow <http://stackoverflow.com/questions/2007662/rollback-to-an-old-commit-using-git>`_.

.. warning:: Предупреждаем, что действия, показанные ниже, откатят Ваш рабочий каталог в состояние до одного из предыдущих состояний. Любые незафиксированные изменения, которые Вы сделали будут потеряны со призрачными шансами на восстановление! Будьте осторожны. Если у Вас возникли проблемы только с одним файлом, Вы всегда можете просмотреть разные версии файлов для сравнения. Просмотрите `эту страницу Stack Overflow <http://stackoverflow.com/a/3338145>`_, чтобы увидеть как это сделать.

Откат Вашего рабочего каталога до предыдущего коммита включает в себя два действия:
- определение к какому коммиту необходимо вернуться; и
- выполнение откат.

Чтобы определить к какому коммиту нужно откатиться, Вы можете использовать команду ``git log``. Выполнив эту команду внутри Вашего рабочего каталога, Вы получите список недавних коммитов, которые Вы сделали, Ваше имя и дату, когда Вы сделали коммит. Кроме того, отображается сообщение, хранящееся вместе с каждым коммитом. Из-за этого весьма полезно снабжать коммиты сообщениями, которые содержат достаточно информации, чтобы можно было понять что было изменено. Просмотрите следующий вывод при вызове команды ``git log``, показанный ниже.

::

	commit 88f41317640a2b62c2c63ca8d755feb9f17cf16e                      <- хеш коммита
	Author: John Doe <someaddress@domain.com>                            <- Автор
	Date:   Mon Jul 8 19:56:21 2013 +0100                                <- Дата/время

	    Nearly finished initial version of the requirements chapter      <- Сообщение

	commit f910b7d557bf09783b43647f02dd6519fa593b9f
	Author: John Doe <someaddress@domain.com>
	Date:   Wed Jul 3 11:35:01 2013 +0100

	    Added in the Git figures to the requirements chapter.

	commit c97bb329259ee392767b87cfe7750ce3712a8bdf
	Author: John Doe <someaddress@domain.com>
	Date:   Tue Jul 2 10:45:29 2013 +0100

	    Added initial copy of Sphinx documentation and tutorial code.

	commit 2952efa9a24dbf16a7f32679315473b66e3ae6ad
	Author: John Doe <someaddress@domain.com>
	Date:   Mon Jul 1 03:56:53 2013 -0700

	    Initial commit

Из этого списка Вы можете выбрать коммит, к которому нужно откатиться. Для выбранного коммита нужно определить хеш коммита - длинную строку из бук и цифр. Например, хеш верхнего (или HEAD) коммита в выводе из вышеприведенного примера равен ``88f41317640a2b62c2c63ca8d755feb9f17cf16e``. Вы можете выбрать его в Вашем терминале и скопировать его в буфер обмена компьютера.

После того как Вы выбрали хеш коммита, теперь ВЫ можете откатить Ваш рабочий каталог до предыдущей версии. Вы можете сделать это с помощью команды ``git checkout``. Команда в следующей примера осуществляет откат к коммиту с хешем ``88f41317640a2b62c2c63ca8d755feb9f17cf16e``.

``$ git checkout 88f41317640a2b62c2c63ca8d755feb9f17cf16e .``

Убедитесь, что Вы запускаете эту команду из корня Вашего рабочего каталога и не забудьте добавить точку на конце команды! Точка обозначает, что Вы хотите применить изменения ко всему дереву рабочего каталога. После этого Вы должны сразу же сделать коммит с сообщением, в котором говорится, что Вы выполнили откат. Передайте изменения в удаленный репозиторий и предупредите членов Вашей команды. После этого, восстановив работоспособность приложения, Вы можете сосредоточится и начать работать над проектом.

Упражнения
**********
Если Вы не проделали действия, описанные в этой главе, сделайте это сейчас, чтобы убедиться, что Ваша система и репозиторий готовы к работе.

Сначала убедитесь, что Вы правильно настроили Ваше окружение. Установите всё необходимо, в том числе Python 2.7.5 и Django 1.7. Django должно быть установлено с помощью Pip, менеджера пакетов.

После этого создайте новый Git репозиторий на Github для Вашего проекта. Чтобы попрактиковаться с командами, Вы можете создать новый файл ``readme.md`` в корне Вашего рабочего каталога. Файл `будет использоваться GitHub <https://help.github.com/articles/github-flavored-markdown>`_, для предоставления информации на странице GitHub Вашего проекта.

- Создайте файл и введите некоторый предварительный текст для Вашего проекта.
- Добавьте файл в локальный индекс после завершения ввода и осуществите коммит Ваших изменений.
- Передайте новый файл в удаленный репозиторий и пронаблюдайте за изменениями на веб-сайте GitHub.

Как только Вы завершили эти основные шаги, Вы можете продолжить редактировать файл. Добавьте в него ещё информации, осущесвите коммит, передайте данные в удаленный репозиторий - и затем попытайтесь откатиться к первоначальной версии, чтобы проверить, что всё работает, как ожидалось.

После выполнения этих упражнений, единственное, что ещё нужно обсудить - это окружение, которое Вы только что настроили. Хотя оно может подходить Вам сейчас, что если другому приложению Python понадобиться другая версия для запуска? В этом случае необходимо использовать `виртуальные окружения <http://simononsoftware.com/virtualenv-tutorial/>`_. Виртуальные окружения позволяют сосуществовать нескольким установкам интерпретатора Python и связанным с ним пакетами не конфликтуя друг с другом. Мы не будем вдаваться в подробности о них в этой главе, но Вы должны использовать виртуальное окружение, когда дело доходит до развертывания Вашего приложения. Пока `прочитайте эту статью <http://dabapps.com/blog/introduction-to-pip-and-virtualenv-python/>`_, чтобы узнать, что они собой представляют и о преимуществах их использования.

.. note:: Существует множество более сложных особенностей Git, которые мы не рассмотрели здесь, например ветвление и слияние. Существует много замечательных учебных пособий доступных онлайн, если Вы заинтересованы в совершенствовании Ваших навыков работы с системами контроля версий. Чтобы узнать больше о таких особенностях просмотрите на это `учебное пособие для начинающих работать с Git <http://veerasundar.com/blog/2011/06/git-tutorial-getting-started/>`_, `руководство по Git <http://rogerdudler.github.io/git-guide/>`_ или `Изучаем ветвление в Git <http://pcottle.github.io/learnGitBranching/>`_.

