.. _setup-label:

.. _django-basics:

Основы работы с Django 
======================
Давайте начнем работать с Django! В этой главе мы дадим краткий обзор основ работы с Django. Вы настроите новый проект и новое веб приложение. В конце этой главы Вы будете иметь простую работающую веб страницу, созданную с помощью Django!

Проверка Вашей конфигурации
---------------------------
Давайте начнем, проверив, что Вы правильно установили Python и Django, и что они имеют подходящую версию для этого учебного пособия. Для этого запустите новую копию терминала и выполните следующую команду.

::
	
	$ python --version
	2.7.5

Она выведет на экран номер версии установленного интерпретатора Python. Если версия, изображенная на экране отличается от ``2.7.5``, Вам необходимо вернуться к Разделу :ref:`installing-software` и проверить, что Вы выполнили все необходимые шаги по установке для Вашей операционной системы.

После проверки версии Python, проверьте Вашу версию установки Django, выполнив следующую команду.

::
	
	$ python -c "import django; print(django.get_version())"
	1.7

Команда опять выполнит код внутри строки, которая вводится за ключем ``-c``. После импорта Django, Вы должны увидеть в терминале ``1.7`` на следующей строке. Если Вы видите другой набор чисел или выводится ``ImportError`` интерпретатором Python, вернитесь в Раздел :ref:`installing-software` или обратитесь к `Документации Django по установке Django <https://docs.djangoproject.com/en/1.7/topics/install/>`_ за дальнейшей информацией. Если Вы обнаружили, что используете другую версию Django, то у Вас могут возникнуть проблемы в дальнейшем. Из-за этого стоит удостовериться, что у Вас установлена версия Django 1.7. 

Создание Вашего Django проекта
------------------------------
Чтобы создать новый Django проект, перейдите в каталог, который Вы используете для создания ``кода`` (т. е., в каталог Вашего ``<рабочего пространства>``), и выполните следующую команду:

``$ django-admin.py startproject tango_with_django_project``

.. note:: В Windows может потребоваться задавать полный путь к скрипту django-admin.py, т. е. ``python c:\python27\scripts\django-admin.py startproject tango_with_django_project`` как предложено в ссылке `StackOverflow <http://stackoverflow.com/questions/8112630/cant-create-django-project-using-command-prompt>`_.

Эта команда вызовет скрипт ``django-admin.py``, который настроит новый Django проект под названием ``tango_with_django_project`` для Вас. Обычно мы добавляем слово ``_project`` в конец названий каталогов наших Django проектов, чтобы точно знать, что они содержат - однако названия Ваших проектов полностью зависят от Вас.

Теперь в вашем рабочем пространстве должен появиться каталог, название которого совпадает с названием Вашего нового проекта ``tango_with_django_project``. Внутри этого только что созданного каталога, вы должны увидеть:

* другой каталог с таким же названием как и Ваш проект, ``tango_with_django_project``; и
* скрипт на языке Python, который называется ``manage.py``.

В этом учебном пособии мы будем называть этот вложенный каталог, *каталогом для настройки проекта*. Внутри этого каталога, находятся четыре Python скрипта. Мы подробно рассмотрим эти скрипты позднее, но пока Вы должны увидеть:

* ``__init__.py``, пустой Python скрипт, наличие которого говорит интерпретатору Python, что этот каталог является Python пакетом;
* ``settings.py``, файл, где хранятся все Ваши настройки Django проекта;
* ``urls.py``, Python скрипт для хранения URL шаблонов Вашего проекта; и 
* ``wsgi.py``, Python скрипт, который поможет запустить Ваш сервер для разработки приложения и развернуть Ваш проект на сервере, который будет использоваться для работы приложения.

.. note:: Каталог для настройки проекта создается для новых Django проектов, начиная с версии 1.4. Некоторым создание двух каталогов с одинаковыми именами может показаться странным, но это было сделано для того, чтобы отделить компоненты, связанные с проектом от входящих в него отдельных приложений.

В каталоге проекта, Вы должны увидеть файл, который называется ``manage.py``. Мы будем постоянно вызывать этот скрипт при разработке нашего проекта, поскольку он содержит ряд команд, которые Вы можете использовать, для развития Вашего Django проекта. Например, ``manage.py`` позволяет Вам запустить встроенный в Django сервер разработки для проверки, проделанной Вами работы, и выполнения команд, связанных с базой данных. Вы будете очень часто использовать этот скрипт во время цикла разработки приложения.

.. note:: Смотри Django документацию, чтобы узнать больше о `скриптах django-admin.py и manage.py <https://docs.djangoproject.com/en/1.7/ref/django-admin/#django-admin-py-and-manage-py>`_.

Теперь попытайтесь использовать скрипт ``manage.py``, выполнив следующую команду.

``$ python manage.py runserver``

Выполнение этой команды приведет к тому, что Django инициализирует свой "облегченный" сервер для разработки. Вы должны увидеть в окне Вашего терминала текст, подобный указанному ниже:

::
	
	$ python manage.py runserver

	System check identified no issues (0 silenced).

	You have unapplied migrations; your app may not work properly until they are applied.
	Run 'python manage.py migrate' to apply them.

	October 01, 2014 - 19:49:05
	Django version 1.7c2, using settings 'tango_with_django_project.settings'
	Starting development server at http://127.0.0.1:8000/
	Quit the server with CONTROL-C.
	
	
	
::

	$ python manage.py migrate
	
	Operations to perform:
	  Apply all migrations: admin, contenttypes, auth, sessions
	Running migrations:
	  Applying contenttypes.0001_initial... OK
	  Applying auth.0001_initial... OK
	  Applying admin.0001_initial... OK
	  Applying sessions.0001_initial... OK
	
	
#TODO(leifos): add description of migrate command: from django tutorial: The migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your mysite/settings.py file and the database migrations shipped with the app (we’ll cover those later). You’ll see a message for each migration it applies. If you’re interested, run the command-line client for your database and type \dt (PostgreSQL), SHOW TABLES; (MySQL), or .schema (SQLite) to display the tables Django created.
	
	
	

Теперь откройте Ваш любимый веб-браузер и введите URL http://127.0.0.1:8000/ [#f1]_. Вы должны увидеть веб страницу подобную той, который показана на Рисунке :num:`fig-django-dev-server-firstrun`. 

.. _fig-django-dev-server-firstrun:

.. figure:: ../images/django-dev-server-firstrun.png
	:figclass: align-center
	
	Снимок экрана начальной страницы Django, которую Вы видите при запуске сервера для разработки первый раз.

Вы можете остановить сервер для разработки в любой момент, нажав ``CTRL + C`` в Вашем окне терминала. Если Вы хотите запустить сервер для разработки на другом порте или открыть доступ к нему пользователям на других машинах, Вы можете сделать это, введя необязательные вспомогательные параметры. Рассмотрим следующую команду:

``$ python manage.py runserver <ip_адрес_Вашей_машины>:5555``

Выполнение этой команды приведет к тому, что сервер для разработки будет отвечать на входящие запросы по TCP порту 5555. Также необходимо заменить <ip_адресс_Вашей_машины> на IP адрес Вашего компьютера. 

При выборе порта, вероятно Вы не сможете использовать TCP порт 80, поскольку он обычно зарезервирован для HTTP траффика. Также любой порт меньше 1024 считается `привилегированным <http://www.w3.org/Daemon/User/Installation/PrivilegedPorts.html>`_ Вашей операционной системой.

Хотя Вы не будете использовать облегченный сервер для разработки при развертывании Вашего приложения, иногда желательно иметь возможность продемонстрировать Ваше приложение на компьютере коллеги. Запуская сервер с IP адресом Вашей машины, позволит другим обратиться к нему как ``http://<your_machines_ip_address>:<port>/`` и просмотреть Ваше веб приложение. Конечно такая возможность будет зависеть от того как настроена Ваша локальная сеть. Существующие прокси серверы или файрволы должны быть настроены соответствующим образом, чтобы такой способ работал. Обратитесь к администратору локальной сети, которую Вы используете, если Вы не можете получить доступ к серверу для разработки удаленно.

.. note:: Скрипты ``django-admin.py`` и ``manage.py`` содержат множество полезных, экономящих время функциональных возможностей. ``django-admin.py`` позволяет создавать новые проекты и приложения наряду с другими командами. Внутри Вашего каталога с проектом, ``manage.py`` позволяет решать задачи администрирования только внутри Вашего проекта. Чтобы узнать возможности каждого скрипта, просто выполните его без каких-либо аргументов. В  `официальной документации по Django дается подробный список и пояснение к каждой возможной команде <https://docs.djangoproject.com/en/1.7/ref/django-admin/>`_, которую Вы можете вводить для этих скриптов.

Если Вы используете систему контроля версий, сейчас стоит осуществить коммит тех изменений, которые Вы сделали в вашем рабочем пространстве. Обратитесь к ссылке :ref:`Ускоренный курс по GIT <git-crash-course>`, если Вы забыли команды и последовательность шагов, которые необходимо осуществить для этого.

Создание Django приложения
--------------------------
Django проект является совокупностью *конфигураций* и *приложений*, которые вместе составляют требуемое веб приложение или веб сайт. Одним из предполагаемых результатов использования такого метода является поощрение хороших методов разработки программного обеспечения. Идея разработки небольших приложений заключается в том, что Вы теоретически можете переместить существующее приложение в другой Django проект и оно заработает с минимальными усилиями. Зачем изобретать велосипед? [#f2]_

Приложение Django используется для выполнения определенной задачи. Вам необходимо будет создавать конкретные приложения, которые отвечают за работу Вашего сайта определенным образом. Например, представим, что проект состоит из нескольких приложений, включая приложение для голосования, регистрации и приложение, связанное с содержимым, характерным для этого проекта. В другом проекте мы можем захотеть повторно использовать приложения для голосования и регистрации и применять их для отправки другого содержимого. Существует много Django приложений, которые Вы можете `загрузить <https://code.djangoproject.com/wiki/DjangoResources#Djangoapplicationcomponents>`_ и использовать в Ваших проектах. поскольку мы учимся работать с Django, рассмотрим последовательность действий, которая необходима для создания Вашего собственного приложения.

Для начала создадим новое приложение под названием *Rango*. Внутри каталога с Вашим Django проектом (например, ``<рабочее пространство>/tango_with_django_project``), выполните следующую команду.

::
	
	$ python manage.py startapp rango

Команда ``startapp`` создает новый каталог внутри корневого каталога Вашего проекта. Он называется ``rango`` и содержит внутри следующие пять Python скриптов:

- ещё один ``__init__.py``, использующийся для той же цели, о которой говорилось ранее;
- models.py, место для хранения моделей данных Вашего приложения - где Вы указываете сущности и связи между данными;
- tests.py, где Вы можете хранить ряд функций для тестирования кода Вашего приложения; и
- views.py, где Вы можете хранить ряд функций, которые принимают запросы от клиентов и возвращают ответы на них.
- admin.py, где Вы можете зарегистрировать Ваши модели и воспользоваться средствами автоматизации Django, которые создают интерфейс администратора за Вас (смотри #TODO(leifos):add link to admin chapter)


``views.py`` и ``models.py`` - два файла, которые используются при создании любого приложения и являются частью основного архитектурного шаблона проектирования, используемого Django, т. е. шаблона *Модель-Представление-Шаблон*. Вы можете просмотреть `официальную документацию по Django <https://docs.djangoproject.com/en/1.7/intro/overview/>`_, что получить больше информации о том как модели, представления и шаблоны связаны друг с другом.

Прежде чем начинать создавать свои собственные модели и представления, необходимо сообщить Вашему Django проекту о существовании Вашего нового приложения. Для этого необходимо изменить файл ``settings.py`` находящийся внутри каталога конфигурации Вашего проекта. Откройте файл и найдите кортеж ``INSTALLED_APPS``. Добавьте приложение ``rango`` в конец кортежа, после чего он должен выглядеть как показано ниже.

.. code-block:: python

	INSTALLED_APPS = (
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'rango',
	)

Убедитесь, что Django подключил Ваше новое приложение опять запустив сервер для разработки. Если Вам удалось запустить сервер без ошибок, Ваше приложение было подключено и можно приступать к следующему шагу.

Создание Представления
----------------------
После создания нашего приложения Rango, давайте теперь создадим простое представление. В качестве нашего первого представления, давайте просто пошлем какой-то простой текст клиенту - мы пока не будем касаться использования моделей или шаблонов.

В вашей любимой интегрированной среде разработки откройте файл ``views.py``, расположенный внутри только что созданного каталога приложения ``rango``. Удалите комментарий ``# Create your views here.``, чтобы файл стал пустым.

Теперь добавьте следующий код.

.. code-block:: python

	from django.http import HttpResponse
	
	def index(request):
	    return HttpResponse("Rango says hey there world!")

Рассмотрим три строчки кода и отметим важные моменты при создании этого простого представления.

* Сначала мы импортируем объект `HttpResponse <https://docs.djangoproject.com/en/1.7/ref/request-response/#django.http.HttpResponse>`_ из модуля ``django.http``.
* Каждое представление внутри файла ``views.py`` существует в виде набора отдельных функций. В этом случае, мы создали только одно представление под названием ``index``.
* Каждое представление принимает по крайней мере один аргумент - объект `HttpRequest <https://docs.djangoproject.com/en/1.7/ref/request-response/#django.http.HttpRequest>`_, который также находится в модуле ``django.http``. По принятым соглашениям он называется ``request``, но Вы можете переименовать его как угодно, если хотите.
* Каждое представление должно возвращать объект HttpResponse. Простой объект HttpResponse принимает строковый параметр, представляющий содержимое страницы, которое мы хотим послать клиенту, запросившему представление.

Создание представления - это только половина работы, которую необходимо проделать, чтобы пользователь смог получить к нему доступ. Чтобы пользователь увидел ваше представление, Вы должны сопоставить представлению Единообразный Локатор Ресурса (URL) <http://en.wikipedia.org/wiki/Uniform_resource_locator>`_.

Настройка URLов
---------------
Внутри каталога приложения ``rango`` теперь нужно создать новый файл под названием ``urls.py``. Содержимое файла позволит сопоставить URLы для Вашего приложения (например, ``http://www.tangowithdjango.com/rango/``) с конкретными представлениями. Просмотрите простой ``urls.py`` файл, показанный ниже.

.. code-block:: python

	from django.conf.urls import patterns, url
	from rango import views

	urlpatterns = patterns('',
		url(r'^$', views.index, name='index'))

Этот код импортирует необходимые Django механизмы, которые используются для создания URL сопоставлений. Импортирование модуля ``views`` из ``rango`` дает доступ к нашему простому представлению, реализованному выше, что позволяет сослаться на представление в URL сопоставлении, которое мы создадим.

Для создания наших сопоставлений, мы используем `кортеж <http://en.wikipedia.org/wiki/Tuple>`_. Чтобы Djnago подхватил Ваши сопоставления, этот кортеж *должен* называться ``urlpatterns``. Кортеж ``urlpatterns`` состоит из набора вызовов функции ``django.conf.urls.url()``, причем каждый вызов обрабатывает одно сопоставление. В вышеприведенном коде примера мы используем ``url()`` один раз, таким образом, определяя только одно URL сопоставление. Первый параметр, передаваемый в функцию ``django.conf.urls.url()``, - это регулярное выражение ``^$``, которое соответствует пустой строке. Любой URL, вводимый пользователем, который соответствует этому шаблону, приведет к тому что Django вызовет представление ``views.index()``. Представлению будет передан объект ``HttpRequest`` в качестве параметра, содержащий информацию о запросе пользователя серверу. Мы также используем необязательный параметр функции ``url()`` - ``name`` - со значением в виде строки ``'index'``.

.. note:: Может показаться, что сопоставление пустому URL бессмысленно - для чего его можно использовать? При сопоставлении URL шаблонов сравнивается только часть исходной URL строки. Это связано с тем, что наш Django проект сначала обрабатывает исходную URL строку (т. е., ``http://www.tangowithdjango.com/rango/``). После её обработки, она удаляется и оставшаяся часть передается для сравнения с шаблонами. В нашем случае, от исходной строки ничего не останется, поэтому она совпадет с пустой строкой!

.. note:: Параметр ``name`` является необязательным для функции ``django.conf.urls.url()``. Он используется в Django, чтобы Вы могли отличать одно сопоставление от другого. Вполне возможно, что два разных выражения для URL сопоставления могут приводить к вызову одного и того же представления. ``name`` позволяет различать их, что используется для *обратного сравнения c URL.* Чтобы узнать больше, смотри `официальную Django документацию по этой теме <https://docs.djangoproject.com/en/1.7/topics/http/urls/#naming-url-patterns>`_.

Возможно Вы видели, что внутри Вашего каталога конфигурации проекта уже существует файл ``urls.py``. Зачем создавать ещё один? Формально Вы можете поместить *все* URLы приложений Вашего проекта внутри этого файла. Но это считается плохой практикой, поскольку усиливает связь между Вашими отдельными приложениями. Отдельный ``urls.py`` файл для каждого приложения позволяет Вам настроить URLы для отдельных приложений. После этого Вы можете добавить их к основному файлу ``urls.py`` Вашего проекта с минимальной связью.

Это означает, что нужно настроить ``urls.py`` нашего проекта ``tango_with_django_project`` и связать наш основной проект с нашим приложением Rango.

Как это сделать? Достаточно просто. Откройте файл ``urls.py`` проекта, который расположен внутри Вашего каталога конфигурации проекта. Используя относительный путь из Вашего каталога рабочего пространства, это будет файл ``<рабочее пространство>/tango_with_django_project/tango_with_django_project/urls.py``. Измените кортеж ``urlpatterns`` как показано ниже.

.. code-block:: python
	

	urlpatterns = patterns('',
	    # Examples:
	    # url(r'^$', 'tango_with_django_project_17.views.home', name='home'),
	    # url(r'^blog/', include('blog.urls')),

	    url(r'^admin/', include(admin.site.urls)),
	    url(r'^rango/', include('rango.urls')), # ADD THIS NEW TUPLE!
	)

Добавленное сопоставление ищет url строки, которые соответствуют шаблону ``^rango/``. Когда найдено совпадение, оставшаяся часть url строки передается и обрабатывается ``rango.urls`` (который мы уже настроили). Передача осуществляется с помощью функции ``include()`` из ``django.conf.urls``. Представьте себе цепочку, которая обрабатывает URL строку, которая показана на Рисунке :num:`fig-url-chain`. В этой цепочке доменное имя удаляется и оставшаяся часть url строки (``rango/``) передается проекту tango_with_django, которое находит соответствие и удаляет ``rango/``, передавая пустую строку приложению rango. Rango теперь ищет совпадения с пустой строкой, находят и отправляет обратно, созданное нами, представление ``index()``.

Перезапустите сервер для разработки Django и откройте страницу ``http://127.0.0.1:8000/rango``. Если Вы сделали всё правильно, Вы должны увидеть текст ``Rango says hello world!``. Он должен выглядеть как на снимке экрана, показанном на Рисунке :num:`fig-rango-hello-world`.

.. _fig-url-chain:

.. figure:: ../images/url-chain.svg
	:figclass: align-center
	
	Пример обработки URL, показывающий как за различные части URL отвечают разные ``url.py`` файлы.

.. _fig-rango-hello-world:

.. figure:: ../images/rango-hello-world.png
	:figclass: align-center

	Снимок экрана браузера Google Chrome, в котором показана наша первая веб страница, созданная с помощью Django. Наше приложение здоровается - давайте ответим ему - Hello, Rango!

В каждом приложении Вы будете создавать множество сопоставлений URL-представление. Это первое сопоставление достаточно простое. В дальнейшем мы будем создавать более сложные сопоставления, использование которых позволяет извлекать параметры из URL.

Очень важно хорошо понимать как URLы обрабатываются в Django. Если Вам ещё что-то не понятно или Вы хотите знать больше, обратитесь к `официальная Django документация по URLам <https://docs.djangoproject.com/en/1.7/topics/http/urls/>`_ за дополнительной информацией и примерами.

.. note:: URL шаблоны используют `регулярные выражения <http://en.wikipedia.org/wiki/Regular_expression>`_ для поиска совпадений. Из-за этого стоит знать как использовать регулярные выражения в Python. Официальная документация Python содержит `полезное руководство по регулярным выражениям <http://docs.python.org/2/howto/regex.html>`_ , тогда как на сайте regexcheatsheet.com дается `короткая шпаргалка по регулярным выражениям <http://regexcheatsheet.com/>`_.

Основные последовательности действий
------------------------------------
То, что Вы только что изучили в этой главе можно кратко изложить в виде списка действий. Здесь мы предоставим эти списки для двух различных задач, которые Вы выполняли. Вы можете использовать этот раздел для быстрого напоминания о том как сделать определенное действие.

Создание нового Django проекта
..............................
#. Чтобы создать проект, выполните команду ``python django-admin.py startproject <name>``, где ``<name>`` - это название проекта, который Вы хотите создать.

Создание нового Django приложения
.................................
#. Чтобы создать новое приложение, выполните команду ``$ python manage.py startapp <appname>``, где ``<appname>`` - это название приложения, которое Вы хотите создать.
#. Сообщите Вашему Django проекту о новом приложении, добавив его в кортеж ``INSTALLED_APPS`` Вашего файла проекта ``settings.py``.
#. В Вашем файле проекта ``urls.py``, добавьте сопоставление для приложения.
#. В Вашем каталоге приложения создайте файл ``urls.py`` для непосредственного направления входящих URL строк к представлениям.
#. В Вашем файле приложения ``view.py`` создайте необходимые представления и убедитесь, что они возвращают объект ``HttpResponse``.

Упражнения
----------
Поздравляем! Вы создали и запустили Rango. Это значительное достижение при работе с Django. Создание представлений и сопоставление URL представлениям - это первый шаг к разработке более сложных и практичных веб приложений. Теперь попытайтесь выполнить следующие упражнения, чтобы закрепить то, что Вы изучили.

* Повторно просмотрите процедуру сопоставления URL представлениям и убедитесь, что Вы её понимаете.
* Теперь создайте новое представление под названием ``about``, которое будет возвращать следующее: ``Rango says here is the about page.``
* Теперь свяжите это представление с URL ``/rango/about/``. Для этого Вам нужно только отредактировать ``urls.py`` приложения rango.
* Измените ``HttpResponse`` в представлении ``index``, чтобы он включал ссылку на страницу about.
* В ``HttpResponse`` в представлении ``about`` включите ссылку обратно на главную страницу.
* Если Вы ещё этого не сделали, самое время прочитать и выполнить первую часть официального `Django учебного пособия <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_. 

Подсказки к упражнениям
.......................
Если у Вас что-то не получается при выполнении упражнений, мы надеемся, что следующие подсказки помогут Вам.

* Ваше представление ``index`` необходимо обновить, чтобы в нём была ссылка на представление ``about``. Сейчас достаточно осуществить это примерно следующим образом: ``Rango says: Hello world! <br/> <a href='/rango/about'>About</a>``. Позже мы изменим внешний вид этих страниц.
* Регулярное выражение соответствующее ``about/`` равно ``r'^about/'`` - это поможет Вам при создании URL шаблона.
* HTML код, который нужно использовать для ссылки на главную страницу, - ``<a href="/rango/">Index</a>``. В ссылке используется та же структура, что и в ссылке на страницу ``about``, показанную выше.

.. rubric:: Примечания
.. [#f1] Предполагается, что Вы используете IP адресс 127.0.0.1 и порт 8000 при запуске Вашего Django веб-сервера для разработки. Если Вы явно не указываете порт, который будет использоваться для запуска сервера для разработки, Django по умолчанию использует порт 8000.
.. [#f2] Существует множество доступных приложений, которые Вы можете использовать в Вашем проекте. Посетите `PyPI <https://pypi.python.org/pypi?%3Aaction=search&term=django&submit=search>`_ и  сайт с `Django пакетами <https://www.djangopackages.com/>`_, чтобы найти повторно используемые приложения, которые Вы можете вставлять в Ваши проекты.
